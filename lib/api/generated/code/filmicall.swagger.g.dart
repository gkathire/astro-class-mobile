// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'filmicall.swagger.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

AlternateLoginModel _$AlternateLoginModelFromJson(Map<String, dynamic> json) =>
    AlternateLoginModel(
      loginInAsUsername: json['loginInAsUsername'] as String?,
      username: json['username'] as String?,
      password: json['password'] as String?,
    );

Map<String, dynamic> _$AlternateLoginModelToJson(
        AlternateLoginModel instance) =>
    <String, dynamic>{
      'loginInAsUsername': instance.loginInAsUsername,
      'username': instance.username,
      'password': instance.password,
    };

AnonymousLoginModel _$AnonymousLoginModelFromJson(Map<String, dynamic> json) =>
    AnonymousLoginModel(
      authValue: json['authValue'] as String?,
      authCode: (json['authCode'] as num?)?.toInt(),
      isEmail: json['isEmail'] as bool?,
      rememberMe: json['rememberMe'] as bool?,
    );

Map<String, dynamic> _$AnonymousLoginModelToJson(
        AnonymousLoginModel instance) =>
    <String, dynamic>{
      'authValue': instance.authValue,
      'authCode': instance.authCode,
      'isEmail': instance.isEmail,
      'rememberMe': instance.rememberMe,
    };

AnonymousPortalCheckInCheckOutMovieShootDayResourceModel
    _$AnonymousPortalCheckInCheckOutMovieShootDayResourceModelFromJson(
            Map<String, dynamic> json) =>
        AnonymousPortalCheckInCheckOutMovieShootDayResourceModel(
          movieShootDayResourceId:
              (json['movieShootDayResourceId'] as num?)?.toInt(),
          predefinedMovieShootDayResourceTypeId:
              (json['predefinedMovieShootDayResourceTypeId'] as num?)?.toInt(),
          inTime: (json['inTime'] as num?)?.toInt(),
          outTime: (json['outTime'] as num?)?.toInt(),
          latitude: (json['latitude'] as num?)?.toDouble(),
          longitude: (json['longitude'] as num?)?.toDouble(),
        );

Map<String,
    dynamic> _$AnonymousPortalCheckInCheckOutMovieShootDayResourceModelToJson(
        AnonymousPortalCheckInCheckOutMovieShootDayResourceModel instance) =>
    <String, dynamic>{
      'movieShootDayResourceId': instance.movieShootDayResourceId,
      'predefinedMovieShootDayResourceTypeId':
          instance.predefinedMovieShootDayResourceTypeId,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
    };

AnonymousUserCreateModel _$AnonymousUserCreateModelFromJson(
        Map<String, dynamic> json) =>
    AnonymousUserCreateModel(
      authValue: json['authValue'] as String?,
      isEmail: json['isEmail'] as bool?,
      authCode: (json['authCode'] as num?)?.toInt(),
      authCodeValidUntil: json['authCodeValidUntil'] == null
          ? null
          : DateTime.parse(json['authCodeValidUntil'] as String),
      loginFailedAttempt: (json['loginFailedAttempt'] as num?)?.toInt(),
      isAccountLocked: json['isAccountLocked'] as bool?,
      accountLockedUntil: json['accountLockedUntil'] == null
          ? null
          : DateTime.parse(json['accountLockedUntil'] as String),
      isEnabled: json['isEnabled'] as bool?,
    );

Map<String, dynamic> _$AnonymousUserCreateModelToJson(
        AnonymousUserCreateModel instance) =>
    <String, dynamic>{
      'authValue': instance.authValue,
      'isEmail': instance.isEmail,
      'authCode': instance.authCode,
      'authCodeValidUntil': instance.authCodeValidUntil?.toIso8601String(),
      'loginFailedAttempt': instance.loginFailedAttempt,
      'isAccountLocked': instance.isAccountLocked,
      'accountLockedUntil': instance.accountLockedUntil?.toIso8601String(),
      'isEnabled': instance.isEnabled,
    };

AnonymousUserModel _$AnonymousUserModelFromJson(Map<String, dynamic> json) =>
    AnonymousUserModel(
      anonymousUserId: (json['anonymousUserId'] as num?)?.toInt(),
      authValue: json['authValue'] as String?,
      isEmail: json['isEmail'] as bool?,
      authCode: (json['authCode'] as num?)?.toInt(),
      authCodeValidUntil: json['authCodeValidUntil'] == null
          ? null
          : DateTime.parse(json['authCodeValidUntil'] as String),
      loginFailedAttempt: (json['loginFailedAttempt'] as num?)?.toInt(),
      isAccountLocked: json['isAccountLocked'] as bool?,
      accountLockedUntil: json['accountLockedUntil'] == null
          ? null
          : DateTime.parse(json['accountLockedUntil'] as String),
      isEnabled: json['isEnabled'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$AnonymousUserModelToJson(AnonymousUserModel instance) =>
    <String, dynamic>{
      'anonymousUserId': instance.anonymousUserId,
      'authValue': instance.authValue,
      'isEmail': instance.isEmail,
      'authCode': instance.authCode,
      'authCodeValidUntil': instance.authCodeValidUntil?.toIso8601String(),
      'loginFailedAttempt': instance.loginFailedAttempt,
      'isAccountLocked': instance.isAccountLocked,
      'accountLockedUntil': instance.accountLockedUntil?.toIso8601String(),
      'isEnabled': instance.isEnabled,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

AnonymousUserModelReturnListModel _$AnonymousUserModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    AnonymousUserModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => AnonymousUserModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$AnonymousUserModelReturnListModelToJson(
        AnonymousUserModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

AnonymousUserModelReturnModel _$AnonymousUserModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    AnonymousUserModelReturnModel(
      model: json['model'] == null
          ? null
          : AnonymousUserModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$AnonymousUserModelReturnModelToJson(
        AnonymousUserModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

AnonymousUserUpdateModel _$AnonymousUserUpdateModelFromJson(
        Map<String, dynamic> json) =>
    AnonymousUserUpdateModel(
      anonymousUserId: (json['anonymousUserId'] as num?)?.toInt(),
      authValue: json['authValue'] as String?,
      isEmail: json['isEmail'] as bool?,
      authCode: (json['authCode'] as num?)?.toInt(),
      authCodeValidUntil: json['authCodeValidUntil'] == null
          ? null
          : DateTime.parse(json['authCodeValidUntil'] as String),
      loginFailedAttempt: (json['loginFailedAttempt'] as num?)?.toInt(),
      isAccountLocked: json['isAccountLocked'] as bool?,
      accountLockedUntil: json['accountLockedUntil'] == null
          ? null
          : DateTime.parse(json['accountLockedUntil'] as String),
      isEnabled: json['isEnabled'] as bool?,
    );

Map<String, dynamic> _$AnonymousUserUpdateModelToJson(
        AnonymousUserUpdateModel instance) =>
    <String, dynamic>{
      'anonymousUserId': instance.anonymousUserId,
      'authValue': instance.authValue,
      'isEmail': instance.isEmail,
      'authCode': instance.authCode,
      'authCodeValidUntil': instance.authCodeValidUntil?.toIso8601String(),
      'loginFailedAttempt': instance.loginFailedAttempt,
      'isAccountLocked': instance.isAccountLocked,
      'accountLockedUntil': instance.accountLockedUntil?.toIso8601String(),
      'isEnabled': instance.isEnabled,
    };

AppConfigurationModel _$AppConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    AppConfigurationModel(
      enableNewFeatures: json['enableNewFeatures'] as bool?,
      logSettings: json['logSettings'] == null
          ? null
          : LogSettings.fromJson(json['logSettings'] as Map<String, dynamic>),
      cacheHighRefreshInMinutes:
          (json['cacheHighRefreshInMinutes'] as num?)?.toInt(),
      cachMediumRefreshInMinutes:
          (json['cachMediumRefreshInMinutes'] as num?)?.toInt(),
      cachLowRefreshInMinutes:
          (json['cachLowRefreshInMinutes'] as num?)?.toInt(),
      useMiniProfiler: json['useMiniProfiler'] as bool?,
      showAllLinksWithoutPermissionCheck:
          json['showAllLinksWithoutPermissionCheck'] as bool?,
    );

Map<String, dynamic> _$AppConfigurationModelToJson(
        AppConfigurationModel instance) =>
    <String, dynamic>{
      'enableNewFeatures': instance.enableNewFeatures,
      'logSettings': instance.logSettings?.toJson(),
      'cacheHighRefreshInMinutes': instance.cacheHighRefreshInMinutes,
      'cachMediumRefreshInMinutes': instance.cachMediumRefreshInMinutes,
      'cachLowRefreshInMinutes': instance.cachLowRefreshInMinutes,
      'useMiniProfiler': instance.useMiniProfiler,
      'showAllLinksWithoutPermissionCheck':
          instance.showAllLinksWithoutPermissionCheck,
    };

AppConfigurationModelReturnModel _$AppConfigurationModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    AppConfigurationModelReturnModel(
      model: json['model'] == null
          ? null
          : AppConfigurationModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$AppConfigurationModelReturnModelToJson(
        AppConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

AppLogModel _$AppLogModelFromJson(Map<String, dynamic> json) => AppLogModel(
      logDate: json['logDate'] == null
          ? null
          : DateTime.parse(json['logDate'] as String),
      activityId: json['activityId'] as String?,
      machineName: json['machineName'] as String?,
      userIdentity: json['userIdentity'] as String?,
      appName: json['appName'] as String?,
      severity: json['severity'] as String?,
      processId: json['processId'] as String?,
      threadId: json['threadId'] as String?,
      currentFunction: json['currentFunction'] as String?,
      currentSourceFileName: json['currentSourceFileName'] as String?,
      currentSourceLineNumber: json['currentSourceLineNumber'] as String?,
      elaspedTime: (json['elaspedTime'] as num?)?.toDouble(),
      result: json['result'] as String?,
      message: json['message'] as String?,
      ipAddress: json['ipAddress'] as String?,
    );

Map<String, dynamic> _$AppLogModelToJson(AppLogModel instance) =>
    <String, dynamic>{
      'logDate': instance.logDate?.toIso8601String(),
      'activityId': instance.activityId,
      'machineName': instance.machineName,
      'userIdentity': instance.userIdentity,
      'appName': instance.appName,
      'severity': instance.severity,
      'processId': instance.processId,
      'threadId': instance.threadId,
      'currentFunction': instance.currentFunction,
      'currentSourceFileName': instance.currentSourceFileName,
      'currentSourceLineNumber': instance.currentSourceLineNumber,
      'elaspedTime': instance.elaspedTime,
      'result': instance.result,
      'message': instance.message,
      'ipAddress': instance.ipAddress,
    };

AppLogModelReturnListModel _$AppLogModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    AppLogModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => AppLogModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$AppLogModelReturnListModelToJson(
        AppLogModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistCreateModel _$ArtistCreateModelFromJson(Map<String, dynamic> json) =>
    ArtistCreateModel(
      artistCode: json['artistCode'] as String?,
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      departmentId: (json['departmentId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isPrimaryCast: json['isPrimaryCast'] as bool?,
      isDisabled: json['isDisabled'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newArtistRates: (json['newArtistRates'] as List<dynamic>?)
              ?.map((e) =>
                  ArtistRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ArtistCreateModelToJson(ArtistCreateModel instance) =>
    <String, dynamic>{
      'artistCode': instance.artistCode,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'departmentId': instance.departmentId,
      'artistTypeId': instance.artistTypeId,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'isDisabled': instance.isDisabled,
      'useDefaultRates': instance.useDefaultRates,
      'newArtistRates':
          instance.newArtistRates?.map((e) => e.toJson()).toList(),
    };

ArtistCreateWithMovieModel _$ArtistCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    ArtistCreateWithMovieModel(
      artistCode: json['artistCode'] as String?,
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      departmentId: (json['departmentId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isPrimaryCast: json['isPrimaryCast'] as bool?,
      isDisabled: json['isDisabled'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newArtistRates: (json['newArtistRates'] as List<dynamic>?)
              ?.map((e) =>
                  ArtistRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistCreateWithMovieModelToJson(
        ArtistCreateWithMovieModel instance) =>
    <String, dynamic>{
      'artistCode': instance.artistCode,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'departmentId': instance.departmentId,
      'artistTypeId': instance.artistTypeId,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'isDisabled': instance.isDisabled,
      'useDefaultRates': instance.useDefaultRates,
      'newArtistRates':
          instance.newArtistRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

ArtistGroupTypeCreateModel _$ArtistGroupTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    ArtistGroupTypeCreateModel(
      artistGroupTypeName: json['artistGroupTypeName'] as String?,
      predefinedArtistGroupTypeId:
          (json['predefinedArtistGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistGroupTypeCreateModelToJson(
        ArtistGroupTypeCreateModel instance) =>
    <String, dynamic>{
      'artistGroupTypeName': instance.artistGroupTypeName,
      'predefinedArtistGroupTypeId': instance.predefinedArtistGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

ArtistGroupTypeCreateWithMovieModel
    _$ArtistGroupTypeCreateWithMovieModelFromJson(Map<String, dynamic> json) =>
        ArtistGroupTypeCreateWithMovieModel(
          artistGroupTypeName: json['artistGroupTypeName'] as String?,
          predefinedArtistGroupTypeId:
              (json['predefinedArtistGroupTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ArtistGroupTypeCreateWithMovieModelToJson(
        ArtistGroupTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'artistGroupTypeName': instance.artistGroupTypeName,
      'predefinedArtistGroupTypeId': instance.predefinedArtistGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

ArtistGroupTypeModel _$ArtistGroupTypeModelFromJson(
        Map<String, dynamic> json) =>
    ArtistGroupTypeModel(
      artistGroupTypeId: (json['artistGroupTypeId'] as num?)?.toInt(),
      artistGroupTypeName: json['artistGroupTypeName'] as String?,
      predefinedArtistGroupTypeId:
          (json['predefinedArtistGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedArtistGroupTypeName:
          json['predefinedArtistGroupTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingArtistTypes: (json['existingArtistTypes'] as List<dynamic>?)
              ?.map((e) => ArtistTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ArtistGroupTypeModelToJson(
        ArtistGroupTypeModel instance) =>
    <String, dynamic>{
      'artistGroupTypeId': instance.artistGroupTypeId,
      'artistGroupTypeName': instance.artistGroupTypeName,
      'predefinedArtistGroupTypeId': instance.predefinedArtistGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedArtistGroupTypeName': instance.predefinedArtistGroupTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingArtistTypes':
          instance.existingArtistTypes?.map((e) => e.toJson()).toList(),
    };

ArtistGroupTypeModelReturnListModel
    _$ArtistGroupTypeModelReturnListModelFromJson(Map<String, dynamic> json) =>
        ArtistGroupTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      ArtistGroupTypeModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ArtistGroupTypeModelReturnListModelToJson(
        ArtistGroupTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistGroupTypeModelReturnModel _$ArtistGroupTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ArtistGroupTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : ArtistGroupTypeModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistGroupTypeModelReturnModelToJson(
        ArtistGroupTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistGroupTypeUpdateModel _$ArtistGroupTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ArtistGroupTypeUpdateModel(
      artistGroupTypeId: (json['artistGroupTypeId'] as num?)?.toInt(),
      artistGroupTypeName: json['artistGroupTypeName'] as String?,
      predefinedArtistGroupTypeId:
          (json['predefinedArtistGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistGroupTypeUpdateModelToJson(
        ArtistGroupTypeUpdateModel instance) =>
    <String, dynamic>{
      'artistGroupTypeId': instance.artistGroupTypeId,
      'artistGroupTypeName': instance.artistGroupTypeName,
      'predefinedArtistGroupTypeId': instance.predefinedArtistGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

ArtistModel _$ArtistModelFromJson(Map<String, dynamic> json) => ArtistModel(
      artistId: (json['artistId'] as num?)?.toInt(),
      artistCode: json['artistCode'] as String?,
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      departmentId: (json['departmentId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isPrimaryCast: json['isPrimaryCast'] as bool?,
      isDisabled: json['isDisabled'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      defaultPreProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPreProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultProductionPredefinedBudgetCategoryTypeId:
          (json['defaultProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPostProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPostProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingArtistRates: (json['existingArtistRates'] as List<dynamic>?)
              ?.map((e) => ArtistRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ArtistModelToJson(ArtistModel instance) =>
    <String, dynamic>{
      'artistId': instance.artistId,
      'artistCode': instance.artistCode,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'departmentId': instance.departmentId,
      'artistTypeId': instance.artistTypeId,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'isDisabled': instance.isDisabled,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'departmentName': instance.departmentName,
      'defaultPreProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPreProductionPredefinedBudgetCategoryTypeId,
      'defaultProductionPredefinedBudgetCategoryTypeId':
          instance.defaultProductionPredefinedBudgetCategoryTypeId,
      'defaultPostProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPostProductionPredefinedBudgetCategoryTypeId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'artistTypeName': instance.artistTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingArtistRates':
          instance.existingArtistRates?.map((e) => e.toJson()).toList(),
    };

ArtistModelReturnListModel _$ArtistModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ArtistModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ArtistModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistModelReturnListModelToJson(
        ArtistModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistModelReturnModel _$ArtistModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ArtistModelReturnModel(
      model: json['model'] == null
          ? null
          : ArtistModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistModelReturnModelToJson(
        ArtistModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistRateCreateModel _$ArtistRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    ArtistRateCreateModel(
      artistId: (json['artistId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistRateCreateModelToJson(
        ArtistRateCreateModel instance) =>
    <String, dynamic>{
      'artistId': instance.artistId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

ArtistRateCreateWithMovieModel _$ArtistRateCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    ArtistRateCreateWithMovieModel(
      artistId: (json['artistId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistRateCreateWithMovieModelToJson(
        ArtistRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'artistId': instance.artistId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

ArtistRateModel _$ArtistRateModelFromJson(Map<String, dynamic> json) =>
    ArtistRateModel(
      artistRateId: (json['artistRateId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      companyName: json['companyName'] as String?,
      artistCode: json['artistCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ArtistRateModelToJson(ArtistRateModel instance) =>
    <String, dynamic>{
      'artistRateId': instance.artistRateId,
      'artistId': instance.artistId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'companyName': instance.companyName,
      'artistCode': instance.artistCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ArtistRateModelReturnListModel _$ArtistRateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ArtistRateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ArtistRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistRateModelReturnListModelToJson(
        ArtistRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistRateModelReturnModel _$ArtistRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ArtistRateModelReturnModel(
      model: json['model'] == null
          ? null
          : ArtistRateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistRateModelReturnModelToJson(
        ArtistRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistRateUpdateModel _$ArtistRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ArtistRateUpdateModel(
      artistRateId: (json['artistRateId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistRateUpdateModelToJson(
        ArtistRateUpdateModel instance) =>
    <String, dynamic>{
      'artistRateId': instance.artistRateId,
      'artistId': instance.artistId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

ArtistTypeCreateModel _$ArtistTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeCreateModel(
      artistTypeName: json['artistTypeName'] as String?,
      predefinedArtistTypeId: (json['predefinedArtistTypeId'] as num?)?.toInt(),
      artistGroupTypeId: (json['artistGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newArtistTypeRates: (json['newArtistTypeRates'] as List<dynamic>?)
              ?.map((e) =>
                  ArtistTypeRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ArtistTypeCreateModelToJson(
        ArtistTypeCreateModel instance) =>
    <String, dynamic>{
      'artistTypeName': instance.artistTypeName,
      'predefinedArtistTypeId': instance.predefinedArtistTypeId,
      'artistGroupTypeId': instance.artistGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newArtistTypeRates':
          instance.newArtistTypeRates?.map((e) => e.toJson()).toList(),
    };

ArtistTypeCreateWithMovieModel _$ArtistTypeCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeCreateWithMovieModel(
      artistTypeName: json['artistTypeName'] as String?,
      predefinedArtistTypeId: (json['predefinedArtistTypeId'] as num?)?.toInt(),
      artistGroupTypeId: (json['artistGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newArtistTypeRates: (json['newArtistTypeRates'] as List<dynamic>?)
              ?.map((e) =>
                  ArtistTypeRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistTypeCreateWithMovieModelToJson(
        ArtistTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'artistTypeName': instance.artistTypeName,
      'predefinedArtistTypeId': instance.predefinedArtistTypeId,
      'artistGroupTypeId': instance.artistGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newArtistTypeRates':
          instance.newArtistTypeRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

ArtistTypeModel _$ArtistTypeModelFromJson(Map<String, dynamic> json) =>
    ArtistTypeModel(
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      artistTypeName: json['artistTypeName'] as String?,
      predefinedArtistTypeId: (json['predefinedArtistTypeId'] as num?)?.toInt(),
      artistGroupTypeId: (json['artistGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      predefinedArtistTypeName: json['predefinedArtistTypeName'] as String?,
      artistGroupTypeName: json['artistGroupTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingArtistTypeRates:
          (json['existingArtistTypeRates'] as List<dynamic>?)
                  ?.map((e) =>
                      ArtistTypeRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$ArtistTypeModelToJson(ArtistTypeModel instance) =>
    <String, dynamic>{
      'artistTypeId': instance.artistTypeId,
      'artistTypeName': instance.artistTypeName,
      'predefinedArtistTypeId': instance.predefinedArtistTypeId,
      'artistGroupTypeId': instance.artistGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'predefinedArtistTypeName': instance.predefinedArtistTypeName,
      'artistGroupTypeName': instance.artistGroupTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingArtistTypeRates':
          instance.existingArtistTypeRates?.map((e) => e.toJson()).toList(),
    };

ArtistTypeModelReturnListModel _$ArtistTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ArtistTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistTypeModelReturnListModelToJson(
        ArtistTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistTypeModelReturnModel _$ArtistTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : ArtistTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistTypeModelReturnModelToJson(
        ArtistTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistTypeRateCreateModel _$ArtistTypeRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeRateCreateModel(
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistTypeRateCreateModelToJson(
        ArtistTypeRateCreateModel instance) =>
    <String, dynamic>{
      'artistTypeId': instance.artistTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

ArtistTypeRateCreateWithMovieModel _$ArtistTypeRateCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeRateCreateWithMovieModel(
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistTypeRateCreateWithMovieModelToJson(
        ArtistTypeRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'artistTypeId': instance.artistTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

ArtistTypeRateModel _$ArtistTypeRateModelFromJson(Map<String, dynamic> json) =>
    ArtistTypeRateModel(
      artistTypeRateId: (json['artistTypeRateId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ArtistTypeRateModelToJson(
        ArtistTypeRateModel instance) =>
    <String, dynamic>{
      'artistTypeRateId': instance.artistTypeRateId,
      'artistTypeId': instance.artistTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'artistTypeName': instance.artistTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ArtistTypeRateModelReturnListModel _$ArtistTypeRateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeRateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  ArtistTypeRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistTypeRateModelReturnListModelToJson(
        ArtistTypeRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistTypeRateModelReturnModel _$ArtistTypeRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeRateModelReturnModel(
      model: json['model'] == null
          ? null
          : ArtistTypeRateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistTypeRateModelReturnModelToJson(
        ArtistTypeRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ArtistTypeRateUpdateModel _$ArtistTypeRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeRateUpdateModel(
      artistTypeRateId: (json['artistTypeRateId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ArtistTypeRateUpdateModelToJson(
        ArtistTypeRateUpdateModel instance) =>
    <String, dynamic>{
      'artistTypeRateId': instance.artistTypeRateId,
      'artistTypeId': instance.artistTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

ArtistTypeUpdateModel _$ArtistTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ArtistTypeUpdateModel(
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      artistTypeName: json['artistTypeName'] as String?,
      predefinedArtistTypeId: (json['predefinedArtistTypeId'] as num?)?.toInt(),
      artistGroupTypeId: (json['artistGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newArtistTypeRates: (json['newArtistTypeRates'] as List<dynamic>?)
              ?.map((e) =>
                  ArtistTypeRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingArtistTypeRates: (json['existingArtistTypeRates']
                  as List<dynamic>?)
              ?.map((e) =>
                  ArtistTypeRateUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ArtistTypeUpdateModelToJson(
        ArtistTypeUpdateModel instance) =>
    <String, dynamic>{
      'artistTypeId': instance.artistTypeId,
      'artistTypeName': instance.artistTypeName,
      'predefinedArtistTypeId': instance.predefinedArtistTypeId,
      'artistGroupTypeId': instance.artistGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newArtistTypeRates':
          instance.newArtistTypeRates?.map((e) => e.toJson()).toList(),
      'existingArtistTypeRates':
          instance.existingArtistTypeRates?.map((e) => e.toJson()).toList(),
    };

ArtistUpdateModel _$ArtistUpdateModelFromJson(Map<String, dynamic> json) =>
    ArtistUpdateModel(
      artistId: (json['artistId'] as num?)?.toInt(),
      artistCode: json['artistCode'] as String?,
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      departmentId: (json['departmentId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isPrimaryCast: json['isPrimaryCast'] as bool?,
      isDisabled: json['isDisabled'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newArtistRates: (json['newArtistRates'] as List<dynamic>?)
              ?.map((e) =>
                  ArtistRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingArtistRates: (json['existingArtistRates'] as List<dynamic>?)
              ?.map((e) =>
                  ArtistRateUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ArtistUpdateModelToJson(ArtistUpdateModel instance) =>
    <String, dynamic>{
      'artistId': instance.artistId,
      'artistCode': instance.artistCode,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'departmentId': instance.departmentId,
      'artistTypeId': instance.artistTypeId,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'isDisabled': instance.isDisabled,
      'useDefaultRates': instance.useDefaultRates,
      'newArtistRates':
          instance.newArtistRates?.map((e) => e.toJson()).toList(),
      'existingArtistRates':
          instance.existingArtistRates?.map((e) => e.toJson()).toList(),
    };

AssignDepartmentToMovieArtistsModel
    _$AssignDepartmentToMovieArtistsModelFromJson(Map<String, dynamic> json) =>
        AssignDepartmentToMovieArtistsModel(
          departmentId: (json['departmentId'] as num?)?.toInt(),
          movieArtistIds: (json['movieArtistIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
        );

Map<String, dynamic> _$AssignDepartmentToMovieArtistsModelToJson(
        AssignDepartmentToMovieArtistsModel instance) =>
    <String, dynamic>{
      'departmentId': instance.departmentId,
      'movieArtistIds': instance.movieArtistIds,
    };

AssignDepartmentToMovieEquipmentsModel
    _$AssignDepartmentToMovieEquipmentsModelFromJson(
            Map<String, dynamic> json) =>
        AssignDepartmentToMovieEquipmentsModel(
          departmentId: (json['departmentId'] as num?)?.toInt(),
          movieEquipmentIds: (json['movieEquipmentIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
        );

Map<String, dynamic> _$AssignDepartmentToMovieEquipmentsModelToJson(
        AssignDepartmentToMovieEquipmentsModel instance) =>
    <String, dynamic>{
      'departmentId': instance.departmentId,
      'movieEquipmentIds': instance.movieEquipmentIds,
    };

AssignDepartmentToMoviePropertiesModel
    _$AssignDepartmentToMoviePropertiesModelFromJson(
            Map<String, dynamic> json) =>
        AssignDepartmentToMoviePropertiesModel(
          departmentId: (json['departmentId'] as num?)?.toInt(),
          moviePropertyIds: (json['moviePropertyIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
        );

Map<String, dynamic> _$AssignDepartmentToMoviePropertiesModelToJson(
        AssignDepartmentToMoviePropertiesModel instance) =>
    <String, dynamic>{
      'departmentId': instance.departmentId,
      'moviePropertyIds': instance.moviePropertyIds,
    };

AssignDepartmentToMovieTechniciansModel
    _$AssignDepartmentToMovieTechniciansModelFromJson(
            Map<String, dynamic> json) =>
        AssignDepartmentToMovieTechniciansModel(
          departmentId: (json['departmentId'] as num?)?.toInt(),
          movieTechnicianIds: (json['movieTechnicianIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
        );

Map<String, dynamic> _$AssignDepartmentToMovieTechniciansModelToJson(
        AssignDepartmentToMovieTechniciansModel instance) =>
    <String, dynamic>{
      'departmentId': instance.departmentId,
      'movieTechnicianIds': instance.movieTechnicianIds,
    };

AssignDepartmentToMovieVendorsModel
    _$AssignDepartmentToMovieVendorsModelFromJson(Map<String, dynamic> json) =>
        AssignDepartmentToMovieVendorsModel(
          departmentId: (json['departmentId'] as num?)?.toInt(),
          movieVendorIds: (json['movieVendorIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
        );

Map<String, dynamic> _$AssignDepartmentToMovieVendorsModelToJson(
        AssignDepartmentToMovieVendorsModel instance) =>
    <String, dynamic>{
      'departmentId': instance.departmentId,
      'movieVendorIds': instance.movieVendorIds,
    };

AssignUserToMovieCommitmentTasksModel
    _$AssignUserToMovieCommitmentTasksModelFromJson(
            Map<String, dynamic> json) =>
        AssignUserToMovieCommitmentTasksModel(
          movieUserId: (json['movieUserId'] as num?)?.toInt(),
          movieCommitmentTaskIds:
              (json['movieCommitmentTaskIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$AssignUserToMovieCommitmentTasksModelToJson(
        AssignUserToMovieCommitmentTasksModel instance) =>
    <String, dynamic>{
      'movieUserId': instance.movieUserId,
      'movieCommitmentTaskIds': instance.movieCommitmentTaskIds,
    };

AuditOperationCreateModel _$AuditOperationCreateModelFromJson(
        Map<String, dynamic> json) =>
    AuditOperationCreateModel(
      auditDateTime: json['auditDateTime'] == null
          ? null
          : DateTime.parse(json['auditDateTime'] as String),
      predefinedAuditOperationTypeId:
          (json['predefinedAuditOperationTypeId'] as num?)?.toInt(),
      changeDiff: json['changeDiff'] as String?,
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      budgetCategoryId: (json['budgetCategoryId'] as num?)?.toInt(),
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      predefinedResourceTypeId:
          (json['predefinedResourceTypeId'] as num?)?.toInt(),
      resourceId: (json['resourceId'] as num?)?.toInt(),
      ipAddress: json['ipAddress'] as String?,
      browserName: json['browserName'] as String?,
      operatingSystemName: json['operatingSystemName'] as String?,
      deviceName: json['deviceName'] as String?,
      description: json['description'] as String?,
    );

Map<String, dynamic> _$AuditOperationCreateModelToJson(
        AuditOperationCreateModel instance) =>
    <String, dynamic>{
      'auditDateTime': instance.auditDateTime?.toIso8601String(),
      'predefinedAuditOperationTypeId': instance.predefinedAuditOperationTypeId,
      'changeDiff': instance.changeDiff,
      'userId': instance.userId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'vendorId': instance.vendorId,
      'movieSceneId': instance.movieSceneId,
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'budgetCategoryId': instance.budgetCategoryId,
      'budgetDivisionId': instance.budgetDivisionId,
      'predefinedResourceTypeId': instance.predefinedResourceTypeId,
      'resourceId': instance.resourceId,
      'ipAddress': instance.ipAddress,
      'browserName': instance.browserName,
      'operatingSystemName': instance.operatingSystemName,
      'deviceName': instance.deviceName,
      'description': instance.description,
    };

AuditOperationDetailCreateModel _$AuditOperationDetailCreateModelFromJson(
        Map<String, dynamic> json) =>
    AuditOperationDetailCreateModel(
      auditOperationId: (json['auditOperationId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      differenceJson: json['differenceJson'] as String?,
    );

Map<String, dynamic> _$AuditOperationDetailCreateModelToJson(
        AuditOperationDetailCreateModel instance) =>
    <String, dynamic>{
      'auditOperationId': instance.auditOperationId,
      'companyId': instance.companyId,
      'differenceJson': instance.differenceJson,
    };

AuditOperationDetailModel _$AuditOperationDetailModelFromJson(
        Map<String, dynamic> json) =>
    AuditOperationDetailModel(
      auditOperationDetailId: (json['auditOperationDetailId'] as num?)?.toInt(),
      auditOperationId: (json['auditOperationId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      differenceJson: json['differenceJson'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$AuditOperationDetailModelToJson(
        AuditOperationDetailModel instance) =>
    <String, dynamic>{
      'auditOperationDetailId': instance.auditOperationDetailId,
      'auditOperationId': instance.auditOperationId,
      'companyId': instance.companyId,
      'differenceJson': instance.differenceJson,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

AuditOperationDetailModelReturnListModel
    _$AuditOperationDetailModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        AuditOperationDetailModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => AuditOperationDetailModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$AuditOperationDetailModelReturnListModelToJson(
        AuditOperationDetailModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

AuditOperationDetailModelReturnModel
    _$AuditOperationDetailModelReturnModelFromJson(Map<String, dynamic> json) =>
        AuditOperationDetailModelReturnModel(
          model: json['model'] == null
              ? null
              : AuditOperationDetailModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$AuditOperationDetailModelReturnModelToJson(
        AuditOperationDetailModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

AuditOperationDetailUpdateModel _$AuditOperationDetailUpdateModelFromJson(
        Map<String, dynamic> json) =>
    AuditOperationDetailUpdateModel(
      auditOperationDetailId: (json['auditOperationDetailId'] as num?)?.toInt(),
      auditOperationId: (json['auditOperationId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      differenceJson: json['differenceJson'] as String?,
    );

Map<String, dynamic> _$AuditOperationDetailUpdateModelToJson(
        AuditOperationDetailUpdateModel instance) =>
    <String, dynamic>{
      'auditOperationDetailId': instance.auditOperationDetailId,
      'auditOperationId': instance.auditOperationId,
      'companyId': instance.companyId,
      'differenceJson': instance.differenceJson,
    };

AuditOperationModel _$AuditOperationModelFromJson(Map<String, dynamic> json) =>
    AuditOperationModel(
      auditOperationId: (json['auditOperationId'] as num?)?.toInt(),
      auditDateTime: json['auditDateTime'] == null
          ? null
          : DateTime.parse(json['auditDateTime'] as String),
      predefinedAuditOperationTypeId:
          (json['predefinedAuditOperationTypeId'] as num?)?.toInt(),
      changeDiff: json['changeDiff'] as String?,
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      budgetCategoryId: (json['budgetCategoryId'] as num?)?.toInt(),
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      predefinedResourceTypeId:
          (json['predefinedResourceTypeId'] as num?)?.toInt(),
      resourceId: (json['resourceId'] as num?)?.toInt(),
      ipAddress: json['ipAddress'] as String?,
      browserName: json['browserName'] as String?,
      operatingSystemName: json['operatingSystemName'] as String?,
      deviceName: json['deviceName'] as String?,
      description: json['description'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedAuditOperationTypeName:
          json['predefinedAuditOperationTypeName'] as String?,
      userName: json['userName'] as String?,
      firstName: json['firstName'] as String?,
      lastName: json['lastName'] as String?,
      companyName: json['companyName'] as String?,
      predefinedResourceTypeName: json['predefinedResourceTypeName'] as String?,
      resourceName: json['resourceName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$AuditOperationModelToJson(
        AuditOperationModel instance) =>
    <String, dynamic>{
      'auditOperationId': instance.auditOperationId,
      'auditDateTime': instance.auditDateTime?.toIso8601String(),
      'predefinedAuditOperationTypeId': instance.predefinedAuditOperationTypeId,
      'changeDiff': instance.changeDiff,
      'userId': instance.userId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'vendorId': instance.vendorId,
      'movieSceneId': instance.movieSceneId,
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'budgetCategoryId': instance.budgetCategoryId,
      'budgetDivisionId': instance.budgetDivisionId,
      'predefinedResourceTypeId': instance.predefinedResourceTypeId,
      'resourceId': instance.resourceId,
      'ipAddress': instance.ipAddress,
      'browserName': instance.browserName,
      'operatingSystemName': instance.operatingSystemName,
      'deviceName': instance.deviceName,
      'description': instance.description,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedAuditOperationTypeName':
          instance.predefinedAuditOperationTypeName,
      'userName': instance.userName,
      'firstName': instance.firstName,
      'lastName': instance.lastName,
      'companyName': instance.companyName,
      'predefinedResourceTypeName': instance.predefinedResourceTypeName,
      'resourceName': instance.resourceName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

AuditOperationModelReturnListModel _$AuditOperationModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    AuditOperationModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  AuditOperationModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$AuditOperationModelReturnListModelToJson(
        AuditOperationModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

AuditOperationModelReturnModel _$AuditOperationModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    AuditOperationModelReturnModel(
      model: json['model'] == null
          ? null
          : AuditOperationModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$AuditOperationModelReturnModelToJson(
        AuditOperationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

AuditOperationUpdateModel _$AuditOperationUpdateModelFromJson(
        Map<String, dynamic> json) =>
    AuditOperationUpdateModel(
      auditOperationId: (json['auditOperationId'] as num?)?.toInt(),
      auditDateTime: json['auditDateTime'] == null
          ? null
          : DateTime.parse(json['auditDateTime'] as String),
      predefinedAuditOperationTypeId:
          (json['predefinedAuditOperationTypeId'] as num?)?.toInt(),
      changeDiff: json['changeDiff'] as String?,
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      budgetCategoryId: (json['budgetCategoryId'] as num?)?.toInt(),
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      predefinedResourceTypeId:
          (json['predefinedResourceTypeId'] as num?)?.toInt(),
      resourceId: (json['resourceId'] as num?)?.toInt(),
      ipAddress: json['ipAddress'] as String?,
      browserName: json['browserName'] as String?,
      operatingSystemName: json['operatingSystemName'] as String?,
      deviceName: json['deviceName'] as String?,
      description: json['description'] as String?,
    );

Map<String, dynamic> _$AuditOperationUpdateModelToJson(
        AuditOperationUpdateModel instance) =>
    <String, dynamic>{
      'auditOperationId': instance.auditOperationId,
      'auditDateTime': instance.auditDateTime?.toIso8601String(),
      'predefinedAuditOperationTypeId': instance.predefinedAuditOperationTypeId,
      'changeDiff': instance.changeDiff,
      'userId': instance.userId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'vendorId': instance.vendorId,
      'movieSceneId': instance.movieSceneId,
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'budgetCategoryId': instance.budgetCategoryId,
      'budgetDivisionId': instance.budgetDivisionId,
      'predefinedResourceTypeId': instance.predefinedResourceTypeId,
      'resourceId': instance.resourceId,
      'ipAddress': instance.ipAddress,
      'browserName': instance.browserName,
      'operatingSystemName': instance.operatingSystemName,
      'deviceName': instance.deviceName,
      'description': instance.description,
    };

BaseRateModel _$BaseRateModelFromJson(Map<String, dynamic> json) =>
    BaseRateModel(
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BaseRateModelToJson(BaseRateModel instance) =>
    <String, dynamic>{
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

BaseSearchCriteria _$BaseSearchCriteriaFromJson(Map<String, dynamic> json) =>
    BaseSearchCriteria(
      selectedId: (json['selectedId'] as num?)?.toInt(),
      page: (json['page'] as num?)?.toInt(),
      pageSize: (json['pageSize'] as num?)?.toInt(),
      keyword: json['keyword'] as String?,
      sortBy: json['sortBy'] as String?,
      sortAscending: json['sortAscending'] as bool?,
    );

Map<String, dynamic> _$BaseSearchCriteriaToJson(BaseSearchCriteria instance) =>
    <String, dynamic>{
      'selectedId': instance.selectedId,
      'page': instance.page,
      'pageSize': instance.pageSize,
      'keyword': instance.keyword,
      'sortBy': instance.sortBy,
      'sortAscending': instance.sortAscending,
    };

BooleanReturnModel _$BooleanReturnModelFromJson(Map<String, dynamic> json) =>
    BooleanReturnModel(
      model: json['model'] as bool?,
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BooleanReturnModelToJson(BooleanReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

BudgetCategoryCreateModel _$BudgetCategoryCreateModelFromJson(
        Map<String, dynamic> json) =>
    BudgetCategoryCreateModel(
      budgetCategoryName: json['budgetCategoryName'] as String?,
      accountNumber: json['accountNumber'] as String?,
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      parentBudgetCategoryId: (json['parentBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetCategoryTypeId:
          (json['predefinedBudgetCategoryTypeId'] as num?)?.toInt(),
      canDirectlySetBudgetValue: json['canDirectlySetBudgetValue'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetCategoryCreateModelToJson(
        BudgetCategoryCreateModel instance) =>
    <String, dynamic>{
      'budgetCategoryName': instance.budgetCategoryName,
      'accountNumber': instance.accountNumber,
      'budgetDivisionId': instance.budgetDivisionId,
      'parentBudgetCategoryId': instance.parentBudgetCategoryId,
      'predefinedBudgetCategoryTypeId': instance.predefinedBudgetCategoryTypeId,
      'canDirectlySetBudgetValue': instance.canDirectlySetBudgetValue,
      'position': instance.position,
      'companyId': instance.companyId,
    };

BudgetCategoryCreateWithMovieModel _$BudgetCategoryCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    BudgetCategoryCreateWithMovieModel(
      budgetCategoryName: json['budgetCategoryName'] as String?,
      accountNumber: json['accountNumber'] as String?,
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      parentBudgetCategoryId: (json['parentBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetCategoryTypeId:
          (json['predefinedBudgetCategoryTypeId'] as num?)?.toInt(),
      canDirectlySetBudgetValue: json['canDirectlySetBudgetValue'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetCategoryCreateWithMovieModelToJson(
        BudgetCategoryCreateWithMovieModel instance) =>
    <String, dynamic>{
      'budgetCategoryName': instance.budgetCategoryName,
      'accountNumber': instance.accountNumber,
      'budgetDivisionId': instance.budgetDivisionId,
      'parentBudgetCategoryId': instance.parentBudgetCategoryId,
      'predefinedBudgetCategoryTypeId': instance.predefinedBudgetCategoryTypeId,
      'canDirectlySetBudgetValue': instance.canDirectlySetBudgetValue,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

BudgetCategoryModel _$BudgetCategoryModelFromJson(Map<String, dynamic> json) =>
    BudgetCategoryModel(
      budgetCategoryId: (json['budgetCategoryId'] as num?)?.toInt(),
      budgetCategoryName: json['budgetCategoryName'] as String?,
      accountNumber: json['accountNumber'] as String?,
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      parentBudgetCategoryId: (json['parentBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetCategoryTypeId:
          (json['predefinedBudgetCategoryTypeId'] as num?)?.toInt(),
      canDirectlySetBudgetValue: json['canDirectlySetBudgetValue'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      budgetDivisionName: json['budgetDivisionName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      predefinedBudgetDivisionTypeName:
          json['predefinedBudgetDivisionTypeName'] as String?,
      predefinedBudgetCategoryTypeName:
          json['predefinedBudgetCategoryTypeName'] as String?,
      companyName: json['companyName'] as String?,
      budgetDivisionCode: json['budgetDivisionCode'] as String?,
      parentBudgetCategoryName: json['parentBudgetCategoryName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      childBudgetCategories: (json['childBudgetCategories'] as List<dynamic>?)
              ?.map((e) =>
                  BudgetCategoryModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$BudgetCategoryModelToJson(
        BudgetCategoryModel instance) =>
    <String, dynamic>{
      'budgetCategoryId': instance.budgetCategoryId,
      'budgetCategoryName': instance.budgetCategoryName,
      'accountNumber': instance.accountNumber,
      'budgetDivisionId': instance.budgetDivisionId,
      'parentBudgetCategoryId': instance.parentBudgetCategoryId,
      'predefinedBudgetCategoryTypeId': instance.predefinedBudgetCategoryTypeId,
      'canDirectlySetBudgetValue': instance.canDirectlySetBudgetValue,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'budgetDivisionName': instance.budgetDivisionName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'predefinedBudgetDivisionTypeName':
          instance.predefinedBudgetDivisionTypeName,
      'predefinedBudgetCategoryTypeName':
          instance.predefinedBudgetCategoryTypeName,
      'companyName': instance.companyName,
      'budgetDivisionCode': instance.budgetDivisionCode,
      'parentBudgetCategoryName': instance.parentBudgetCategoryName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'childBudgetCategories':
          instance.childBudgetCategories?.map((e) => e.toJson()).toList(),
    };

BudgetCategoryModelReturnListModel _$BudgetCategoryModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    BudgetCategoryModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  BudgetCategoryModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetCategoryModelReturnListModelToJson(
        BudgetCategoryModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

BudgetCategoryModelReturnModel _$BudgetCategoryModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    BudgetCategoryModelReturnModel(
      model: json['model'] == null
          ? null
          : BudgetCategoryModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetCategoryModelReturnModelToJson(
        BudgetCategoryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

BudgetCategoryUpdateModel _$BudgetCategoryUpdateModelFromJson(
        Map<String, dynamic> json) =>
    BudgetCategoryUpdateModel(
      budgetCategoryId: (json['budgetCategoryId'] as num?)?.toInt(),
      budgetCategoryName: json['budgetCategoryName'] as String?,
      accountNumber: json['accountNumber'] as String?,
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      parentBudgetCategoryId: (json['parentBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetCategoryTypeId:
          (json['predefinedBudgetCategoryTypeId'] as num?)?.toInt(),
      canDirectlySetBudgetValue: json['canDirectlySetBudgetValue'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetCategoryUpdateModelToJson(
        BudgetCategoryUpdateModel instance) =>
    <String, dynamic>{
      'budgetCategoryId': instance.budgetCategoryId,
      'budgetCategoryName': instance.budgetCategoryName,
      'accountNumber': instance.accountNumber,
      'budgetDivisionId': instance.budgetDivisionId,
      'parentBudgetCategoryId': instance.parentBudgetCategoryId,
      'predefinedBudgetCategoryTypeId': instance.predefinedBudgetCategoryTypeId,
      'canDirectlySetBudgetValue': instance.canDirectlySetBudgetValue,
      'position': instance.position,
      'companyId': instance.companyId,
    };

BudgetDivisionCreateModel _$BudgetDivisionCreateModelFromJson(
        Map<String, dynamic> json) =>
    BudgetDivisionCreateModel(
      budgetDivisionName: json['budgetDivisionName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetDivisionCreateModelToJson(
        BudgetDivisionCreateModel instance) =>
    <String, dynamic>{
      'budgetDivisionName': instance.budgetDivisionName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

BudgetDivisionCreateWithMovieModel _$BudgetDivisionCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    BudgetDivisionCreateWithMovieModel(
      budgetDivisionName: json['budgetDivisionName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetDivisionCreateWithMovieModelToJson(
        BudgetDivisionCreateWithMovieModel instance) =>
    <String, dynamic>{
      'budgetDivisionName': instance.budgetDivisionName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

BudgetDivisionModel _$BudgetDivisionModelFromJson(Map<String, dynamic> json) =>
    BudgetDivisionModel(
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      budgetDivisionName: json['budgetDivisionName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedBudgetDivisionTypeName:
          json['predefinedBudgetDivisionTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingBudgetCategories:
          (json['existingBudgetCategories'] as List<dynamic>?)
                  ?.map((e) =>
                      BudgetCategoryModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$BudgetDivisionModelToJson(
        BudgetDivisionModel instance) =>
    <String, dynamic>{
      'budgetDivisionId': instance.budgetDivisionId,
      'budgetDivisionName': instance.budgetDivisionName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedBudgetDivisionTypeName':
          instance.predefinedBudgetDivisionTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingBudgetCategories':
          instance.existingBudgetCategories?.map((e) => e.toJson()).toList(),
    };

BudgetDivisionModelReturnListModel _$BudgetDivisionModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    BudgetDivisionModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  BudgetDivisionModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetDivisionModelReturnListModelToJson(
        BudgetDivisionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

BudgetDivisionModelReturnModel _$BudgetDivisionModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    BudgetDivisionModelReturnModel(
      model: json['model'] == null
          ? null
          : BudgetDivisionModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetDivisionModelReturnModelToJson(
        BudgetDivisionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

BudgetDivisionUpdateModel _$BudgetDivisionUpdateModelFromJson(
        Map<String, dynamic> json) =>
    BudgetDivisionUpdateModel(
      budgetDivisionId: (json['budgetDivisionId'] as num?)?.toInt(),
      budgetDivisionName: json['budgetDivisionName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$BudgetDivisionUpdateModelToJson(
        BudgetDivisionUpdateModel instance) =>
    <String, dynamic>{
      'budgetDivisionId': instance.budgetDivisionId,
      'budgetDivisionName': instance.budgetDivisionName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

ChangeForgotPasswordModel _$ChangeForgotPasswordModelFromJson(
        Map<String, dynamic> json) =>
    ChangeForgotPasswordModel(
      currentPassword: json['currentPassword'] as String?,
      password: json['password'] as String?,
      retypedPassword: json['retypedPassword'] as String?,
      userLogin: json['userLogin'] as String?,
      sessionId: json['sessionId'] as String?,
    );

Map<String, dynamic> _$ChangeForgotPasswordModelToJson(
        ChangeForgotPasswordModel instance) =>
    <String, dynamic>{
      'currentPassword': instance.currentPassword,
      'password': instance.password,
      'retypedPassword': instance.retypedPassword,
      'userLogin': instance.userLogin,
      'sessionId': instance.sessionId,
    };

ChangePasswordModel _$ChangePasswordModelFromJson(Map<String, dynamic> json) =>
    ChangePasswordModel(
      currentPassword: json['currentPassword'] as String?,
      password: json['password'] as String?,
      retypedPassword: json['retypedPassword'] as String?,
    );

Map<String, dynamic> _$ChangePasswordModelToJson(
        ChangePasswordModel instance) =>
    <String, dynamic>{
      'currentPassword': instance.currentPassword,
      'password': instance.password,
      'retypedPassword': instance.retypedPassword,
    };

ChatCreateModel _$ChatCreateModelFromJson(Map<String, dynamic> json) =>
    ChatCreateModel(
      chatName: json['chatName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newChatUsers: (json['newChatUsers'] as List<dynamic>?)
              ?.map((e) =>
                  ChatUserCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingChatUsers: (json['existingChatUsers'] as List<dynamic>?)
              ?.map((e) =>
                  ChatUserUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ChatCreateModelToJson(ChatCreateModel instance) =>
    <String, dynamic>{
      'chatName': instance.chatName,
      'companyId': instance.companyId,
      'newChatUsers': instance.newChatUsers?.map((e) => e.toJson()).toList(),
      'existingChatUsers':
          instance.existingChatUsers?.map((e) => e.toJson()).toList(),
    };

ChatMessageCreateModel _$ChatMessageCreateModelFromJson(
        Map<String, dynamic> json) =>
    ChatMessageCreateModel(
      chatId: (json['chatId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      chatMessageText: json['chatMessageText'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      replyToChatMessageId: (json['replyToChatMessageId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatMessageCreateModelToJson(
        ChatMessageCreateModel instance) =>
    <String, dynamic>{
      'chatId': instance.chatId,
      'userId': instance.userId,
      'chatMessageText': instance.chatMessageText,
      'companyId': instance.companyId,
      'replyToChatMessageId': instance.replyToChatMessageId,
    };

ChatMessageModel _$ChatMessageModelFromJson(Map<String, dynamic> json) =>
    ChatMessageModel(
      chatMessageId: (json['chatMessageId'] as num?)?.toInt(),
      chatId: (json['chatId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      chatMessageText: json['chatMessageText'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      replyToChatMessageId: (json['replyToChatMessageId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      userName: json['userName'] as String?,
      userFirstName: json['userFirstName'] as String?,
      userLastName: json['userLastName'] as String?,
      companyName: json['companyName'] as String?,
      replyToChatMessageText: json['replyToChatMessageText'] as String?,
      replyToChatMessageUserName: json['replyToChatMessageUserName'] as String?,
      replyToChatMessageUserFirstName:
          json['replyToChatMessageUserFirstName'] as String?,
      replyToChatMessageUserLastName:
          json['replyToChatMessageUserLastName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ChatMessageModelToJson(ChatMessageModel instance) =>
    <String, dynamic>{
      'chatMessageId': instance.chatMessageId,
      'chatId': instance.chatId,
      'userId': instance.userId,
      'chatMessageText': instance.chatMessageText,
      'companyId': instance.companyId,
      'replyToChatMessageId': instance.replyToChatMessageId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'userName': instance.userName,
      'userFirstName': instance.userFirstName,
      'userLastName': instance.userLastName,
      'companyName': instance.companyName,
      'replyToChatMessageText': instance.replyToChatMessageText,
      'replyToChatMessageUserName': instance.replyToChatMessageUserName,
      'replyToChatMessageUserFirstName':
          instance.replyToChatMessageUserFirstName,
      'replyToChatMessageUserLastName': instance.replyToChatMessageUserLastName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ChatMessageModelReturnListModel _$ChatMessageModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ChatMessageModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ChatMessageModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatMessageModelReturnListModelToJson(
        ChatMessageModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ChatMessageModelReturnModel _$ChatMessageModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ChatMessageModelReturnModel(
      model: json['model'] == null
          ? null
          : ChatMessageModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatMessageModelReturnModelToJson(
        ChatMessageModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ChatMessageStatusCreateModel _$ChatMessageStatusCreateModelFromJson(
        Map<String, dynamic> json) =>
    ChatMessageStatusCreateModel(
      chatMessageId: (json['chatMessageId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      chatMessageViewedDate: json['chatMessageViewedDate'] == null
          ? null
          : DateTime.parse(json['chatMessageViewedDate'] as String),
      chatMessageSentDate: json['chatMessageSentDate'] == null
          ? null
          : DateTime.parse(json['chatMessageSentDate'] as String),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatMessageStatusCreateModelToJson(
        ChatMessageStatusCreateModel instance) =>
    <String, dynamic>{
      'chatMessageId': instance.chatMessageId,
      'userId': instance.userId,
      'chatMessageViewedDate':
          instance.chatMessageViewedDate?.toIso8601String(),
      'chatMessageSentDate': instance.chatMessageSentDate?.toIso8601String(),
      'companyId': instance.companyId,
    };

ChatMessageStatusModel _$ChatMessageStatusModelFromJson(
        Map<String, dynamic> json) =>
    ChatMessageStatusModel(
      chatMessageStatusId: (json['chatMessageStatusId'] as num?)?.toInt(),
      chatMessageId: (json['chatMessageId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      chatMessageViewedDate: json['chatMessageViewedDate'] == null
          ? null
          : DateTime.parse(json['chatMessageViewedDate'] as String),
      chatMessageSentDate: json['chatMessageSentDate'] == null
          ? null
          : DateTime.parse(json['chatMessageSentDate'] as String),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      userName: json['userName'] as String?,
      userFirstName: json['userFirstName'] as String?,
      userLastName: json['userLastName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ChatMessageStatusModelToJson(
        ChatMessageStatusModel instance) =>
    <String, dynamic>{
      'chatMessageStatusId': instance.chatMessageStatusId,
      'chatMessageId': instance.chatMessageId,
      'userId': instance.userId,
      'chatMessageViewedDate':
          instance.chatMessageViewedDate?.toIso8601String(),
      'chatMessageSentDate': instance.chatMessageSentDate?.toIso8601String(),
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'userName': instance.userName,
      'userFirstName': instance.userFirstName,
      'userLastName': instance.userLastName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ChatMessageStatusModelReturnListModel
    _$ChatMessageStatusModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        ChatMessageStatusModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => ChatMessageStatusModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ChatMessageStatusModelReturnListModelToJson(
        ChatMessageStatusModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ChatMessageStatusModelReturnModel _$ChatMessageStatusModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ChatMessageStatusModelReturnModel(
      model: json['model'] == null
          ? null
          : ChatMessageStatusModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatMessageStatusModelReturnModelToJson(
        ChatMessageStatusModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ChatMessageStatusUpdateModel _$ChatMessageStatusUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ChatMessageStatusUpdateModel(
      chatMessageStatusId: (json['chatMessageStatusId'] as num?)?.toInt(),
      chatMessageId: (json['chatMessageId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      chatMessageViewedDate: json['chatMessageViewedDate'] == null
          ? null
          : DateTime.parse(json['chatMessageViewedDate'] as String),
      chatMessageSentDate: json['chatMessageSentDate'] == null
          ? null
          : DateTime.parse(json['chatMessageSentDate'] as String),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatMessageStatusUpdateModelToJson(
        ChatMessageStatusUpdateModel instance) =>
    <String, dynamic>{
      'chatMessageStatusId': instance.chatMessageStatusId,
      'chatMessageId': instance.chatMessageId,
      'userId': instance.userId,
      'chatMessageViewedDate':
          instance.chatMessageViewedDate?.toIso8601String(),
      'chatMessageSentDate': instance.chatMessageSentDate?.toIso8601String(),
      'companyId': instance.companyId,
    };

ChatMessageUpdateModel _$ChatMessageUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ChatMessageUpdateModel(
      chatMessageId: (json['chatMessageId'] as num?)?.toInt(),
      chatId: (json['chatId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      chatMessageText: json['chatMessageText'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      replyToChatMessageId: (json['replyToChatMessageId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatMessageUpdateModelToJson(
        ChatMessageUpdateModel instance) =>
    <String, dynamic>{
      'chatMessageId': instance.chatMessageId,
      'chatId': instance.chatId,
      'userId': instance.userId,
      'chatMessageText': instance.chatMessageText,
      'companyId': instance.companyId,
      'replyToChatMessageId': instance.replyToChatMessageId,
    };

ChatModel _$ChatModelFromJson(Map<String, dynamic> json) => ChatModel(
      chatId: (json['chatId'] as num?)?.toInt(),
      chatName: json['chatName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      isGroup: json['isGroup'] as bool?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ChatModelToJson(ChatModel instance) => <String, dynamic>{
      'chatId': instance.chatId,
      'chatName': instance.chatName,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'isGroup': instance.isGroup,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ChatModelReturnListModel _$ChatModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ChatModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ChatModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatModelReturnListModelToJson(
        ChatModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ChatModelReturnModel _$ChatModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ChatModelReturnModel(
      model: json['model'] == null
          ? null
          : ChatModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatModelReturnModelToJson(
        ChatModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ChatUpdateModel _$ChatUpdateModelFromJson(Map<String, dynamic> json) =>
    ChatUpdateModel(
      chatId: (json['chatId'] as num?)?.toInt(),
      chatName: json['chatName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newChatUsers: (json['newChatUsers'] as List<dynamic>?)
              ?.map((e) =>
                  ChatUserCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingChatUsers: (json['existingChatUsers'] as List<dynamic>?)
              ?.map((e) =>
                  ChatUserUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ChatUpdateModelToJson(ChatUpdateModel instance) =>
    <String, dynamic>{
      'chatId': instance.chatId,
      'chatName': instance.chatName,
      'companyId': instance.companyId,
      'newChatUsers': instance.newChatUsers?.map((e) => e.toJson()).toList(),
      'existingChatUsers':
          instance.existingChatUsers?.map((e) => e.toJson()).toList(),
    };

ChatUserCreateModel _$ChatUserCreateModelFromJson(Map<String, dynamic> json) =>
    ChatUserCreateModel(
      chatId: (json['chatId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatUserCreateModelToJson(
        ChatUserCreateModel instance) =>
    <String, dynamic>{
      'chatId': instance.chatId,
      'userId': instance.userId,
      'companyId': instance.companyId,
    };

ChatUserModel _$ChatUserModelFromJson(Map<String, dynamic> json) =>
    ChatUserModel(
      chatUserId: (json['chatUserId'] as num?)?.toInt(),
      chatId: (json['chatId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      userName: json['userName'] as String?,
      companyName: json['companyName'] as String?,
      predefinedUserTypeId: (json['predefinedUserTypeId'] as num?)?.toInt(),
      predefinedUserTypeName: json['predefinedUserTypeName'] as String?,
      userFirstName: json['userFirstName'] as String?,
      userLastName: json['userLastName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ChatUserModelToJson(ChatUserModel instance) =>
    <String, dynamic>{
      'chatUserId': instance.chatUserId,
      'chatId': instance.chatId,
      'userId': instance.userId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'userName': instance.userName,
      'companyName': instance.companyName,
      'predefinedUserTypeId': instance.predefinedUserTypeId,
      'predefinedUserTypeName': instance.predefinedUserTypeName,
      'userFirstName': instance.userFirstName,
      'userLastName': instance.userLastName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ChatUserModelReturnListModel _$ChatUserModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ChatUserModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ChatUserModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatUserModelReturnListModelToJson(
        ChatUserModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ChatUserModelReturnModel _$ChatUserModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ChatUserModelReturnModel(
      model: json['model'] == null
          ? null
          : ChatUserModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatUserModelReturnModelToJson(
        ChatUserModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ChatUserUpdateModel _$ChatUserUpdateModelFromJson(Map<String, dynamic> json) =>
    ChatUserUpdateModel(
      chatUserId: (json['chatUserId'] as num?)?.toInt(),
      chatId: (json['chatId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ChatUserUpdateModelToJson(
        ChatUserUpdateModel instance) =>
    <String, dynamic>{
      'chatUserId': instance.chatUserId,
      'chatId': instance.chatId,
      'userId': instance.userId,
      'companyId': instance.companyId,
    };

CheckInCheckOutMovieShootDayResourceModel
    _$CheckInCheckOutMovieShootDayResourceModelFromJson(
            Map<String, dynamic> json) =>
        CheckInCheckOutMovieShootDayResourceModel(
          movieShootDayResourceId:
              (json['movieShootDayResourceId'] as num?)?.toInt(),
          predefinedMovieShootDayResourceTypeId:
              (json['predefinedMovieShootDayResourceTypeId'] as num?)?.toInt(),
          inTime: (json['inTime'] as num?)?.toInt(),
          outTime: (json['outTime'] as num?)?.toInt(),
          latitude: (json['latitude'] as num?)?.toDouble(),
          longitude: (json['longitude'] as num?)?.toDouble(),
        );

Map<String, dynamic> _$CheckInCheckOutMovieShootDayResourceModelToJson(
        CheckInCheckOutMovieShootDayResourceModel instance) =>
    <String, dynamic>{
      'movieShootDayResourceId': instance.movieShootDayResourceId,
      'predefinedMovieShootDayResourceTypeId':
          instance.predefinedMovieShootDayResourceTypeId,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
    };

ClientLogCreateModel _$ClientLogCreateModelFromJson(
        Map<String, dynamic> json) =>
    ClientLogCreateModel(
      verbosity: (json['verbosity'] as num?)?.toInt(),
      logLevel: (json['logLevel'] as num?)?.toInt(),
      logDate: json['logDate'] == null
          ? null
          : DateTime.parse(json['logDate'] as String),
      appName: json['appName'] as String?,
      message: json['message'] as String?,
    );

Map<String, dynamic> _$ClientLogCreateModelToJson(
        ClientLogCreateModel instance) =>
    <String, dynamic>{
      'verbosity': instance.verbosity,
      'logLevel': instance.logLevel,
      'logDate': instance.logDate?.toIso8601String(),
      'appName': instance.appName,
      'message': instance.message,
    };

ClientLogModel _$ClientLogModelFromJson(Map<String, dynamic> json) =>
    ClientLogModel(
      clientLogId: (json['clientLogId'] as num?)?.toInt(),
      verbosity: (json['verbosity'] as num?)?.toInt(),
      logLevel: (json['logLevel'] as num?)?.toInt(),
      logDate: json['logDate'] == null
          ? null
          : DateTime.parse(json['logDate'] as String),
      appName: json['appName'] as String?,
      message: json['message'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ClientLogModelToJson(ClientLogModel instance) =>
    <String, dynamic>{
      'clientLogId': instance.clientLogId,
      'verbosity': instance.verbosity,
      'logLevel': instance.logLevel,
      'logDate': instance.logDate?.toIso8601String(),
      'appName': instance.appName,
      'message': instance.message,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ClientLogModelReturnListModel _$ClientLogModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ClientLogModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ClientLogModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ClientLogModelReturnListModelToJson(
        ClientLogModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ClientLogModelReturnModel _$ClientLogModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ClientLogModelReturnModel(
      model: json['model'] == null
          ? null
          : ClientLogModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ClientLogModelReturnModelToJson(
        ClientLogModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ClientLogUpdateModel _$ClientLogUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ClientLogUpdateModel(
      clientLogId: (json['clientLogId'] as num?)?.toInt(),
      verbosity: (json['verbosity'] as num?)?.toInt(),
      logLevel: (json['logLevel'] as num?)?.toInt(),
      logDate: json['logDate'] == null
          ? null
          : DateTime.parse(json['logDate'] as String),
      appName: json['appName'] as String?,
      message: json['message'] as String?,
    );

Map<String, dynamic> _$ClientLogUpdateModelToJson(
        ClientLogUpdateModel instance) =>
    <String, dynamic>{
      'clientLogId': instance.clientLogId,
      'verbosity': instance.verbosity,
      'logLevel': instance.logLevel,
      'logDate': instance.logDate?.toIso8601String(),
      'appName': instance.appName,
      'message': instance.message,
    };

ColorTypeCreateModel _$ColorTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    ColorTypeCreateModel(
      colorTypeName: json['colorTypeName'] as String?,
      redColorCode: (json['redColorCode'] as num?)?.toInt(),
      greenColorCode: (json['greenColorCode'] as num?)?.toInt(),
      blueColorCode: (json['blueColorCode'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ColorTypeCreateModelToJson(
        ColorTypeCreateModel instance) =>
    <String, dynamic>{
      'colorTypeName': instance.colorTypeName,
      'redColorCode': instance.redColorCode,
      'greenColorCode': instance.greenColorCode,
      'blueColorCode': instance.blueColorCode,
      'companyId': instance.companyId,
    };

ColorTypeCreateWithMovieModel _$ColorTypeCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    ColorTypeCreateWithMovieModel(
      colorTypeName: json['colorTypeName'] as String?,
      redColorCode: (json['redColorCode'] as num?)?.toInt(),
      greenColorCode: (json['greenColorCode'] as num?)?.toInt(),
      blueColorCode: (json['blueColorCode'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ColorTypeCreateWithMovieModelToJson(
        ColorTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'colorTypeName': instance.colorTypeName,
      'redColorCode': instance.redColorCode,
      'greenColorCode': instance.greenColorCode,
      'blueColorCode': instance.blueColorCode,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

ColorTypeModel _$ColorTypeModelFromJson(Map<String, dynamic> json) =>
    ColorTypeModel(
      colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
      colorTypeName: json['colorTypeName'] as String?,
      redColorCode: (json['redColorCode'] as num?)?.toInt(),
      greenColorCode: (json['greenColorCode'] as num?)?.toInt(),
      blueColorCode: (json['blueColorCode'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ColorTypeModelToJson(ColorTypeModel instance) =>
    <String, dynamic>{
      'colorTypeId': instance.colorTypeId,
      'colorTypeName': instance.colorTypeName,
      'redColorCode': instance.redColorCode,
      'greenColorCode': instance.greenColorCode,
      'blueColorCode': instance.blueColorCode,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ColorTypeModelReturnListModel _$ColorTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ColorTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ColorTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ColorTypeModelReturnListModelToJson(
        ColorTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ColorTypeModelReturnModel _$ColorTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ColorTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : ColorTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ColorTypeModelReturnModelToJson(
        ColorTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ColorTypeUpdateModel _$ColorTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ColorTypeUpdateModel(
      colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
      colorTypeName: json['colorTypeName'] as String?,
      redColorCode: (json['redColorCode'] as num?)?.toInt(),
      greenColorCode: (json['greenColorCode'] as num?)?.toInt(),
      blueColorCode: (json['blueColorCode'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ColorTypeUpdateModelToJson(
        ColorTypeUpdateModel instance) =>
    <String, dynamic>{
      'colorTypeId': instance.colorTypeId,
      'colorTypeName': instance.colorTypeName,
      'redColorCode': instance.redColorCode,
      'greenColorCode': instance.greenColorCode,
      'blueColorCode': instance.blueColorCode,
      'companyId': instance.companyId,
    };

CommonConfigurationModel _$CommonConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    CommonConfigurationModel(
      privacyPolicyUrl: json['privacyPolicyUrl'] as String?,
      termsOfUseUrl: json['termsOfUseUrl'] as String?,
      helpUrl: json['helpUrl'] as String?,
      supportEmail: json['supportEmail'] as String?,
      copyrightInfo: json['copyrightInfo'] as String?,
      jwtSecretKey: json['jwtSecretKey'] as String?,
      useLocalNppesServer: json['useLocalNppesServer'] as bool?,
      localLogServerUrl: json['localLogServerUrl'] as String?,
      forceSSL: json['forceSSL'] as bool?,
      emailServer: json['emailServer'] as String?,
      emailServerPort: (json['emailServerPort'] as num?)?.toInt(),
      emailServerUserName: json['emailServerUserName'] as String?,
      emailServerPassword: json['emailServerPassword'] as String?,
      emailUseSSL: json['emailUseSSL'] as bool?,
      emailFromName: json['emailFromName'] as String?,
      emailFromEmail: json['emailFromEmail'] as String?,
      adminNameForEmail: json['adminNameForEmail'] as String?,
      adminEmailForEmail: json['adminEmailForEmail'] as String?,
      defaultCommonEmailDomain: json['defaultCommonEmailDomain'] as String?,
      maxZipFileSizeinMB: (json['maxZipFileSizeinMB'] as num?)?.toInt(),
      nativeTempFileLocation: json['nativeTempFileLocation'] as String?,
      zipFileDownloadFileStorageConnectionString:
          json['zipFileDownloadFileStorageConnectionString'] as String?,
      isDedicatedQueue: json['isDedicatedQueue'] as bool?,
      activeMQHost: json['activeMQHost'] as String?,
      activeMQUsername: json['activeMQUsername'] as String?,
      activeMQPassword: json['activeMQPassword'] as String?,
      apiServerUrl: json['apiServerUrl'] as String?,
      whatsAppGraphAPIServerUrl: json['whatsAppGraphAPIServerUrl'] as String?,
      webApplicationServerUrl: json['webApplicationServerUrl'] as String?,
    );

Map<String, dynamic> _$CommonConfigurationModelToJson(
        CommonConfigurationModel instance) =>
    <String, dynamic>{
      'privacyPolicyUrl': instance.privacyPolicyUrl,
      'termsOfUseUrl': instance.termsOfUseUrl,
      'helpUrl': instance.helpUrl,
      'supportEmail': instance.supportEmail,
      'copyrightInfo': instance.copyrightInfo,
      'jwtSecretKey': instance.jwtSecretKey,
      'useLocalNppesServer': instance.useLocalNppesServer,
      'localLogServerUrl': instance.localLogServerUrl,
      'forceSSL': instance.forceSSL,
      'emailServer': instance.emailServer,
      'emailServerPort': instance.emailServerPort,
      'emailServerUserName': instance.emailServerUserName,
      'emailServerPassword': instance.emailServerPassword,
      'emailUseSSL': instance.emailUseSSL,
      'emailFromName': instance.emailFromName,
      'emailFromEmail': instance.emailFromEmail,
      'adminNameForEmail': instance.adminNameForEmail,
      'adminEmailForEmail': instance.adminEmailForEmail,
      'defaultCommonEmailDomain': instance.defaultCommonEmailDomain,
      'maxZipFileSizeinMB': instance.maxZipFileSizeinMB,
      'nativeTempFileLocation': instance.nativeTempFileLocation,
      'zipFileDownloadFileStorageConnectionString':
          instance.zipFileDownloadFileStorageConnectionString,
      'isDedicatedQueue': instance.isDedicatedQueue,
      'activeMQHost': instance.activeMQHost,
      'activeMQUsername': instance.activeMQUsername,
      'activeMQPassword': instance.activeMQPassword,
      'apiServerUrl': instance.apiServerUrl,
      'whatsAppGraphAPIServerUrl': instance.whatsAppGraphAPIServerUrl,
      'webApplicationServerUrl': instance.webApplicationServerUrl,
    };

CommonConfigurationModelReturnModel
    _$CommonConfigurationModelReturnModelFromJson(Map<String, dynamic> json) =>
        CommonConfigurationModelReturnModel(
          model: json['model'] == null
              ? null
              : CommonConfigurationModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$CommonConfigurationModelReturnModelToJson(
        CommonConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

CompanyCreateModel _$CompanyCreateModelFromJson(Map<String, dynamic> json) =>
    CompanyCreateModel(
      companyCode: json['companyCode'] as String?,
      companyName: json['companyName'] as String?,
      subdomain: json['subdomain'] as String?,
      predefinedCompanyTypeId:
          (json['predefinedCompanyTypeId'] as num?)?.toInt(),
      addedDateTime: json['addedDateTime'] == null
          ? null
          : DateTime.parse(json['addedDateTime'] as String),
      email: json['email'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      website: json['website'] as String?,
      contactLastName: json['contactLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      workPhoneExt: json['workPhoneExt'] as String?,
      cellPhone: json['cellPhone'] as String?,
      active: json['active'] as bool?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      stateId: (json['stateId'] as num?)?.toInt(),
      countryId: (json['countryId'] as num?)?.toInt(),
      mailServerId: (json['mailServerId'] as num?)?.toInt(),
      smsServerId: (json['smsServerId'] as num?)?.toInt(),
      singleSignOnServerId: (json['singleSignOnServerId'] as num?)?.toInt(),
      whatsAppNotificationServerId:
          (json['whatsAppNotificationServerId'] as num?)?.toInt(),
      voiceNotificationServerId:
          (json['voiceNotificationServerId'] as num?)?.toInt(),
      pushNotificationServerId:
          (json['pushNotificationServerId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      predefinedCurrencyTypeId:
          (json['predefinedCurrencyTypeId'] as num?)?.toInt(),
      useDigitalSignature: json['useDigitalSignature'] as bool?,
      digitalSignatureServerId:
          (json['digitalSignatureServerId'] as num?)?.toInt(),
      useSms: json['useSms'] as bool?,
      useWhatsAppNotification: json['useWhatsAppNotification'] as bool?,
      usePushNotification: json['usePushNotification'] as bool?,
      useVoiceNotification: json['useVoiceNotification'] as bool?,
      useMailNotification: json['useMailNotification'] as bool?,
      numberOfPushNotificationsAllowed:
          (json['numberOfPushNotificationsAllowed'] as num?)?.toInt(),
      numberOfSmsNotificationsAllowed:
          (json['numberOfSmsNotificationsAllowed'] as num?)?.toInt(),
      numberOfWhatsAppNotificationsAllowed:
          (json['numberOfWhatsAppNotificationsAllowed'] as num?)?.toInt(),
      numberOfVoiceNotificationsAllowed:
          (json['numberOfVoiceNotificationsAllowed'] as num?)?.toInt(),
      numberOfMailNotificationsUsed:
          (json['numberOfMailNotificationsUsed'] as num?)?.toInt(),
      numberOfPushNotificationsUsed:
          (json['numberOfPushNotificationsUsed'] as num?)?.toInt(),
      numberOfSmsNotificationsUsed:
          (json['numberOfSmsNotificationsUsed'] as num?)?.toInt(),
      numberOfWhatsAppNotificationsUsed:
          (json['numberOfWhatsAppNotificationsUsed'] as num?)?.toInt(),
      numberOfVoiceNotificationsUsed:
          (json['numberOfVoiceNotificationsUsed'] as num?)?.toInt(),
      numberOfMailNotificationsAllowed:
          (json['numberOfMailNotificationsAllowed'] as num?)?.toInt(),
      createDummyData: json['createDummyData'] as bool?,
      createExtendedDummyData: json['createExtendedDummyData'] as bool?,
      initialPassword: json['initialPassword'] as String?,
    );

Map<String, dynamic> _$CompanyCreateModelToJson(CompanyCreateModel instance) =>
    <String, dynamic>{
      'companyCode': instance.companyCode,
      'companyName': instance.companyName,
      'subdomain': instance.subdomain,
      'predefinedCompanyTypeId': instance.predefinedCompanyTypeId,
      'addedDateTime': instance.addedDateTime?.toIso8601String(),
      'email': instance.email,
      'contactFirstName': instance.contactFirstName,
      'website': instance.website,
      'contactLastName': instance.contactLastName,
      'workPhone': instance.workPhone,
      'workPhoneExt': instance.workPhoneExt,
      'cellPhone': instance.cellPhone,
      'active': instance.active,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'stateId': instance.stateId,
      'countryId': instance.countryId,
      'mailServerId': instance.mailServerId,
      'smsServerId': instance.smsServerId,
      'singleSignOnServerId': instance.singleSignOnServerId,
      'whatsAppNotificationServerId': instance.whatsAppNotificationServerId,
      'voiceNotificationServerId': instance.voiceNotificationServerId,
      'pushNotificationServerId': instance.pushNotificationServerId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'predefinedCurrencyTypeId': instance.predefinedCurrencyTypeId,
      'useDigitalSignature': instance.useDigitalSignature,
      'digitalSignatureServerId': instance.digitalSignatureServerId,
      'useSms': instance.useSms,
      'useWhatsAppNotification': instance.useWhatsAppNotification,
      'usePushNotification': instance.usePushNotification,
      'useVoiceNotification': instance.useVoiceNotification,
      'useMailNotification': instance.useMailNotification,
      'numberOfPushNotificationsAllowed':
          instance.numberOfPushNotificationsAllowed,
      'numberOfSmsNotificationsAllowed':
          instance.numberOfSmsNotificationsAllowed,
      'numberOfWhatsAppNotificationsAllowed':
          instance.numberOfWhatsAppNotificationsAllowed,
      'numberOfVoiceNotificationsAllowed':
          instance.numberOfVoiceNotificationsAllowed,
      'numberOfMailNotificationsUsed': instance.numberOfMailNotificationsUsed,
      'numberOfPushNotificationsUsed': instance.numberOfPushNotificationsUsed,
      'numberOfSmsNotificationsUsed': instance.numberOfSmsNotificationsUsed,
      'numberOfWhatsAppNotificationsUsed':
          instance.numberOfWhatsAppNotificationsUsed,
      'numberOfVoiceNotificationsUsed': instance.numberOfVoiceNotificationsUsed,
      'numberOfMailNotificationsAllowed':
          instance.numberOfMailNotificationsAllowed,
      'createDummyData': instance.createDummyData,
      'createExtendedDummyData': instance.createExtendedDummyData,
      'initialPassword': instance.initialPassword,
    };

CompanyModel _$CompanyModelFromJson(Map<String, dynamic> json) => CompanyModel(
      companyId: (json['companyId'] as num?)?.toInt(),
      companyCode: json['companyCode'] as String?,
      companyName: json['companyName'] as String?,
      subdomain: json['subdomain'] as String?,
      predefinedCompanyTypeId:
          (json['predefinedCompanyTypeId'] as num?)?.toInt(),
      addedDateTime: json['addedDateTime'] == null
          ? null
          : DateTime.parse(json['addedDateTime'] as String),
      email: json['email'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      website: json['website'] as String?,
      contactLastName: json['contactLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      workPhoneExt: json['workPhoneExt'] as String?,
      cellPhone: json['cellPhone'] as String?,
      active: json['active'] as bool?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      stateId: (json['stateId'] as num?)?.toInt(),
      countryId: (json['countryId'] as num?)?.toInt(),
      mailServerId: (json['mailServerId'] as num?)?.toInt(),
      smsServerId: (json['smsServerId'] as num?)?.toInt(),
      singleSignOnServerId: (json['singleSignOnServerId'] as num?)?.toInt(),
      whatsAppNotificationServerId:
          (json['whatsAppNotificationServerId'] as num?)?.toInt(),
      voiceNotificationServerId:
          (json['voiceNotificationServerId'] as num?)?.toInt(),
      pushNotificationServerId:
          (json['pushNotificationServerId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      predefinedCurrencyTypeId:
          (json['predefinedCurrencyTypeId'] as num?)?.toInt(),
      useDigitalSignature: json['useDigitalSignature'] as bool?,
      digitalSignatureServerId:
          (json['digitalSignatureServerId'] as num?)?.toInt(),
      useSms: json['useSms'] as bool?,
      useWhatsAppNotification: json['useWhatsAppNotification'] as bool?,
      usePushNotification: json['usePushNotification'] as bool?,
      useVoiceNotification: json['useVoiceNotification'] as bool?,
      useMailNotification: json['useMailNotification'] as bool?,
      numberOfPushNotificationsAllowed:
          (json['numberOfPushNotificationsAllowed'] as num?)?.toInt(),
      numberOfSmsNotificationsAllowed:
          (json['numberOfSmsNotificationsAllowed'] as num?)?.toInt(),
      numberOfWhatsAppNotificationsAllowed:
          (json['numberOfWhatsAppNotificationsAllowed'] as num?)?.toInt(),
      numberOfVoiceNotificationsAllowed:
          (json['numberOfVoiceNotificationsAllowed'] as num?)?.toInt(),
      numberOfMailNotificationsUsed:
          (json['numberOfMailNotificationsUsed'] as num?)?.toInt(),
      numberOfPushNotificationsUsed:
          (json['numberOfPushNotificationsUsed'] as num?)?.toInt(),
      numberOfSmsNotificationsUsed:
          (json['numberOfSmsNotificationsUsed'] as num?)?.toInt(),
      numberOfWhatsAppNotificationsUsed:
          (json['numberOfWhatsAppNotificationsUsed'] as num?)?.toInt(),
      numberOfVoiceNotificationsUsed:
          (json['numberOfVoiceNotificationsUsed'] as num?)?.toInt(),
      numberOfMailNotificationsAllowed:
          (json['numberOfMailNotificationsAllowed'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedCompanyTypeName: json['predefinedCompanyTypeName'] as String?,
      stateName: json['stateName'] as String?,
      countryName: json['countryName'] as String?,
      mailServerName: json['mailServerName'] as String?,
      singleSignOnServerCode: json['singleSignOnServerCode'] as String?,
      mailServerCode: json['mailServerCode'] as String?,
      predefinedCurrencyTypeName: json['predefinedCurrencyTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$CompanyModelToJson(CompanyModel instance) =>
    <String, dynamic>{
      'companyId': instance.companyId,
      'companyCode': instance.companyCode,
      'companyName': instance.companyName,
      'subdomain': instance.subdomain,
      'predefinedCompanyTypeId': instance.predefinedCompanyTypeId,
      'addedDateTime': instance.addedDateTime?.toIso8601String(),
      'email': instance.email,
      'contactFirstName': instance.contactFirstName,
      'website': instance.website,
      'contactLastName': instance.contactLastName,
      'workPhone': instance.workPhone,
      'workPhoneExt': instance.workPhoneExt,
      'cellPhone': instance.cellPhone,
      'active': instance.active,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'stateId': instance.stateId,
      'countryId': instance.countryId,
      'mailServerId': instance.mailServerId,
      'smsServerId': instance.smsServerId,
      'singleSignOnServerId': instance.singleSignOnServerId,
      'whatsAppNotificationServerId': instance.whatsAppNotificationServerId,
      'voiceNotificationServerId': instance.voiceNotificationServerId,
      'pushNotificationServerId': instance.pushNotificationServerId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'predefinedCurrencyTypeId': instance.predefinedCurrencyTypeId,
      'useDigitalSignature': instance.useDigitalSignature,
      'digitalSignatureServerId': instance.digitalSignatureServerId,
      'useSms': instance.useSms,
      'useWhatsAppNotification': instance.useWhatsAppNotification,
      'usePushNotification': instance.usePushNotification,
      'useVoiceNotification': instance.useVoiceNotification,
      'useMailNotification': instance.useMailNotification,
      'numberOfPushNotificationsAllowed':
          instance.numberOfPushNotificationsAllowed,
      'numberOfSmsNotificationsAllowed':
          instance.numberOfSmsNotificationsAllowed,
      'numberOfWhatsAppNotificationsAllowed':
          instance.numberOfWhatsAppNotificationsAllowed,
      'numberOfVoiceNotificationsAllowed':
          instance.numberOfVoiceNotificationsAllowed,
      'numberOfMailNotificationsUsed': instance.numberOfMailNotificationsUsed,
      'numberOfPushNotificationsUsed': instance.numberOfPushNotificationsUsed,
      'numberOfSmsNotificationsUsed': instance.numberOfSmsNotificationsUsed,
      'numberOfWhatsAppNotificationsUsed':
          instance.numberOfWhatsAppNotificationsUsed,
      'numberOfVoiceNotificationsUsed': instance.numberOfVoiceNotificationsUsed,
      'numberOfMailNotificationsAllowed':
          instance.numberOfMailNotificationsAllowed,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedCompanyTypeName': instance.predefinedCompanyTypeName,
      'stateName': instance.stateName,
      'countryName': instance.countryName,
      'mailServerName': instance.mailServerName,
      'singleSignOnServerCode': instance.singleSignOnServerCode,
      'mailServerCode': instance.mailServerCode,
      'predefinedCurrencyTypeName': instance.predefinedCurrencyTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

CompanyModelReturnListModel _$CompanyModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    CompanyModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => CompanyModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$CompanyModelReturnListModelToJson(
        CompanyModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

CompanyModelReturnModel _$CompanyModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    CompanyModelReturnModel(
      model: json['model'] == null
          ? null
          : CompanyModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$CompanyModelReturnModelToJson(
        CompanyModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

CompanyStorageConfigurationCreateModel
    _$CompanyStorageConfigurationCreateModelFromJson(
            Map<String, dynamic> json) =>
        CompanyStorageConfigurationCreateModel(
          companyStorageConfigurationGuid:
              json['companyStorageConfigurationGuid'] as String?,
          companyId: (json['companyId'] as num?)?.toInt(),
          contractFileStorageConnectionString:
              json['contractFileStorageConnectionString'] as String?,
          letterTemplateFileStorageConnectionString:
              json['letterTemplateFileStorageConnectionString'] as String?,
          profilePictureFileStorageConnectionString:
              json['profilePictureFileStorageConnectionString'] as String?,
          reportServerFileStorageConnectionString:
              json['reportServerFileStorageConnectionString'] as String?,
          fileAttachmentFileStorageConnectionString:
              json['fileAttachmentFileStorageConnectionString'] as String?,
          statementFileStorageConnectionString:
              json['statementFileStorageConnectionString'] as String?,
          mlModelFileStorageConnectionString:
              json['mlModelFileStorageConnectionString'] as String?,
          resourceIdentificationDocumentFileStorageConnectionString:
              json['resourceIdentificationDocumentFileStorageConnectionString']
                  as String?,
          resourceBiometricRecordFileStorageConnectionString:
              json['resourceBiometricRecordFileStorageConnectionString']
                  as String?,
        );

Map<String, dynamic> _$CompanyStorageConfigurationCreateModelToJson(
        CompanyStorageConfigurationCreateModel instance) =>
    <String, dynamic>{
      'companyStorageConfigurationGuid':
          instance.companyStorageConfigurationGuid,
      'companyId': instance.companyId,
      'contractFileStorageConnectionString':
          instance.contractFileStorageConnectionString,
      'letterTemplateFileStorageConnectionString':
          instance.letterTemplateFileStorageConnectionString,
      'profilePictureFileStorageConnectionString':
          instance.profilePictureFileStorageConnectionString,
      'reportServerFileStorageConnectionString':
          instance.reportServerFileStorageConnectionString,
      'fileAttachmentFileStorageConnectionString':
          instance.fileAttachmentFileStorageConnectionString,
      'statementFileStorageConnectionString':
          instance.statementFileStorageConnectionString,
      'mlModelFileStorageConnectionString':
          instance.mlModelFileStorageConnectionString,
      'resourceIdentificationDocumentFileStorageConnectionString':
          instance.resourceIdentificationDocumentFileStorageConnectionString,
      'resourceBiometricRecordFileStorageConnectionString':
          instance.resourceBiometricRecordFileStorageConnectionString,
    };

CompanyStorageConfigurationModel _$CompanyStorageConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    CompanyStorageConfigurationModel(
      companyStorageConfigurationId:
          (json['companyStorageConfigurationId'] as num?)?.toInt(),
      companyStorageConfigurationGuid:
          json['companyStorageConfigurationGuid'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      contractFileStorageConnectionString:
          json['contractFileStorageConnectionString'] as String?,
      letterTemplateFileStorageConnectionString:
          json['letterTemplateFileStorageConnectionString'] as String?,
      profilePictureFileStorageConnectionString:
          json['profilePictureFileStorageConnectionString'] as String?,
      reportServerFileStorageConnectionString:
          json['reportServerFileStorageConnectionString'] as String?,
      fileAttachmentFileStorageConnectionString:
          json['fileAttachmentFileStorageConnectionString'] as String?,
      statementFileStorageConnectionString:
          json['statementFileStorageConnectionString'] as String?,
      mlModelFileStorageConnectionString:
          json['mlModelFileStorageConnectionString'] as String?,
      resourceIdentificationDocumentFileStorageConnectionString:
          json['resourceIdentificationDocumentFileStorageConnectionString']
              as String?,
      resourceBiometricRecordFileStorageConnectionString:
          json['resourceBiometricRecordFileStorageConnectionString'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$CompanyStorageConfigurationModelToJson(
        CompanyStorageConfigurationModel instance) =>
    <String, dynamic>{
      'companyStorageConfigurationId': instance.companyStorageConfigurationId,
      'companyStorageConfigurationGuid':
          instance.companyStorageConfigurationGuid,
      'companyId': instance.companyId,
      'contractFileStorageConnectionString':
          instance.contractFileStorageConnectionString,
      'letterTemplateFileStorageConnectionString':
          instance.letterTemplateFileStorageConnectionString,
      'profilePictureFileStorageConnectionString':
          instance.profilePictureFileStorageConnectionString,
      'reportServerFileStorageConnectionString':
          instance.reportServerFileStorageConnectionString,
      'fileAttachmentFileStorageConnectionString':
          instance.fileAttachmentFileStorageConnectionString,
      'statementFileStorageConnectionString':
          instance.statementFileStorageConnectionString,
      'mlModelFileStorageConnectionString':
          instance.mlModelFileStorageConnectionString,
      'resourceIdentificationDocumentFileStorageConnectionString':
          instance.resourceIdentificationDocumentFileStorageConnectionString,
      'resourceBiometricRecordFileStorageConnectionString':
          instance.resourceBiometricRecordFileStorageConnectionString,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

CompanyStorageConfigurationModelReturnModel
    _$CompanyStorageConfigurationModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        CompanyStorageConfigurationModelReturnModel(
          model: json['model'] == null
              ? null
              : CompanyStorageConfigurationModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$CompanyStorageConfigurationModelReturnModelToJson(
        CompanyStorageConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

CompanyStorageConfigurationUpdateModel
    _$CompanyStorageConfigurationUpdateModelFromJson(
            Map<String, dynamic> json) =>
        CompanyStorageConfigurationUpdateModel(
          companyStorageConfigurationId:
              (json['companyStorageConfigurationId'] as num?)?.toInt(),
          companyStorageConfigurationGuid:
              json['companyStorageConfigurationGuid'] as String?,
          companyId: (json['companyId'] as num?)?.toInt(),
          contractFileStorageConnectionString:
              json['contractFileStorageConnectionString'] as String?,
          letterTemplateFileStorageConnectionString:
              json['letterTemplateFileStorageConnectionString'] as String?,
          profilePictureFileStorageConnectionString:
              json['profilePictureFileStorageConnectionString'] as String?,
          reportServerFileStorageConnectionString:
              json['reportServerFileStorageConnectionString'] as String?,
          fileAttachmentFileStorageConnectionString:
              json['fileAttachmentFileStorageConnectionString'] as String?,
          statementFileStorageConnectionString:
              json['statementFileStorageConnectionString'] as String?,
          mlModelFileStorageConnectionString:
              json['mlModelFileStorageConnectionString'] as String?,
          resourceIdentificationDocumentFileStorageConnectionString:
              json['resourceIdentificationDocumentFileStorageConnectionString']
                  as String?,
          resourceBiometricRecordFileStorageConnectionString:
              json['resourceBiometricRecordFileStorageConnectionString']
                  as String?,
        );

Map<String, dynamic> _$CompanyStorageConfigurationUpdateModelToJson(
        CompanyStorageConfigurationUpdateModel instance) =>
    <String, dynamic>{
      'companyStorageConfigurationId': instance.companyStorageConfigurationId,
      'companyStorageConfigurationGuid':
          instance.companyStorageConfigurationGuid,
      'companyId': instance.companyId,
      'contractFileStorageConnectionString':
          instance.contractFileStorageConnectionString,
      'letterTemplateFileStorageConnectionString':
          instance.letterTemplateFileStorageConnectionString,
      'profilePictureFileStorageConnectionString':
          instance.profilePictureFileStorageConnectionString,
      'reportServerFileStorageConnectionString':
          instance.reportServerFileStorageConnectionString,
      'fileAttachmentFileStorageConnectionString':
          instance.fileAttachmentFileStorageConnectionString,
      'statementFileStorageConnectionString':
          instance.statementFileStorageConnectionString,
      'mlModelFileStorageConnectionString':
          instance.mlModelFileStorageConnectionString,
      'resourceIdentificationDocumentFileStorageConnectionString':
          instance.resourceIdentificationDocumentFileStorageConnectionString,
      'resourceBiometricRecordFileStorageConnectionString':
          instance.resourceBiometricRecordFileStorageConnectionString,
    };

CompanySummaryModel _$CompanySummaryModelFromJson(Map<String, dynamic> json) =>
    CompanySummaryModel(
      companyId: (json['companyId'] as num?)?.toInt(),
      totalMovieCount: (json['totalMovieCount'] as num?)?.toInt(),
      totalMovieNotStartedCount:
          (json['totalMovieNotStartedCount'] as num?)?.toInt(),
      totalMovieInPreProductionCount:
          (json['totalMovieInPreProductionCount'] as num?)?.toInt(),
      totalMovieInProductionCount:
          (json['totalMovieInProductionCount'] as num?)?.toInt(),
      totalMovieInPostProductionCount:
          (json['totalMovieInPostProductionCount'] as num?)?.toInt(),
      totalMovieCompletedCount:
          (json['totalMovieCompletedCount'] as num?)?.toInt(),
      totalMovieArchivedCount:
          (json['totalMovieArchivedCount'] as num?)?.toInt(),
    );

Map<String, dynamic> _$CompanySummaryModelToJson(
        CompanySummaryModel instance) =>
    <String, dynamic>{
      'companyId': instance.companyId,
      'totalMovieCount': instance.totalMovieCount,
      'totalMovieNotStartedCount': instance.totalMovieNotStartedCount,
      'totalMovieInPreProductionCount': instance.totalMovieInPreProductionCount,
      'totalMovieInProductionCount': instance.totalMovieInProductionCount,
      'totalMovieInPostProductionCount':
          instance.totalMovieInPostProductionCount,
      'totalMovieCompletedCount': instance.totalMovieCompletedCount,
      'totalMovieArchivedCount': instance.totalMovieArchivedCount,
    };

CompanySummaryModelReturnModel _$CompanySummaryModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    CompanySummaryModelReturnModel(
      model: json['model'] == null
          ? null
          : CompanySummaryModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$CompanySummaryModelReturnModelToJson(
        CompanySummaryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ConfigurationGroupCreateModel _$ConfigurationGroupCreateModelFromJson(
        Map<String, dynamic> json) =>
    ConfigurationGroupCreateModel(
      groupName: json['groupName'] as String?,
    );

Map<String, dynamic> _$ConfigurationGroupCreateModelToJson(
        ConfigurationGroupCreateModel instance) =>
    <String, dynamic>{
      'groupName': instance.groupName,
    };

ConfigurationGroupModel _$ConfigurationGroupModelFromJson(
        Map<String, dynamic> json) =>
    ConfigurationGroupModel(
      configurationGroupId: (json['configurationGroupId'] as num?)?.toInt(),
      groupName: json['groupName'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ConfigurationGroupModelToJson(
        ConfigurationGroupModel instance) =>
    <String, dynamic>{
      'configurationGroupId': instance.configurationGroupId,
      'groupName': instance.groupName,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ConfigurationGroupModelReturnListModel
    _$ConfigurationGroupModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        ConfigurationGroupModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => ConfigurationGroupModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ConfigurationGroupModelReturnListModelToJson(
        ConfigurationGroupModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ConfigurationGroupModelReturnModel _$ConfigurationGroupModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ConfigurationGroupModelReturnModel(
      model: json['model'] == null
          ? null
          : ConfigurationGroupModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ConfigurationGroupModelReturnModelToJson(
        ConfigurationGroupModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ConfigurationGroupUpdateModel _$ConfigurationGroupUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ConfigurationGroupUpdateModel(
      configurationGroupId: (json['configurationGroupId'] as num?)?.toInt(),
      groupName: json['groupName'] as String?,
    );

Map<String, dynamic> _$ConfigurationGroupUpdateModelToJson(
        ConfigurationGroupUpdateModel instance) =>
    <String, dynamic>{
      'configurationGroupId': instance.configurationGroupId,
      'groupName': instance.groupName,
    };

ConfigurationItemCreateModel _$ConfigurationItemCreateModelFromJson(
        Map<String, dynamic> json) =>
    ConfigurationItemCreateModel(
      configurationGroupId: (json['configurationGroupId'] as num?)?.toInt(),
      key: json['key'] as String?,
      $value: json['value'] as String?,
      defaultValue: json['defaultValue'] as String?,
      required: json['required'] as bool?,
    );

Map<String, dynamic> _$ConfigurationItemCreateModelToJson(
        ConfigurationItemCreateModel instance) =>
    <String, dynamic>{
      'configurationGroupId': instance.configurationGroupId,
      'key': instance.key,
      'value': instance.$value,
      'defaultValue': instance.defaultValue,
      'required': instance.required,
    };

ConfigurationItemModel _$ConfigurationItemModelFromJson(
        Map<String, dynamic> json) =>
    ConfigurationItemModel(
      configurationItemId: (json['configurationItemId'] as num?)?.toInt(),
      configurationGroupId: (json['configurationGroupId'] as num?)?.toInt(),
      key: json['key'] as String?,
      $value: json['value'] as String?,
      defaultValue: json['defaultValue'] as String?,
      required: json['required'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ConfigurationItemModelToJson(
        ConfigurationItemModel instance) =>
    <String, dynamic>{
      'configurationItemId': instance.configurationItemId,
      'configurationGroupId': instance.configurationGroupId,
      'key': instance.key,
      'value': instance.$value,
      'defaultValue': instance.defaultValue,
      'required': instance.required,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ConfigurationItemModelReturnListModel
    _$ConfigurationItemModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        ConfigurationItemModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => ConfigurationItemModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ConfigurationItemModelReturnListModelToJson(
        ConfigurationItemModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ConfigurationItemModelReturnModel _$ConfigurationItemModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ConfigurationItemModelReturnModel(
      model: json['model'] == null
          ? null
          : ConfigurationItemModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ConfigurationItemModelReturnModelToJson(
        ConfigurationItemModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ConfigurationItemUpdateModel _$ConfigurationItemUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ConfigurationItemUpdateModel(
      configurationItemId: (json['configurationItemId'] as num?)?.toInt(),
      configurationGroupId: (json['configurationGroupId'] as num?)?.toInt(),
      key: json['key'] as String?,
      $value: json['value'] as String?,
      defaultValue: json['defaultValue'] as String?,
      required: json['required'] as bool?,
    );

Map<String, dynamic> _$ConfigurationItemUpdateModelToJson(
        ConfigurationItemUpdateModel instance) =>
    <String, dynamic>{
      'configurationItemId': instance.configurationItemId,
      'configurationGroupId': instance.configurationGroupId,
      'key': instance.key,
      'value': instance.$value,
      'defaultValue': instance.defaultValue,
      'required': instance.required,
    };

ConsolidatedMovieResourceBudgetExpenseSummaryModel
    _$ConsolidatedMovieResourceBudgetExpenseSummaryModelFromJson(
            Map<String, dynamic> json) =>
        ConsolidatedMovieResourceBudgetExpenseSummaryModel(
          artistBudgetTotalAmount:
              (json['artistBudgetTotalAmount'] as num?)?.toDouble(),
          artistExpenseTotalAmount:
              (json['artistExpenseTotalAmount'] as num?)?.toDouble(),
          artistPaidTotalAmount:
              (json['artistPaidTotalAmount'] as num?)?.toDouble(),
          technicianBudgetTotalAmount:
              (json['technicianBudgetTotalAmount'] as num?)?.toDouble(),
          technicianExpenseTotalAmount:
              (json['technicianExpenseTotalAmount'] as num?)?.toDouble(),
          technicianPaidTotalAmount:
              (json['technicianPaidTotalAmount'] as num?)?.toDouble(),
          equipmentBudgetTotalAmount:
              (json['equipmentBudgetTotalAmount'] as num?)?.toDouble(),
          equipmentExpenseTotalAmount:
              (json['equipmentExpenseTotalAmount'] as num?)?.toDouble(),
          equipmentPaidTotalAmount:
              (json['equipmentPaidTotalAmount'] as num?)?.toDouble(),
          vendorBudgetTotalAmount:
              (json['vendorBudgetTotalAmount'] as num?)?.toDouble(),
          vendorExpenseTotalAmount:
              (json['vendorExpenseTotalAmount'] as num?)?.toDouble(),
          vendorPaidTotalAmount:
              (json['vendorPaidTotalAmount'] as num?)?.toDouble(),
          propertyBudgetTotalAmount:
              (json['propertyBudgetTotalAmount'] as num?)?.toDouble(),
          propertyExpenseTotalAmount:
              (json['propertyExpenseTotalAmount'] as num?)?.toDouble(),
          propertyPaidTotalAmount:
              (json['propertyPaidTotalAmount'] as num?)?.toDouble(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieName: json['movieName'] as String?,
          companyId: (json['companyId'] as num?)?.toInt(),
          companyName: json['companyName'] as String?,
        );

Map<String, dynamic> _$ConsolidatedMovieResourceBudgetExpenseSummaryModelToJson(
        ConsolidatedMovieResourceBudgetExpenseSummaryModel instance) =>
    <String, dynamic>{
      'artistBudgetTotalAmount': instance.artistBudgetTotalAmount,
      'artistExpenseTotalAmount': instance.artistExpenseTotalAmount,
      'artistPaidTotalAmount': instance.artistPaidTotalAmount,
      'technicianBudgetTotalAmount': instance.technicianBudgetTotalAmount,
      'technicianExpenseTotalAmount': instance.technicianExpenseTotalAmount,
      'technicianPaidTotalAmount': instance.technicianPaidTotalAmount,
      'equipmentBudgetTotalAmount': instance.equipmentBudgetTotalAmount,
      'equipmentExpenseTotalAmount': instance.equipmentExpenseTotalAmount,
      'equipmentPaidTotalAmount': instance.equipmentPaidTotalAmount,
      'vendorBudgetTotalAmount': instance.vendorBudgetTotalAmount,
      'vendorExpenseTotalAmount': instance.vendorExpenseTotalAmount,
      'vendorPaidTotalAmount': instance.vendorPaidTotalAmount,
      'propertyBudgetTotalAmount': instance.propertyBudgetTotalAmount,
      'propertyExpenseTotalAmount': instance.propertyExpenseTotalAmount,
      'propertyPaidTotalAmount': instance.propertyPaidTotalAmount,
      'movieId': instance.movieId,
      'movieName': instance.movieName,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
    };

ConsolidatedMovieResourceBudgetExpenseSummaryModelReturnModel
    _$ConsolidatedMovieResourceBudgetExpenseSummaryModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        ConsolidatedMovieResourceBudgetExpenseSummaryModelReturnModel(
          model: json['model'] == null
              ? null
              : ConsolidatedMovieResourceBudgetExpenseSummaryModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ConsolidatedMovieResourceBudgetExpenseSummaryModelReturnModelToJson(
            ConsolidatedMovieResourceBudgetExpenseSummaryModelReturnModel
                instance) =>
        <String, dynamic>{
          'model': instance.model?.toJson(),
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

ContractModel _$ContractModelFromJson(Map<String, dynamic> json) =>
    ContractModel(
      contractId: (json['contractId'] as num?)?.toInt(),
      predefinedContractForTypeId:
          (json['predefinedContractForTypeId'] as num?)?.toInt(),
      contractTemplateId: (json['contractTemplateId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      title: json['title'] as String?,
      description: json['description'] as String?,
      contractFileName: json['contractFileName'] as String?,
      contractFileLocation: json['contractFileLocation'] as String?,
      contractPreviewFileLocation:
          json['contractPreviewFileLocation'] as String?,
      contractSignedFileLocation: json['contractSignedFileLocation'] as String?,
      contractSignedPreviewFileLocation:
          json['contractSignedPreviewFileLocation'] as String?,
      contractWithCompanyName: json['contractWithCompanyName'] as String?,
      contractWithFirstName: json['contractWithFirstName'] as String?,
      contractWithLastName: json['contractWithLastName'] as String?,
      contractWithEmail: json['contractWithEmail'] as String?,
      contractWithPhone: json['contractWithPhone'] as String?,
      contractWithAddress1: json['contractWithAddress1'] as String?,
      contractWithAddress2: json['contractWithAddress2'] as String?,
      contractWithCity: json['contractWithCity'] as String?,
      contractWithState: json['contractWithState'] as String?,
      contractWithCountry: json['contractWithCountry'] as String?,
      contractWithZipCode: json['contractWithZipCode'] as String?,
      predefinedContractStatusTypeId:
          (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isPreviewFileAvailable: json['isPreviewFileAvailable'] as bool?,
      contractDocumentModifiedDate: json['contractDocumentModifiedDate'] == null
          ? null
          : DateTime.parse(json['contractDocumentModifiedDate'] as String),
      contractDocumentIndexedDate: json['contractDocumentIndexedDate'] == null
          ? null
          : DateTime.parse(json['contractDocumentIndexedDate'] as String),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      artistIdFromMovieArtist:
          (json['artistIdFromMovieArtist'] as num?)?.toInt(),
      equipmentIdFromMovieEquipment:
          (json['equipmentIdFromMovieEquipment'] as num?)?.toInt(),
      propertyIdFromMovieProperty:
          (json['propertyIdFromMovieProperty'] as num?)?.toInt(),
      vendorIdFromMovieVendor:
          (json['vendorIdFromMovieVendor'] as num?)?.toInt(),
      technicianIdFromMovieTechnician:
          (json['technicianIdFromMovieTechnician'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      predefinedContractForTypeName:
          json['predefinedContractForTypeName'] as String?,
      predefinedContractStatusTypeName:
          json['predefinedContractStatusTypeName'] as String?,
      contractTemplateName: json['contractTemplateName'] as String?,
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      equipmentName: json['equipmentName'] as String?,
      propertyName: json['propertyName'] as String?,
      moviePropertyName: json['moviePropertyName'] as String?,
      vendorName: json['vendorName'] as String?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      movieArtistFirstName: json['movieArtistFirstName'] as String?,
      movieArtistLastName: json['movieArtistLastName'] as String?,
      movieEquipmentName: json['movieEquipmentName'] as String?,
      movieTechnicianFirstName: json['movieTechnicianFirstName'] as String?,
      movieTechnicianLastName: json['movieTechnicianLastName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      companyName: json['companyName'] as String?,
      artistCode: json['artistCode'] as String?,
      equipmentCode: json['equipmentCode'] as String?,
      vendorCode: json['vendorCode'] as String?,
      technicianCode: json['technicianCode'] as String?,
      propertyCode: json['propertyCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ContractModelToJson(ContractModel instance) =>
    <String, dynamic>{
      'contractId': instance.contractId,
      'predefinedContractForTypeId': instance.predefinedContractForTypeId,
      'contractTemplateId': instance.contractTemplateId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'equipmentId': instance.equipmentId,
      'vendorId': instance.vendorId,
      'propertyId': instance.propertyId,
      'movieLocationId': instance.movieLocationId,
      'title': instance.title,
      'description': instance.description,
      'contractFileName': instance.contractFileName,
      'contractFileLocation': instance.contractFileLocation,
      'contractPreviewFileLocation': instance.contractPreviewFileLocation,
      'contractSignedFileLocation': instance.contractSignedFileLocation,
      'contractSignedPreviewFileLocation':
          instance.contractSignedPreviewFileLocation,
      'contractWithCompanyName': instance.contractWithCompanyName,
      'contractWithFirstName': instance.contractWithFirstName,
      'contractWithLastName': instance.contractWithLastName,
      'contractWithEmail': instance.contractWithEmail,
      'contractWithPhone': instance.contractWithPhone,
      'contractWithAddress1': instance.contractWithAddress1,
      'contractWithAddress2': instance.contractWithAddress2,
      'contractWithCity': instance.contractWithCity,
      'contractWithState': instance.contractWithState,
      'contractWithCountry': instance.contractWithCountry,
      'contractWithZipCode': instance.contractWithZipCode,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isPreviewFileAvailable': instance.isPreviewFileAvailable,
      'contractDocumentModifiedDate':
          instance.contractDocumentModifiedDate?.toIso8601String(),
      'contractDocumentIndexedDate':
          instance.contractDocumentIndexedDate?.toIso8601String(),
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'artistIdFromMovieArtist': instance.artistIdFromMovieArtist,
      'equipmentIdFromMovieEquipment': instance.equipmentIdFromMovieEquipment,
      'propertyIdFromMovieProperty': instance.propertyIdFromMovieProperty,
      'vendorIdFromMovieVendor': instance.vendorIdFromMovieVendor,
      'technicianIdFromMovieTechnician':
          instance.technicianIdFromMovieTechnician,
      'movieLocationName': instance.movieLocationName,
      'predefinedContractForTypeName': instance.predefinedContractForTypeName,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'contractTemplateName': instance.contractTemplateName,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'equipmentName': instance.equipmentName,
      'propertyName': instance.propertyName,
      'moviePropertyName': instance.moviePropertyName,
      'vendorName': instance.vendorName,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'movieArtistFirstName': instance.movieArtistFirstName,
      'movieArtistLastName': instance.movieArtistLastName,
      'movieEquipmentName': instance.movieEquipmentName,
      'movieTechnicianFirstName': instance.movieTechnicianFirstName,
      'movieTechnicianLastName': instance.movieTechnicianLastName,
      'movieVendorName': instance.movieVendorName,
      'companyName': instance.companyName,
      'artistCode': instance.artistCode,
      'equipmentCode': instance.equipmentCode,
      'vendorCode': instance.vendorCode,
      'technicianCode': instance.technicianCode,
      'propertyCode': instance.propertyCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ContractModelReturnListModel _$ContractModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ContractModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ContractModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ContractModelReturnListModelToJson(
        ContractModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ContractModelReturnModel _$ContractModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ContractModelReturnModel(
      model: json['model'] == null
          ? null
          : ContractModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ContractModelReturnModelToJson(
        ContractModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ContractTemplateCreateWithMovieModel
    _$ContractTemplateCreateWithMovieModelFromJson(Map<String, dynamic> json) =>
        ContractTemplateCreateWithMovieModel(
          predefinedContractTemplateForTypeId:
              (json['predefinedContractTemplateForTypeId'] as num?)?.toInt(),
          artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
          technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
          equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
          vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
          propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
          contractTemplateName: json['contractTemplateName'] as String?,
          description: json['description'] as String?,
          contractTemplateFileName: json['contractTemplateFileName'] as String?,
          contractTemplateFileLocation:
              json['contractTemplateFileLocation'] as String?,
          contractTemplatePreviewFileLocation:
              json['contractTemplatePreviewFileLocation'] as String?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isPreviewFileAvailable: json['isPreviewFileAvailable'] as bool?,
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ContractTemplateCreateWithMovieModelToJson(
        ContractTemplateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'predefinedContractTemplateForTypeId':
          instance.predefinedContractTemplateForTypeId,
      'artistTypeId': instance.artistTypeId,
      'technicianTypeId': instance.technicianTypeId,
      'equipmentTypeId': instance.equipmentTypeId,
      'vendorTypeId': instance.vendorTypeId,
      'propertyTypeId': instance.propertyTypeId,
      'contractTemplateName': instance.contractTemplateName,
      'description': instance.description,
      'contractTemplateFileName': instance.contractTemplateFileName,
      'contractTemplateFileLocation': instance.contractTemplateFileLocation,
      'contractTemplatePreviewFileLocation':
          instance.contractTemplatePreviewFileLocation,
      'companyId': instance.companyId,
      'isPreviewFileAvailable': instance.isPreviewFileAvailable,
      'movieId': instance.movieId,
    };

ContractTemplateModel _$ContractTemplateModelFromJson(
        Map<String, dynamic> json) =>
    ContractTemplateModel(
      contractTemplateId: (json['contractTemplateId'] as num?)?.toInt(),
      predefinedContractTemplateForTypeId:
          (json['predefinedContractTemplateForTypeId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      contractTemplateName: json['contractTemplateName'] as String?,
      description: json['description'] as String?,
      contractTemplateFileName: json['contractTemplateFileName'] as String?,
      contractTemplateFileLocation:
          json['contractTemplateFileLocation'] as String?,
      contractTemplatePreviewFileLocation:
          json['contractTemplatePreviewFileLocation'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isPreviewFileAvailable: json['isPreviewFileAvailable'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedContractTemplateForTypeName:
          json['predefinedContractTemplateForTypeName'] as String?,
      vendorTypeName: json['vendorTypeName'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      propertyTypeName: json['propertyTypeName'] as String?,
      technicianTypeName: json['technicianTypeName'] as String?,
      equipmentTypeName: json['equipmentTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ContractTemplateModelToJson(
        ContractTemplateModel instance) =>
    <String, dynamic>{
      'contractTemplateId': instance.contractTemplateId,
      'predefinedContractTemplateForTypeId':
          instance.predefinedContractTemplateForTypeId,
      'artistTypeId': instance.artistTypeId,
      'technicianTypeId': instance.technicianTypeId,
      'equipmentTypeId': instance.equipmentTypeId,
      'vendorTypeId': instance.vendorTypeId,
      'propertyTypeId': instance.propertyTypeId,
      'contractTemplateName': instance.contractTemplateName,
      'description': instance.description,
      'contractTemplateFileName': instance.contractTemplateFileName,
      'contractTemplateFileLocation': instance.contractTemplateFileLocation,
      'contractTemplatePreviewFileLocation':
          instance.contractTemplatePreviewFileLocation,
      'companyId': instance.companyId,
      'isPreviewFileAvailable': instance.isPreviewFileAvailable,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedContractTemplateForTypeName':
          instance.predefinedContractTemplateForTypeName,
      'vendorTypeName': instance.vendorTypeName,
      'artistTypeName': instance.artistTypeName,
      'propertyTypeName': instance.propertyTypeName,
      'technicianTypeName': instance.technicianTypeName,
      'equipmentTypeName': instance.equipmentTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ContractTemplateModelReturnListModel
    _$ContractTemplateModelReturnListModelFromJson(Map<String, dynamic> json) =>
        ContractTemplateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      ContractTemplateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ContractTemplateModelReturnListModelToJson(
        ContractTemplateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ContractTemplateModelReturnModel _$ContractTemplateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ContractTemplateModelReturnModel(
      model: json['model'] == null
          ? null
          : ContractTemplateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ContractTemplateModelReturnModelToJson(
        ContractTemplateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

CoordinatorConfigurationModel _$CoordinatorConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    CoordinatorConfigurationModel(
      coordinatorServerPort: (json['coordinatorServerPort'] as num?)?.toInt(),
      coordinatorServerName: (json['coordinatorServerName'] as num?)?.toInt(),
      coordinatorLockTimeoutInSeconds:
          (json['coordinatorLockTimeoutInSeconds'] as num?)?.toInt(),
      retryQueueConnectionString: json['retryQueueConnectionString'] as String?,
      configNotificationQueueConnectionString:
          json['configNotificationQueueConnectionString'] as String?,
    );

Map<String, dynamic> _$CoordinatorConfigurationModelToJson(
        CoordinatorConfigurationModel instance) =>
    <String, dynamic>{
      'coordinatorServerPort': instance.coordinatorServerPort,
      'coordinatorServerName': instance.coordinatorServerName,
      'coordinatorLockTimeoutInSeconds':
          instance.coordinatorLockTimeoutInSeconds,
      'retryQueueConnectionString': instance.retryQueueConnectionString,
      'configNotificationQueueConnectionString':
          instance.configNotificationQueueConnectionString,
    };

CoordinatorConfigurationModelReturnModel
    _$CoordinatorConfigurationModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        CoordinatorConfigurationModelReturnModel(
          model: json['model'] == null
              ? null
              : CoordinatorConfigurationModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$CoordinatorConfigurationModelReturnModelToJson(
        CoordinatorConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

CountryModel _$CountryModelFromJson(Map<String, dynamic> json) => CountryModel(
      countryId: (json['countryId'] as num?)?.toInt(),
      countryName: json['countryName'] as String?,
      alternateCountryName1: json['alternateCountryName1'] as String?,
      alternateCountryName2: json['alternateCountryName2'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$CountryModelToJson(CountryModel instance) =>
    <String, dynamic>{
      'countryId': instance.countryId,
      'countryName': instance.countryName,
      'alternateCountryName1': instance.alternateCountryName1,
      'alternateCountryName2': instance.alternateCountryName2,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
    };

CountryModelReturnListModel _$CountryModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    CountryModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => CountryModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$CountryModelReturnListModelToJson(
        CountryModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

CrewInfoWhichHasMatchingPhoneOrEmailModel
    _$CrewInfoWhichHasMatchingPhoneOrEmailModelFromJson(
            Map<String, dynamic> json) =>
        CrewInfoWhichHasMatchingPhoneOrEmailModel(
          companyId: (json['companyId'] as num?)?.toInt(),
          companyName: json['companyName'] as String?,
          movieId: (json['movieId'] as num?)?.toInt(),
          predefinedMovieResourceTypeId:
              (json['predefinedMovieResourceTypeId'] as num?)?.toInt(),
          movieResourceId: (json['movieResourceId'] as num?)?.toInt(),
          movieResourceName: json['movieResourceName'] as String?,
        );

Map<String, dynamic> _$CrewInfoWhichHasMatchingPhoneOrEmailModelToJson(
        CrewInfoWhichHasMatchingPhoneOrEmailModel instance) =>
    <String, dynamic>{
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'movieId': instance.movieId,
      'predefinedMovieResourceTypeId': instance.predefinedMovieResourceTypeId,
      'movieResourceId': instance.movieResourceId,
      'movieResourceName': instance.movieResourceName,
    };

CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModel
    _$CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModelFromJson(
            Map<String, dynamic> json) =>
        CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModel(
          crewInfoWhichHasMatchingPhoneOrEmailModels:
              (json['crewInfoWhichHasMatchingPhoneOrEmailModels']
                          as List<dynamic>?)
                      ?.map((e) =>
                          CrewInfoWhichHasMatchingPhoneOrEmailModel.fromJson(
                              e as Map<String, dynamic>))
                      .toList() ??
                  [],
          fingerPrintModels: (json['fingerPrintModels'] as List<dynamic>?)
                  ?.map((e) =>
                      FingerPrintModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
        );

Map<String,
    dynamic> _$CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModelToJson(
        CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModel instance) =>
    <String, dynamic>{
      'crewInfoWhichHasMatchingPhoneOrEmailModels': instance
          .crewInfoWhichHasMatchingPhoneOrEmailModels
          ?.map((e) => e.toJson())
          .toList(),
      'fingerPrintModels':
          instance.fingerPrintModels?.map((e) => e.toJson()).toList(),
    };

CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModelReturnModel
    _$CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModelReturnModel(
          model: json['model'] == null
              ? null
              : CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModel
                  .fromJson(json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModelReturnModelToJson(
            CrewInfoWhichHasMatchingPhoneOrEmailWithBiometricInfoModelReturnModel
                instance) =>
        <String, dynamic>{
          'model': instance.model?.toJson(),
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

DefaultUserTypePermissionCreateModel
    _$DefaultUserTypePermissionCreateModelFromJson(Map<String, dynamic> json) =>
        DefaultUserTypePermissionCreateModel(
          predefinedUserTypeId: (json['predefinedUserTypeId'] as num?)?.toInt(),
          predefinedUserPermissionTypeId:
              (json['predefinedUserPermissionTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$DefaultUserTypePermissionCreateModelToJson(
        DefaultUserTypePermissionCreateModel instance) =>
    <String, dynamic>{
      'predefinedUserTypeId': instance.predefinedUserTypeId,
      'predefinedUserPermissionTypeId': instance.predefinedUserPermissionTypeId,
    };

DefaultUserTypePermissionModel _$DefaultUserTypePermissionModelFromJson(
        Map<String, dynamic> json) =>
    DefaultUserTypePermissionModel(
      defaultUserTypePermissionId:
          (json['defaultUserTypePermissionId'] as num?)?.toInt(),
      predefinedUserTypeId: (json['predefinedUserTypeId'] as num?)?.toInt(),
      predefinedUserPermissionTypeId:
          (json['predefinedUserPermissionTypeId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedUserTypeName: json['predefinedUserTypeName'] as String?,
      predefinedUserPermissionTypeName:
          json['predefinedUserPermissionTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$DefaultUserTypePermissionModelToJson(
        DefaultUserTypePermissionModel instance) =>
    <String, dynamic>{
      'defaultUserTypePermissionId': instance.defaultUserTypePermissionId,
      'predefinedUserTypeId': instance.predefinedUserTypeId,
      'predefinedUserPermissionTypeId': instance.predefinedUserPermissionTypeId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedUserTypeName': instance.predefinedUserTypeName,
      'predefinedUserPermissionTypeName':
          instance.predefinedUserPermissionTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

DefaultUserTypePermissionModelReturnListModel
    _$DefaultUserTypePermissionModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        DefaultUserTypePermissionModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => DefaultUserTypePermissionModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$DefaultUserTypePermissionModelReturnListModelToJson(
        DefaultUserTypePermissionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

DefaultUserTypePermissionModelReturnModel
    _$DefaultUserTypePermissionModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        DefaultUserTypePermissionModelReturnModel(
          model: json['model'] == null
              ? null
              : DefaultUserTypePermissionModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$DefaultUserTypePermissionModelReturnModelToJson(
        DefaultUserTypePermissionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

DefaultUserTypePermissionUpdateModel
    _$DefaultUserTypePermissionUpdateModelFromJson(Map<String, dynamic> json) =>
        DefaultUserTypePermissionUpdateModel(
          defaultUserTypePermissionId:
              (json['defaultUserTypePermissionId'] as num?)?.toInt(),
          predefinedUserTypeId: (json['predefinedUserTypeId'] as num?)?.toInt(),
          predefinedUserPermissionTypeId:
              (json['predefinedUserPermissionTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$DefaultUserTypePermissionUpdateModelToJson(
        DefaultUserTypePermissionUpdateModel instance) =>
    <String, dynamic>{
      'defaultUserTypePermissionId': instance.defaultUserTypePermissionId,
      'predefinedUserTypeId': instance.predefinedUserTypeId,
      'predefinedUserPermissionTypeId': instance.predefinedUserPermissionTypeId,
    };

DepartmentCreateModel _$DepartmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    DepartmentCreateModel(
      departmentCode: json['departmentCode'] as String?,
      predefinedDepartmentTypeId:
          (json['predefinedDepartmentTypeId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$DepartmentCreateModelToJson(
        DepartmentCreateModel instance) =>
    <String, dynamic>{
      'departmentCode': instance.departmentCode,
      'predefinedDepartmentTypeId': instance.predefinedDepartmentTypeId,
      'departmentName': instance.departmentName,
      'companyId': instance.companyId,
    };

DepartmentCreateWithMovieModel _$DepartmentCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    DepartmentCreateWithMovieModel(
      departmentCode: json['departmentCode'] as String?,
      predefinedDepartmentTypeId:
          (json['predefinedDepartmentTypeId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$DepartmentCreateWithMovieModelToJson(
        DepartmentCreateWithMovieModel instance) =>
    <String, dynamic>{
      'departmentCode': instance.departmentCode,
      'predefinedDepartmentTypeId': instance.predefinedDepartmentTypeId,
      'departmentName': instance.departmentName,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

DepartmentModel _$DepartmentModelFromJson(Map<String, dynamic> json) =>
    DepartmentModel(
      departmentId: (json['departmentId'] as num?)?.toInt(),
      departmentCode: json['departmentCode'] as String?,
      predefinedDepartmentTypeId:
          (json['predefinedDepartmentTypeId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedDepartmentTypeName:
          json['predefinedDepartmentTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$DepartmentModelToJson(DepartmentModel instance) =>
    <String, dynamic>{
      'departmentId': instance.departmentId,
      'departmentCode': instance.departmentCode,
      'predefinedDepartmentTypeId': instance.predefinedDepartmentTypeId,
      'departmentName': instance.departmentName,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedDepartmentTypeName': instance.predefinedDepartmentTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

DepartmentModelReturnListModel _$DepartmentModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    DepartmentModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => DepartmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$DepartmentModelReturnListModelToJson(
        DepartmentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

DepartmentModelReturnModel _$DepartmentModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    DepartmentModelReturnModel(
      model: json['model'] == null
          ? null
          : DepartmentModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$DepartmentModelReturnModelToJson(
        DepartmentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

DepartmentUpdateModel _$DepartmentUpdateModelFromJson(
        Map<String, dynamic> json) =>
    DepartmentUpdateModel(
      departmentId: (json['departmentId'] as num?)?.toInt(),
      departmentCode: json['departmentCode'] as String?,
      predefinedDepartmentTypeId:
          (json['predefinedDepartmentTypeId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$DepartmentUpdateModelToJson(
        DepartmentUpdateModel instance) =>
    <String, dynamic>{
      'departmentId': instance.departmentId,
      'departmentCode': instance.departmentCode,
      'predefinedDepartmentTypeId': instance.predefinedDepartmentTypeId,
      'departmentName': instance.departmentName,
      'companyId': instance.companyId,
    };

DigitalSignatureServerCreateModel _$DigitalSignatureServerCreateModelFromJson(
        Map<String, dynamic> json) =>
    DigitalSignatureServerCreateModel(
      digitalSignatureServerName: json['digitalSignatureServerName'] as String?,
      predefinedDigitalSignatureTypeId:
          (json['predefinedDigitalSignatureTypeId'] as num?)?.toInt(),
      authenticationKey: json['authenticationKey'] as String?,
      docusignClientId: json['docusignClientId'] as String?,
      docusignImpersonatedUserId: json['docusignImpersonatedUserId'] as String?,
      docusignAuthorizationEndpoint:
          json['docusignAuthorizationEndpoint'] as String?,
      docusignAuthServer: json['docusignAuthServer'] as String?,
      docusignPrivateKeyPath: json['docusignPrivateKeyPath'] as String?,
      docusignEmailSubject: json['docusignEmailSubject'] as String?,
      docusignBaseUrl: json['docusignBaseUrl'] as String?,
      docusignReturnUrl: json['docusignReturnUrl'] as String?,
      docusignPingUrl: json['docusignPingUrl'] as String?,
      docusignWebhookUrl: json['docusignWebhookUrl'] as String?,
    );

Map<String, dynamic> _$DigitalSignatureServerCreateModelToJson(
        DigitalSignatureServerCreateModel instance) =>
    <String, dynamic>{
      'digitalSignatureServerName': instance.digitalSignatureServerName,
      'predefinedDigitalSignatureTypeId':
          instance.predefinedDigitalSignatureTypeId,
      'authenticationKey': instance.authenticationKey,
      'docusignClientId': instance.docusignClientId,
      'docusignImpersonatedUserId': instance.docusignImpersonatedUserId,
      'docusignAuthorizationEndpoint': instance.docusignAuthorizationEndpoint,
      'docusignAuthServer': instance.docusignAuthServer,
      'docusignPrivateKeyPath': instance.docusignPrivateKeyPath,
      'docusignEmailSubject': instance.docusignEmailSubject,
      'docusignBaseUrl': instance.docusignBaseUrl,
      'docusignReturnUrl': instance.docusignReturnUrl,
      'docusignPingUrl': instance.docusignPingUrl,
      'docusignWebhookUrl': instance.docusignWebhookUrl,
    };

DigitalSignatureServerModel _$DigitalSignatureServerModelFromJson(
        Map<String, dynamic> json) =>
    DigitalSignatureServerModel(
      digitalSignatureServerId:
          (json['digitalSignatureServerId'] as num?)?.toInt(),
      digitalSignatureServerName: json['digitalSignatureServerName'] as String?,
      predefinedDigitalSignatureTypeId:
          (json['predefinedDigitalSignatureTypeId'] as num?)?.toInt(),
      authenticationKey: json['authenticationKey'] as String?,
      docusignClientId: json['docusignClientId'] as String?,
      docusignImpersonatedUserId: json['docusignImpersonatedUserId'] as String?,
      docusignAuthorizationEndpoint:
          json['docusignAuthorizationEndpoint'] as String?,
      docusignAuthServer: json['docusignAuthServer'] as String?,
      docusignPrivateKeyPath: json['docusignPrivateKeyPath'] as String?,
      docusignEmailSubject: json['docusignEmailSubject'] as String?,
      docusignBaseUrl: json['docusignBaseUrl'] as String?,
      docusignReturnUrl: json['docusignReturnUrl'] as String?,
      docusignPingUrl: json['docusignPingUrl'] as String?,
      docusignWebhookUrl: json['docusignWebhookUrl'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      enumTypeName: json['enumTypeName'] as String?,
      docusignClientName: json['docusignClientName'] as String?,
      docusignImpersonatedUserName:
          json['docusignImpersonatedUserName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$DigitalSignatureServerModelToJson(
        DigitalSignatureServerModel instance) =>
    <String, dynamic>{
      'digitalSignatureServerId': instance.digitalSignatureServerId,
      'digitalSignatureServerName': instance.digitalSignatureServerName,
      'predefinedDigitalSignatureTypeId':
          instance.predefinedDigitalSignatureTypeId,
      'authenticationKey': instance.authenticationKey,
      'docusignClientId': instance.docusignClientId,
      'docusignImpersonatedUserId': instance.docusignImpersonatedUserId,
      'docusignAuthorizationEndpoint': instance.docusignAuthorizationEndpoint,
      'docusignAuthServer': instance.docusignAuthServer,
      'docusignPrivateKeyPath': instance.docusignPrivateKeyPath,
      'docusignEmailSubject': instance.docusignEmailSubject,
      'docusignBaseUrl': instance.docusignBaseUrl,
      'docusignReturnUrl': instance.docusignReturnUrl,
      'docusignPingUrl': instance.docusignPingUrl,
      'docusignWebhookUrl': instance.docusignWebhookUrl,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'enumTypeName': instance.enumTypeName,
      'docusignClientName': instance.docusignClientName,
      'docusignImpersonatedUserName': instance.docusignImpersonatedUserName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

DigitalSignatureServerModelReturnListModel
    _$DigitalSignatureServerModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        DigitalSignatureServerModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => DigitalSignatureServerModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$DigitalSignatureServerModelReturnListModelToJson(
        DigitalSignatureServerModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

DigitalSignatureServerModelReturnModel
    _$DigitalSignatureServerModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        DigitalSignatureServerModelReturnModel(
          model: json['model'] == null
              ? null
              : DigitalSignatureServerModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$DigitalSignatureServerModelReturnModelToJson(
        DigitalSignatureServerModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

DigitalSignatureServerUpdateModel _$DigitalSignatureServerUpdateModelFromJson(
        Map<String, dynamic> json) =>
    DigitalSignatureServerUpdateModel(
      digitalSignatureServerId:
          (json['digitalSignatureServerId'] as num?)?.toInt(),
      digitalSignatureServerName: json['digitalSignatureServerName'] as String?,
      predefinedDigitalSignatureTypeId:
          (json['predefinedDigitalSignatureTypeId'] as num?)?.toInt(),
      authenticationKey: json['authenticationKey'] as String?,
      docusignClientId: json['docusignClientId'] as String?,
      docusignImpersonatedUserId: json['docusignImpersonatedUserId'] as String?,
      docusignAuthorizationEndpoint:
          json['docusignAuthorizationEndpoint'] as String?,
      docusignAuthServer: json['docusignAuthServer'] as String?,
      docusignPrivateKeyPath: json['docusignPrivateKeyPath'] as String?,
      docusignEmailSubject: json['docusignEmailSubject'] as String?,
      docusignBaseUrl: json['docusignBaseUrl'] as String?,
      docusignReturnUrl: json['docusignReturnUrl'] as String?,
      docusignPingUrl: json['docusignPingUrl'] as String?,
      docusignWebhookUrl: json['docusignWebhookUrl'] as String?,
    );

Map<String, dynamic> _$DigitalSignatureServerUpdateModelToJson(
        DigitalSignatureServerUpdateModel instance) =>
    <String, dynamic>{
      'digitalSignatureServerId': instance.digitalSignatureServerId,
      'digitalSignatureServerName': instance.digitalSignatureServerName,
      'predefinedDigitalSignatureTypeId':
          instance.predefinedDigitalSignatureTypeId,
      'authenticationKey': instance.authenticationKey,
      'docusignClientId': instance.docusignClientId,
      'docusignImpersonatedUserId': instance.docusignImpersonatedUserId,
      'docusignAuthorizationEndpoint': instance.docusignAuthorizationEndpoint,
      'docusignAuthServer': instance.docusignAuthServer,
      'docusignPrivateKeyPath': instance.docusignPrivateKeyPath,
      'docusignEmailSubject': instance.docusignEmailSubject,
      'docusignBaseUrl': instance.docusignBaseUrl,
      'docusignReturnUrl': instance.docusignReturnUrl,
      'docusignPingUrl': instance.docusignPingUrl,
      'docusignWebhookUrl': instance.docusignWebhookUrl,
    };

EnumGroupCreateModel _$EnumGroupCreateModelFromJson(
        Map<String, dynamic> json) =>
    EnumGroupCreateModel(
      enumGroupName: json['enumGroupName'] as String?,
    );

Map<String, dynamic> _$EnumGroupCreateModelToJson(
        EnumGroupCreateModel instance) =>
    <String, dynamic>{
      'enumGroupName': instance.enumGroupName,
    };

EnumGroupModel _$EnumGroupModelFromJson(Map<String, dynamic> json) =>
    EnumGroupModel(
      enumGroupId: (json['enumGroupId'] as num?)?.toInt(),
      enumGroupName: json['enumGroupName'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$EnumGroupModelToJson(EnumGroupModel instance) =>
    <String, dynamic>{
      'enumGroupId': instance.enumGroupId,
      'enumGroupName': instance.enumGroupName,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

EnumGroupModelReturnListModel _$EnumGroupModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    EnumGroupModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => EnumGroupModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EnumGroupModelReturnListModelToJson(
        EnumGroupModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EnumGroupModelReturnModel _$EnumGroupModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    EnumGroupModelReturnModel(
      model: json['model'] == null
          ? null
          : EnumGroupModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EnumGroupModelReturnModelToJson(
        EnumGroupModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EnumGroupUpdateModel _$EnumGroupUpdateModelFromJson(
        Map<String, dynamic> json) =>
    EnumGroupUpdateModel(
      enumGroupId: (json['enumGroupId'] as num?)?.toInt(),
      enumGroupName: json['enumGroupName'] as String?,
    );

Map<String, dynamic> _$EnumGroupUpdateModelToJson(
        EnumGroupUpdateModel instance) =>
    <String, dynamic>{
      'enumGroupId': instance.enumGroupId,
      'enumGroupName': instance.enumGroupName,
    };

EnumTypeCreateModel _$EnumTypeCreateModelFromJson(Map<String, dynamic> json) =>
    EnumTypeCreateModel(
      internalValue: (json['internalValue'] as num?)?.toInt(),
      enumGroupId: (json['enumGroupId'] as num?)?.toInt(),
      parentEnumTypeId: (json['parentEnumTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      enumTypeName: json['enumTypeName'] as String?,
    );

Map<String, dynamic> _$EnumTypeCreateModelToJson(
        EnumTypeCreateModel instance) =>
    <String, dynamic>{
      'internalValue': instance.internalValue,
      'enumGroupId': instance.enumGroupId,
      'parentEnumTypeId': instance.parentEnumTypeId,
      'position': instance.position,
      'enumTypeName': instance.enumTypeName,
    };

EnumTypeModel _$EnumTypeModelFromJson(Map<String, dynamic> json) =>
    EnumTypeModel(
      enumTypeId: (json['enumTypeId'] as num?)?.toInt(),
      internalValue: (json['internalValue'] as num?)?.toInt(),
      enumGroupId: (json['enumGroupId'] as num?)?.toInt(),
      parentEnumTypeId: (json['parentEnumTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      enumTypeName: json['enumTypeName'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      enumGroupName: json['enumGroupName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$EnumTypeModelToJson(EnumTypeModel instance) =>
    <String, dynamic>{
      'enumTypeId': instance.enumTypeId,
      'internalValue': instance.internalValue,
      'enumGroupId': instance.enumGroupId,
      'parentEnumTypeId': instance.parentEnumTypeId,
      'position': instance.position,
      'enumTypeName': instance.enumTypeName,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'enumGroupName': instance.enumGroupName,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

EnumTypeModelReturnListModel _$EnumTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    EnumTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => EnumTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EnumTypeModelReturnListModelToJson(
        EnumTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EnumTypeModelReturnModel _$EnumTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    EnumTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : EnumTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EnumTypeModelReturnModelToJson(
        EnumTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EnumTypeUpdateModel _$EnumTypeUpdateModelFromJson(Map<String, dynamic> json) =>
    EnumTypeUpdateModel(
      enumTypeId: (json['enumTypeId'] as num?)?.toInt(),
      internalValue: (json['internalValue'] as num?)?.toInt(),
      enumGroupId: (json['enumGroupId'] as num?)?.toInt(),
      parentEnumTypeId: (json['parentEnumTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      enumTypeName: json['enumTypeName'] as String?,
    );

Map<String, dynamic> _$EnumTypeUpdateModelToJson(
        EnumTypeUpdateModel instance) =>
    <String, dynamic>{
      'enumTypeId': instance.enumTypeId,
      'internalValue': instance.internalValue,
      'enumGroupId': instance.enumGroupId,
      'parentEnumTypeId': instance.parentEnumTypeId,
      'position': instance.position,
      'enumTypeName': instance.enumTypeName,
    };

EquipmentCreateModel _$EquipmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentCreateModel(
      equipmentCode: json['equipmentCode'] as String?,
      equipmentName: json['equipmentName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      specification: json['specification'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      position: (json['position'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isOwn: json['isOwn'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newEquipmentRates: (json['newEquipmentRates'] as List<dynamic>?)
              ?.map((e) =>
                  EquipmentRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$EquipmentCreateModelToJson(
        EquipmentCreateModel instance) =>
    <String, dynamic>{
      'equipmentCode': instance.equipmentCode,
      'equipmentName': instance.equipmentName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'equipmentTypeId': instance.equipmentTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'position': instance.position,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newEquipmentRates':
          instance.newEquipmentRates?.map((e) => e.toJson()).toList(),
    };

EquipmentCreateWithMovieModel _$EquipmentCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentCreateWithMovieModel(
      equipmentCode: json['equipmentCode'] as String?,
      equipmentName: json['equipmentName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      specification: json['specification'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      position: (json['position'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isOwn: json['isOwn'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newEquipmentRates: (json['newEquipmentRates'] as List<dynamic>?)
              ?.map((e) =>
                  EquipmentRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentCreateWithMovieModelToJson(
        EquipmentCreateWithMovieModel instance) =>
    <String, dynamic>{
      'equipmentCode': instance.equipmentCode,
      'equipmentName': instance.equipmentName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'equipmentTypeId': instance.equipmentTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'position': instance.position,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newEquipmentRates':
          instance.newEquipmentRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

EquipmentGroupTypeCreateModel _$EquipmentGroupTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentGroupTypeCreateModel(
      equipmentGroupTypeName: json['equipmentGroupTypeName'] as String?,
      predefinedEquipmentGroupTypeId:
          (json['predefinedEquipmentGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentGroupTypeCreateModelToJson(
        EquipmentGroupTypeCreateModel instance) =>
    <String, dynamic>{
      'equipmentGroupTypeName': instance.equipmentGroupTypeName,
      'predefinedEquipmentGroupTypeId': instance.predefinedEquipmentGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

EquipmentGroupTypeCreateWithMovieModel
    _$EquipmentGroupTypeCreateWithMovieModelFromJson(
            Map<String, dynamic> json) =>
        EquipmentGroupTypeCreateWithMovieModel(
          equipmentGroupTypeName: json['equipmentGroupTypeName'] as String?,
          predefinedEquipmentGroupTypeId:
              (json['predefinedEquipmentGroupTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$EquipmentGroupTypeCreateWithMovieModelToJson(
        EquipmentGroupTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'equipmentGroupTypeName': instance.equipmentGroupTypeName,
      'predefinedEquipmentGroupTypeId': instance.predefinedEquipmentGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

EquipmentGroupTypeModel _$EquipmentGroupTypeModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentGroupTypeModel(
      equipmentGroupTypeId: (json['equipmentGroupTypeId'] as num?)?.toInt(),
      equipmentGroupTypeName: json['equipmentGroupTypeName'] as String?,
      predefinedEquipmentGroupTypeId:
          (json['predefinedEquipmentGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedEquipmentGroupTypeName:
          json['predefinedEquipmentGroupTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingEquipmentTypes: (json['existingEquipmentTypes'] as List<dynamic>?)
              ?.map(
                  (e) => EquipmentTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$EquipmentGroupTypeModelToJson(
        EquipmentGroupTypeModel instance) =>
    <String, dynamic>{
      'equipmentGroupTypeId': instance.equipmentGroupTypeId,
      'equipmentGroupTypeName': instance.equipmentGroupTypeName,
      'predefinedEquipmentGroupTypeId': instance.predefinedEquipmentGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedEquipmentGroupTypeName':
          instance.predefinedEquipmentGroupTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingEquipmentTypes':
          instance.existingEquipmentTypes?.map((e) => e.toJson()).toList(),
    };

EquipmentGroupTypeModelReturnListModel
    _$EquipmentGroupTypeModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        EquipmentGroupTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => EquipmentGroupTypeModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$EquipmentGroupTypeModelReturnListModelToJson(
        EquipmentGroupTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentGroupTypeModelReturnModel _$EquipmentGroupTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentGroupTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : EquipmentGroupTypeModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentGroupTypeModelReturnModelToJson(
        EquipmentGroupTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentGroupTypeUpdateModel _$EquipmentGroupTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentGroupTypeUpdateModel(
      equipmentGroupTypeId: (json['equipmentGroupTypeId'] as num?)?.toInt(),
      equipmentGroupTypeName: json['equipmentGroupTypeName'] as String?,
      predefinedEquipmentGroupTypeId:
          (json['predefinedEquipmentGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentGroupTypeUpdateModelToJson(
        EquipmentGroupTypeUpdateModel instance) =>
    <String, dynamic>{
      'equipmentGroupTypeId': instance.equipmentGroupTypeId,
      'equipmentGroupTypeName': instance.equipmentGroupTypeName,
      'predefinedEquipmentGroupTypeId': instance.predefinedEquipmentGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

EquipmentModel _$EquipmentModelFromJson(Map<String, dynamic> json) =>
    EquipmentModel(
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      equipmentCode: json['equipmentCode'] as String?,
      equipmentName: json['equipmentName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      specification: json['specification'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      position: (json['position'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isOwn: json['isOwn'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      defaultPreProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPreProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultProductionPredefinedBudgetCategoryTypeId:
          (json['defaultProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPostProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPostProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      vendorName: json['vendorName'] as String?,
      equipmentTypeName: json['equipmentTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingEquipmentRates: (json['existingEquipmentRates'] as List<dynamic>?)
              ?.map(
                  (e) => EquipmentRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$EquipmentModelToJson(EquipmentModel instance) =>
    <String, dynamic>{
      'equipmentId': instance.equipmentId,
      'equipmentCode': instance.equipmentCode,
      'equipmentName': instance.equipmentName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'equipmentTypeId': instance.equipmentTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'position': instance.position,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'departmentName': instance.departmentName,
      'defaultPreProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPreProductionPredefinedBudgetCategoryTypeId,
      'defaultProductionPredefinedBudgetCategoryTypeId':
          instance.defaultProductionPredefinedBudgetCategoryTypeId,
      'defaultPostProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPostProductionPredefinedBudgetCategoryTypeId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'vendorName': instance.vendorName,
      'equipmentTypeName': instance.equipmentTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingEquipmentRates':
          instance.existingEquipmentRates?.map((e) => e.toJson()).toList(),
    };

EquipmentModelReturnListModel _$EquipmentModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => EquipmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentModelReturnListModelToJson(
        EquipmentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentModelReturnModel _$EquipmentModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentModelReturnModel(
      model: json['model'] == null
          ? null
          : EquipmentModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentModelReturnModelToJson(
        EquipmentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentRateCreateModel _$EquipmentRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentRateCreateModel(
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentRateCreateModelToJson(
        EquipmentRateCreateModel instance) =>
    <String, dynamic>{
      'equipmentId': instance.equipmentId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

EquipmentRateCreateWithMovieModel _$EquipmentRateCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentRateCreateWithMovieModel(
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentRateCreateWithMovieModelToJson(
        EquipmentRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'equipmentId': instance.equipmentId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

EquipmentRateModel _$EquipmentRateModelFromJson(Map<String, dynamic> json) =>
    EquipmentRateModel(
      equipmentRateId: (json['equipmentRateId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      equipmentName: json['equipmentName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      companyName: json['companyName'] as String?,
      equipmentCode: json['equipmentCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$EquipmentRateModelToJson(EquipmentRateModel instance) =>
    <String, dynamic>{
      'equipmentRateId': instance.equipmentRateId,
      'equipmentId': instance.equipmentId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'equipmentName': instance.equipmentName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'companyName': instance.companyName,
      'equipmentCode': instance.equipmentCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

EquipmentRateModelReturnListModel _$EquipmentRateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentRateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => EquipmentRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentRateModelReturnListModelToJson(
        EquipmentRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentRateModelReturnModel _$EquipmentRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentRateModelReturnModel(
      model: json['model'] == null
          ? null
          : EquipmentRateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentRateModelReturnModelToJson(
        EquipmentRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentRateUpdateModel _$EquipmentRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentRateUpdateModel(
      equipmentRateId: (json['equipmentRateId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentRateUpdateModelToJson(
        EquipmentRateUpdateModel instance) =>
    <String, dynamic>{
      'equipmentRateId': instance.equipmentRateId,
      'equipmentId': instance.equipmentId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

EquipmentTransactionCreateModel _$EquipmentTransactionCreateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTransactionCreateModel(
      transactionDate: json['transactionDate'] == null
          ? null
          : DateTime.parse(json['transactionDate'] as String),
      transactionUserId: (json['transactionUserId'] as num?)?.toInt(),
      transactionToPerson: json['transactionToPerson'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      predefinedEquipmentTransactionTypeId:
          (json['predefinedEquipmentTransactionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentTransactionCreateModelToJson(
        EquipmentTransactionCreateModel instance) =>
    <String, dynamic>{
      'transactionDate': instance.transactionDate?.toIso8601String(),
      'transactionUserId': instance.transactionUserId,
      'transactionToPerson': instance.transactionToPerson,
      'equipmentId': instance.equipmentId,
      'predefinedEquipmentTransactionTypeId':
          instance.predefinedEquipmentTransactionTypeId,
      'movieId': instance.movieId,
      'notes': instance.notes,
      'companyId': instance.companyId,
    };

EquipmentTransactionModel _$EquipmentTransactionModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTransactionModel(
      equipmentTransactionId: (json['equipmentTransactionId'] as num?)?.toInt(),
      transactionDate: json['transactionDate'] == null
          ? null
          : DateTime.parse(json['transactionDate'] as String),
      transactionUserId: (json['transactionUserId'] as num?)?.toInt(),
      transactionToPerson: json['transactionToPerson'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      predefinedEquipmentTransactionTypeId:
          (json['predefinedEquipmentTransactionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      transactionUserName: json['transactionUserName'] as String?,
      equipmentName: json['equipmentName'] as String?,
      predefinedEquipmentTransactionTypeName:
          json['predefinedEquipmentTransactionTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$EquipmentTransactionModelToJson(
        EquipmentTransactionModel instance) =>
    <String, dynamic>{
      'equipmentTransactionId': instance.equipmentTransactionId,
      'transactionDate': instance.transactionDate?.toIso8601String(),
      'transactionUserId': instance.transactionUserId,
      'transactionToPerson': instance.transactionToPerson,
      'equipmentId': instance.equipmentId,
      'predefinedEquipmentTransactionTypeId':
          instance.predefinedEquipmentTransactionTypeId,
      'movieId': instance.movieId,
      'notes': instance.notes,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'transactionUserName': instance.transactionUserName,
      'equipmentName': instance.equipmentName,
      'predefinedEquipmentTransactionTypeName':
          instance.predefinedEquipmentTransactionTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

EquipmentTransactionModelReturnListModel
    _$EquipmentTransactionModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        EquipmentTransactionModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => EquipmentTransactionModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$EquipmentTransactionModelReturnListModelToJson(
        EquipmentTransactionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentTransactionModelReturnModel
    _$EquipmentTransactionModelReturnModelFromJson(Map<String, dynamic> json) =>
        EquipmentTransactionModelReturnModel(
          model: json['model'] == null
              ? null
              : EquipmentTransactionModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$EquipmentTransactionModelReturnModelToJson(
        EquipmentTransactionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentTransactionUpdateModel _$EquipmentTransactionUpdateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTransactionUpdateModel(
      equipmentTransactionId: (json['equipmentTransactionId'] as num?)?.toInt(),
      transactionDate: json['transactionDate'] == null
          ? null
          : DateTime.parse(json['transactionDate'] as String),
      transactionUserId: (json['transactionUserId'] as num?)?.toInt(),
      transactionToPerson: json['transactionToPerson'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      predefinedEquipmentTransactionTypeId:
          (json['predefinedEquipmentTransactionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentTransactionUpdateModelToJson(
        EquipmentTransactionUpdateModel instance) =>
    <String, dynamic>{
      'equipmentTransactionId': instance.equipmentTransactionId,
      'transactionDate': instance.transactionDate?.toIso8601String(),
      'transactionUserId': instance.transactionUserId,
      'transactionToPerson': instance.transactionToPerson,
      'equipmentId': instance.equipmentId,
      'predefinedEquipmentTransactionTypeId':
          instance.predefinedEquipmentTransactionTypeId,
      'movieId': instance.movieId,
      'notes': instance.notes,
      'companyId': instance.companyId,
    };

EquipmentTypeCreateModel _$EquipmentTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeCreateModel(
      equipmentTypeName: json['equipmentTypeName'] as String?,
      predefinedEquipmentTypeId:
          (json['predefinedEquipmentTypeId'] as num?)?.toInt(),
      equipmentGroupTypeId: (json['equipmentGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newEquipmentTypeRates: (json['newEquipmentTypeRates'] as List<dynamic>?)
              ?.map((e) => EquipmentTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingEquipmentTypeRates:
          (json['existingEquipmentTypeRates'] as List<dynamic>?)
                  ?.map((e) => EquipmentTypeRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$EquipmentTypeCreateModelToJson(
        EquipmentTypeCreateModel instance) =>
    <String, dynamic>{
      'equipmentTypeName': instance.equipmentTypeName,
      'predefinedEquipmentTypeId': instance.predefinedEquipmentTypeId,
      'equipmentGroupTypeId': instance.equipmentGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newEquipmentTypeRates':
          instance.newEquipmentTypeRates?.map((e) => e.toJson()).toList(),
      'existingEquipmentTypeRates':
          instance.existingEquipmentTypeRates?.map((e) => e.toJson()).toList(),
    };

EquipmentTypeCreateWithMovieModel _$EquipmentTypeCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeCreateWithMovieModel(
      equipmentTypeName: json['equipmentTypeName'] as String?,
      predefinedEquipmentTypeId:
          (json['predefinedEquipmentTypeId'] as num?)?.toInt(),
      equipmentGroupTypeId: (json['equipmentGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newEquipmentTypeRates: (json['newEquipmentTypeRates'] as List<dynamic>?)
              ?.map((e) => EquipmentTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingEquipmentTypeRates:
          (json['existingEquipmentTypeRates'] as List<dynamic>?)
                  ?.map((e) => EquipmentTypeRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentTypeCreateWithMovieModelToJson(
        EquipmentTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'equipmentTypeName': instance.equipmentTypeName,
      'predefinedEquipmentTypeId': instance.predefinedEquipmentTypeId,
      'equipmentGroupTypeId': instance.equipmentGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newEquipmentTypeRates':
          instance.newEquipmentTypeRates?.map((e) => e.toJson()).toList(),
      'existingEquipmentTypeRates':
          instance.existingEquipmentTypeRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

EquipmentTypeModel _$EquipmentTypeModelFromJson(Map<String, dynamic> json) =>
    EquipmentTypeModel(
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      equipmentTypeName: json['equipmentTypeName'] as String?,
      predefinedEquipmentTypeId:
          (json['predefinedEquipmentTypeId'] as num?)?.toInt(),
      equipmentGroupTypeId: (json['equipmentGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      equipmentGroupTypeName: json['equipmentGroupTypeName'] as String?,
      predefinedEquipmentTypeName:
          json['predefinedEquipmentTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingEquipmentTypeRates: (json['existingEquipmentTypeRates']
                  as List<dynamic>?)
              ?.map((e) =>
                  EquipmentTypeRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$EquipmentTypeModelToJson(EquipmentTypeModel instance) =>
    <String, dynamic>{
      'equipmentTypeId': instance.equipmentTypeId,
      'equipmentTypeName': instance.equipmentTypeName,
      'predefinedEquipmentTypeId': instance.predefinedEquipmentTypeId,
      'equipmentGroupTypeId': instance.equipmentGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'equipmentGroupTypeName': instance.equipmentGroupTypeName,
      'predefinedEquipmentTypeName': instance.predefinedEquipmentTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingEquipmentTypeRates':
          instance.existingEquipmentTypeRates?.map((e) => e.toJson()).toList(),
    };

EquipmentTypeModelReturnListModel _$EquipmentTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => EquipmentTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentTypeModelReturnListModelToJson(
        EquipmentTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentTypeModelReturnModel _$EquipmentTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : EquipmentTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentTypeModelReturnModelToJson(
        EquipmentTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentTypeRateCreateModel _$EquipmentTypeRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeRateCreateModel(
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentTypeRateCreateModelToJson(
        EquipmentTypeRateCreateModel instance) =>
    <String, dynamic>{
      'equipmentTypeId': instance.equipmentTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

EquipmentTypeRateCreateWithMovieModel
    _$EquipmentTypeRateCreateWithMovieModelFromJson(
            Map<String, dynamic> json) =>
        EquipmentTypeRateCreateWithMovieModel(
          equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
          predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
          rate: (json['rate'] as num?)?.toDouble(),
          predefinedCallSheetTypeId:
              (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$EquipmentTypeRateCreateWithMovieModelToJson(
        EquipmentTypeRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'equipmentTypeId': instance.equipmentTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

EquipmentTypeRateModel _$EquipmentTypeRateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeRateModel(
      equipmentTypeRateId: (json['equipmentTypeRateId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      equipmentTypeName: json['equipmentTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$EquipmentTypeRateModelToJson(
        EquipmentTypeRateModel instance) =>
    <String, dynamic>{
      'equipmentTypeRateId': instance.equipmentTypeRateId,
      'equipmentTypeId': instance.equipmentTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'equipmentTypeName': instance.equipmentTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

EquipmentTypeRateModelReturnListModel
    _$EquipmentTypeRateModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        EquipmentTypeRateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => EquipmentTypeRateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$EquipmentTypeRateModelReturnListModelToJson(
        EquipmentTypeRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentTypeRateModelReturnModel _$EquipmentTypeRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeRateModelReturnModel(
      model: json['model'] == null
          ? null
          : EquipmentTypeRateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentTypeRateModelReturnModelToJson(
        EquipmentTypeRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

EquipmentTypeRateUpdateModel _$EquipmentTypeRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeRateUpdateModel(
      equipmentTypeRateId: (json['equipmentTypeRateId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$EquipmentTypeRateUpdateModelToJson(
        EquipmentTypeRateUpdateModel instance) =>
    <String, dynamic>{
      'equipmentTypeRateId': instance.equipmentTypeRateId,
      'equipmentTypeId': instance.equipmentTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

EquipmentTypeUpdateModel _$EquipmentTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentTypeUpdateModel(
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      equipmentTypeName: json['equipmentTypeName'] as String?,
      predefinedEquipmentTypeId:
          (json['predefinedEquipmentTypeId'] as num?)?.toInt(),
      equipmentGroupTypeId: (json['equipmentGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newEquipmentTypeRates: (json['newEquipmentTypeRates'] as List<dynamic>?)
              ?.map((e) => EquipmentTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingEquipmentTypeRates:
          (json['existingEquipmentTypeRates'] as List<dynamic>?)
                  ?.map((e) => EquipmentTypeRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$EquipmentTypeUpdateModelToJson(
        EquipmentTypeUpdateModel instance) =>
    <String, dynamic>{
      'equipmentTypeId': instance.equipmentTypeId,
      'equipmentTypeName': instance.equipmentTypeName,
      'predefinedEquipmentTypeId': instance.predefinedEquipmentTypeId,
      'equipmentGroupTypeId': instance.equipmentGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newEquipmentTypeRates':
          instance.newEquipmentTypeRates?.map((e) => e.toJson()).toList(),
      'existingEquipmentTypeRates':
          instance.existingEquipmentTypeRates?.map((e) => e.toJson()).toList(),
    };

EquipmentUpdateModel _$EquipmentUpdateModelFromJson(
        Map<String, dynamic> json) =>
    EquipmentUpdateModel(
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      equipmentCode: json['equipmentCode'] as String?,
      equipmentName: json['equipmentName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      specification: json['specification'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      position: (json['position'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isOwn: json['isOwn'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newEquipmentRates: (json['newEquipmentRates'] as List<dynamic>?)
              ?.map((e) =>
                  EquipmentRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingEquipmentRates: (json['existingEquipmentRates'] as List<dynamic>?)
              ?.map((e) =>
                  EquipmentRateUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$EquipmentUpdateModelToJson(
        EquipmentUpdateModel instance) =>
    <String, dynamic>{
      'equipmentId': instance.equipmentId,
      'equipmentCode': instance.equipmentCode,
      'equipmentName': instance.equipmentName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'equipmentTypeId': instance.equipmentTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'position': instance.position,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newEquipmentRates':
          instance.newEquipmentRates?.map((e) => e.toJson()).toList(),
      'existingEquipmentRates':
          instance.existingEquipmentRates?.map((e) => e.toJson()).toList(),
    };

ExpenseTypeCreateModel _$ExpenseTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    ExpenseTypeCreateModel(
      parentExpenseTypeId: (json['parentExpenseTypeId'] as num?)?.toInt(),
      predefinedExpenseTypeId:
          (json['predefinedExpenseTypeId'] as num?)?.toInt(),
      expenseTypeName: json['expenseTypeName'] as String?,
      description: json['description'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newEquipmentTypeRates: (json['newEquipmentTypeRates'] as List<dynamic>?)
              ?.map((e) => EquipmentTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ExpenseTypeCreateModelToJson(
        ExpenseTypeCreateModel instance) =>
    <String, dynamic>{
      'parentExpenseTypeId': instance.parentExpenseTypeId,
      'predefinedExpenseTypeId': instance.predefinedExpenseTypeId,
      'expenseTypeName': instance.expenseTypeName,
      'description': instance.description,
      'companyId': instance.companyId,
      'newEquipmentTypeRates':
          instance.newEquipmentTypeRates?.map((e) => e.toJson()).toList(),
    };

ExpenseTypeModel _$ExpenseTypeModelFromJson(Map<String, dynamic> json) =>
    ExpenseTypeModel(
      expenseTypeId: (json['expenseTypeId'] as num?)?.toInt(),
      parentExpenseTypeId: (json['parentExpenseTypeId'] as num?)?.toInt(),
      predefinedExpenseTypeId:
          (json['predefinedExpenseTypeId'] as num?)?.toInt(),
      expenseTypeName: json['expenseTypeName'] as String?,
      description: json['description'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedExpenseTypeName: json['predefinedExpenseTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ExpenseTypeModelToJson(ExpenseTypeModel instance) =>
    <String, dynamic>{
      'expenseTypeId': instance.expenseTypeId,
      'parentExpenseTypeId': instance.parentExpenseTypeId,
      'predefinedExpenseTypeId': instance.predefinedExpenseTypeId,
      'expenseTypeName': instance.expenseTypeName,
      'description': instance.description,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedExpenseTypeName': instance.predefinedExpenseTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ExpenseTypeModelReturnListModel _$ExpenseTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ExpenseTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => ExpenseTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ExpenseTypeModelReturnListModelToJson(
        ExpenseTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ExpenseTypeModelReturnModel _$ExpenseTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ExpenseTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : ExpenseTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ExpenseTypeModelReturnModelToJson(
        ExpenseTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ExpenseTypeUpdateModel _$ExpenseTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ExpenseTypeUpdateModel(
      expenseTypeId: (json['expenseTypeId'] as num?)?.toInt(),
      parentExpenseTypeId: (json['parentExpenseTypeId'] as num?)?.toInt(),
      predefinedExpenseTypeId:
          (json['predefinedExpenseTypeId'] as num?)?.toInt(),
      expenseTypeName: json['expenseTypeName'] as String?,
      description: json['description'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newEquipmentTypeRates: (json['newEquipmentTypeRates'] as List<dynamic>?)
              ?.map((e) => EquipmentTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingEquipmentTypeRates:
          (json['existingEquipmentTypeRates'] as List<dynamic>?)
                  ?.map((e) => EquipmentTypeRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$ExpenseTypeUpdateModelToJson(
        ExpenseTypeUpdateModel instance) =>
    <String, dynamic>{
      'expenseTypeId': instance.expenseTypeId,
      'parentExpenseTypeId': instance.parentExpenseTypeId,
      'predefinedExpenseTypeId': instance.predefinedExpenseTypeId,
      'expenseTypeName': instance.expenseTypeName,
      'description': instance.description,
      'companyId': instance.companyId,
      'newEquipmentTypeRates':
          instance.newEquipmentTypeRates?.map((e) => e.toJson()).toList(),
      'existingEquipmentTypeRates':
          instance.existingEquipmentTypeRates?.map((e) => e.toJson()).toList(),
    };

ExternalLoginCallBackModel _$ExternalLoginCallBackModelFromJson(
        Map<String, dynamic> json) =>
    ExternalLoginCallBackModel(
      provider: json['provider'] as String?,
      callBackUri: json['callBackUri'] as String?,
      singleSignOnIdentifier: json['singleSignOnIdentifier'] as String?,
      code: json['code'] as String?,
      idToken: json['id_token'] as String?,
      accessToken: json['access_token'] as String?,
      error: json['error'] as String?,
      state: json['state'] as String?,
    );

Map<String, dynamic> _$ExternalLoginCallBackModelToJson(
        ExternalLoginCallBackModel instance) =>
    <String, dynamic>{
      'provider': instance.provider,
      'callBackUri': instance.callBackUri,
      'singleSignOnIdentifier': instance.singleSignOnIdentifier,
      'code': instance.code,
      'id_token': instance.idToken,
      'access_token': instance.accessToken,
      'error': instance.error,
      'state': instance.state,
    };

FileAttachmentCreateWithFileFormModel
    _$FileAttachmentCreateWithFileFormModelFromJson(
            Map<String, dynamic> json) =>
        FileAttachmentCreateWithFileFormModel(
          fileAttachmentFolderId:
              (json['fileAttachmentFolderId'] as num?)?.toInt(),
          fileAttachmentFileName: json['fileAttachmentFileName'] as String?,
          fileAttachmentFileLocation:
              json['fileAttachmentFileLocation'] as String?,
          fileAttachmentPreviewFileLocation:
              json['fileAttachmentPreviewFileLocation'] as String?,
          fileAttachmentHasPreview: json['fileAttachmentHasPreview'] as bool?,
          fileAttachmentFileSizeInBytes:
              (json['fileAttachmentFileSizeInBytes'] as num?)?.toInt(),
          description: json['description'] as String?,
          movieId: (json['movieId'] as num?)?.toInt(),
          userId: (json['userId'] as num?)?.toInt(),
          artistId: (json['artistId'] as num?)?.toInt(),
          vendorId: (json['vendorId'] as num?)?.toInt(),
          equipmentId: (json['equipmentId'] as num?)?.toInt(),
          propertyId: (json['propertyId'] as num?)?.toInt(),
          technicianId: (json['technicianId'] as num?)?.toInt(),
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
          movieLocationCandidateId:
              (json['movieLocationCandidateId'] as num?)?.toInt(),
          movieCommitmentTaskId:
              (json['movieCommitmentTaskId'] as num?)?.toInt(),
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
          movieSceneEquipmentId:
              (json['movieSceneEquipmentId'] as num?)?.toInt(),
          movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
          movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
          movieSceneTechnicianId:
              (json['movieSceneTechnicianId'] as num?)?.toInt(),
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieShootDayArtistId:
              (json['movieShootDayArtistId'] as num?)?.toInt(),
          movieShootDayBudgetId:
              (json['movieShootDayBudgetId'] as num?)?.toInt(),
          movieShootDayEquipmentId:
              (json['movieShootDayEquipmentId'] as num?)?.toInt(),
          movieShootDayPropertyId:
              (json['movieShootDayPropertyId'] as num?)?.toInt(),
          movieShootDayExpenseId:
              (json['movieShootDayExpenseId'] as num?)?.toInt(),
          movieShootDayRequirementId:
              (json['movieShootDayRequirementId'] as num?)?.toInt(),
          movieShootDayVendorId:
              (json['movieShootDayVendorId'] as num?)?.toInt(),
          movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
          movieShootDayTechnicianId:
              (json['movieShootDayTechnicianId'] as num?)?.toInt(),
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
          movieUserId: (json['movieUserId'] as num?)?.toInt(),
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          uploadedFile: json['uploadedFile'] as String?,
        );

Map<String, dynamic> _$FileAttachmentCreateWithFileFormModelToJson(
        FileAttachmentCreateWithFileFormModel instance) =>
    <String, dynamic>{
      'fileAttachmentFolderId': instance.fileAttachmentFolderId,
      'fileAttachmentFileName': instance.fileAttachmentFileName,
      'fileAttachmentFileLocation': instance.fileAttachmentFileLocation,
      'fileAttachmentPreviewFileLocation':
          instance.fileAttachmentPreviewFileLocation,
      'fileAttachmentHasPreview': instance.fileAttachmentHasPreview,
      'fileAttachmentFileSizeInBytes': instance.fileAttachmentFileSizeInBytes,
      'description': instance.description,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'artistId': instance.artistId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'technicianId': instance.technicianId,
      'movieArtistId': instance.movieArtistId,
      'contractId': instance.contractId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieUnitId': instance.movieUnitId,
      'movieUserId': instance.movieUserId,
      'movieVendorId': instance.movieVendorId,
      'companyId': instance.companyId,
      'uploadedFile': instance.uploadedFile,
    };

FileAttachmentFolderCreateModel _$FileAttachmentFolderCreateModelFromJson(
        Map<String, dynamic> json) =>
    FileAttachmentFolderCreateModel(
      fileAttachmentFolderName: json['fileAttachmentFolderName'] as String?,
      parentFileAttachmentFolderId:
          (json['parentFileAttachmentFolderId'] as num?)?.toInt(),
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$FileAttachmentFolderCreateModelToJson(
        FileAttachmentFolderCreateModel instance) =>
    <String, dynamic>{
      'fileAttachmentFolderName': instance.fileAttachmentFolderName,
      'parentFileAttachmentFolderId': instance.parentFileAttachmentFolderId,
      'description': instance.description,
      'movieId': instance.movieId,
      'departmentId': instance.departmentId,
      'userId': instance.userId,
      'companyId': instance.companyId,
    };

FileAttachmentFolderModel _$FileAttachmentFolderModelFromJson(
        Map<String, dynamic> json) =>
    FileAttachmentFolderModel(
      fileAttachmentFolderId: (json['fileAttachmentFolderId'] as num?)?.toInt(),
      fileAttachmentFolderName: json['fileAttachmentFolderName'] as String?,
      parentFileAttachmentFolderId:
          (json['parentFileAttachmentFolderId'] as num?)?.toInt(),
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      parentFileAttachmentFolderName:
          json['parentFileAttachmentFolderName'] as String?,
      userName: json['userName'] as String?,
      departmentName: json['departmentName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$FileAttachmentFolderModelToJson(
        FileAttachmentFolderModel instance) =>
    <String, dynamic>{
      'fileAttachmentFolderId': instance.fileAttachmentFolderId,
      'fileAttachmentFolderName': instance.fileAttachmentFolderName,
      'parentFileAttachmentFolderId': instance.parentFileAttachmentFolderId,
      'description': instance.description,
      'movieId': instance.movieId,
      'departmentId': instance.departmentId,
      'userId': instance.userId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'parentFileAttachmentFolderName': instance.parentFileAttachmentFolderName,
      'userName': instance.userName,
      'departmentName': instance.departmentName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

FileAttachmentFolderModelReturnListModel
    _$FileAttachmentFolderModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        FileAttachmentFolderModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => FileAttachmentFolderModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$FileAttachmentFolderModelReturnListModelToJson(
        FileAttachmentFolderModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

FileAttachmentFolderModelReturnModel
    _$FileAttachmentFolderModelReturnModelFromJson(Map<String, dynamic> json) =>
        FileAttachmentFolderModelReturnModel(
          model: json['model'] == null
              ? null
              : FileAttachmentFolderModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$FileAttachmentFolderModelReturnModelToJson(
        FileAttachmentFolderModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

FileAttachmentFolderUpdateModel _$FileAttachmentFolderUpdateModelFromJson(
        Map<String, dynamic> json) =>
    FileAttachmentFolderUpdateModel(
      fileAttachmentFolderId: (json['fileAttachmentFolderId'] as num?)?.toInt(),
      fileAttachmentFolderName: json['fileAttachmentFolderName'] as String?,
      parentFileAttachmentFolderId:
          (json['parentFileAttachmentFolderId'] as num?)?.toInt(),
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$FileAttachmentFolderUpdateModelToJson(
        FileAttachmentFolderUpdateModel instance) =>
    <String, dynamic>{
      'fileAttachmentFolderId': instance.fileAttachmentFolderId,
      'fileAttachmentFolderName': instance.fileAttachmentFolderName,
      'parentFileAttachmentFolderId': instance.parentFileAttachmentFolderId,
      'description': instance.description,
      'movieId': instance.movieId,
      'departmentId': instance.departmentId,
      'userId': instance.userId,
      'companyId': instance.companyId,
    };

FileAttachmentModel _$FileAttachmentModelFromJson(Map<String, dynamic> json) =>
    FileAttachmentModel(
      fileAttachmentId: (json['fileAttachmentId'] as num?)?.toInt(),
      fileAttachmentFolderId: (json['fileAttachmentFolderId'] as num?)?.toInt(),
      fileAttachmentFileName: json['fileAttachmentFileName'] as String?,
      fileAttachmentFileLocation: json['fileAttachmentFileLocation'] as String?,
      fileAttachmentPreviewFileLocation:
          json['fileAttachmentPreviewFileLocation'] as String?,
      fileAttachmentHasPreview: json['fileAttachmentHasPreview'] as bool?,
      fileAttachmentFileSizeInBytes:
          (json['fileAttachmentFileSizeInBytes'] as num?)?.toInt(),
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      movieCommitmentTaskId: (json['movieCommitmentTaskId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
      movieSceneEquipmentId: (json['movieSceneEquipmentId'] as num?)?.toInt(),
      movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
      movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
      movieSceneTechnicianId: (json['movieSceneTechnicianId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieShootDayRequirementId:
          (json['movieShootDayRequirementId'] as num?)?.toInt(),
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$FileAttachmentModelToJson(
        FileAttachmentModel instance) =>
    <String, dynamic>{
      'fileAttachmentId': instance.fileAttachmentId,
      'fileAttachmentFolderId': instance.fileAttachmentFolderId,
      'fileAttachmentFileName': instance.fileAttachmentFileName,
      'fileAttachmentFileLocation': instance.fileAttachmentFileLocation,
      'fileAttachmentPreviewFileLocation':
          instance.fileAttachmentPreviewFileLocation,
      'fileAttachmentHasPreview': instance.fileAttachmentHasPreview,
      'fileAttachmentFileSizeInBytes': instance.fileAttachmentFileSizeInBytes,
      'description': instance.description,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'artistId': instance.artistId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'technicianId': instance.technicianId,
      'movieArtistId': instance.movieArtistId,
      'contractId': instance.contractId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieUnitId': instance.movieUnitId,
      'movieUserId': instance.movieUserId,
      'movieVendorId': instance.movieVendorId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

FileAttachmentModelReturnListModel _$FileAttachmentModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    FileAttachmentModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  FileAttachmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$FileAttachmentModelReturnListModelToJson(
        FileAttachmentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

FileAttachmentModelReturnModel _$FileAttachmentModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    FileAttachmentModelReturnModel(
      model: json['model'] == null
          ? null
          : FileAttachmentModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$FileAttachmentModelReturnModelToJson(
        FileAttachmentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

FileAttachmentUpdateModel _$FileAttachmentUpdateModelFromJson(
        Map<String, dynamic> json) =>
    FileAttachmentUpdateModel(
      fileAttachmentId: (json['fileAttachmentId'] as num?)?.toInt(),
      fileAttachmentFolderId: (json['fileAttachmentFolderId'] as num?)?.toInt(),
      fileAttachmentFileName: json['fileAttachmentFileName'] as String?,
      fileAttachmentFileLocation: json['fileAttachmentFileLocation'] as String?,
      fileAttachmentPreviewFileLocation:
          json['fileAttachmentPreviewFileLocation'] as String?,
      fileAttachmentHasPreview: json['fileAttachmentHasPreview'] as bool?,
      fileAttachmentFileSizeInBytes:
          (json['fileAttachmentFileSizeInBytes'] as num?)?.toInt(),
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      movieCommitmentTaskId: (json['movieCommitmentTaskId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
      movieSceneEquipmentId: (json['movieSceneEquipmentId'] as num?)?.toInt(),
      movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
      movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
      movieSceneTechnicianId: (json['movieSceneTechnicianId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieShootDayRequirementId:
          (json['movieShootDayRequirementId'] as num?)?.toInt(),
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$FileAttachmentUpdateModelToJson(
        FileAttachmentUpdateModel instance) =>
    <String, dynamic>{
      'fileAttachmentId': instance.fileAttachmentId,
      'fileAttachmentFolderId': instance.fileAttachmentFolderId,
      'fileAttachmentFileName': instance.fileAttachmentFileName,
      'fileAttachmentFileLocation': instance.fileAttachmentFileLocation,
      'fileAttachmentPreviewFileLocation':
          instance.fileAttachmentPreviewFileLocation,
      'fileAttachmentHasPreview': instance.fileAttachmentHasPreview,
      'fileAttachmentFileSizeInBytes': instance.fileAttachmentFileSizeInBytes,
      'description': instance.description,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'artistId': instance.artistId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'technicianId': instance.technicianId,
      'movieArtistId': instance.movieArtistId,
      'contractId': instance.contractId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieUnitId': instance.movieUnitId,
      'movieUserId': instance.movieUserId,
      'movieVendorId': instance.movieVendorId,
      'companyId': instance.companyId,
    };

FingerPrintModel _$FingerPrintModelFromJson(Map<String, dynamic> json) =>
    FingerPrintModel(
      companyId: (json['companyId'] as num?)?.toInt(),
      resourceBiometricRecordId:
          (json['resourceBiometricRecordId'] as num?)?.toInt(),
      isFingerPrintAvailable: json['isFingerPrintAvailable'] as bool?,
    );

Map<String, dynamic> _$FingerPrintModelToJson(FingerPrintModel instance) =>
    <String, dynamic>{
      'companyId': instance.companyId,
      'resourceBiometricRecordId': instance.resourceBiometricRecordId,
      'isFingerPrintAvailable': instance.isFingerPrintAvailable,
    };

ForgotPasswordModel _$ForgotPasswordModelFromJson(Map<String, dynamic> json) =>
    ForgotPasswordModel(
      userLogin: json['userLogin'] as String?,
      token: json['token'] as String?,
      password: json['password'] as String?,
      retypedPassword: json['retypedPassword'] as String?,
    );

Map<String, dynamic> _$ForgotPasswordModelToJson(
        ForgotPasswordModel instance) =>
    <String, dynamic>{
      'userLogin': instance.userLogin,
      'token': instance.token,
      'password': instance.password,
      'retypedPassword': instance.retypedPassword,
    };

ForwardChatMessagesToChatsModel _$ForwardChatMessagesToChatsModelFromJson(
        Map<String, dynamic> json) =>
    ForwardChatMessagesToChatsModel(
      chatMessageIds: (json['chatMessageIds'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
      chatIds: (json['chatIds'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
    );

Map<String, dynamic> _$ForwardChatMessagesToChatsModelToJson(
        ForwardChatMessagesToChatsModel instance) =>
    <String, dynamic>{
      'chatMessageIds': instance.chatMessageIds,
      'chatIds': instance.chatIds,
    };

GenreCreateModel _$GenreCreateModelFromJson(Map<String, dynamic> json) =>
    GenreCreateModel(
      genreName: json['genreName'] as String?,
      predefinedGenreTypeId: (json['predefinedGenreTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$GenreCreateModelToJson(GenreCreateModel instance) =>
    <String, dynamic>{
      'genreName': instance.genreName,
      'predefinedGenreTypeId': instance.predefinedGenreTypeId,
      'companyId': instance.companyId,
    };

GenreModel _$GenreModelFromJson(Map<String, dynamic> json) => GenreModel(
      genreId: (json['genreId'] as num?)?.toInt(),
      genreName: json['genreName'] as String?,
      predefinedGenreTypeId: (json['predefinedGenreTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedGenreTypeName: json['predefinedGenreTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$GenreModelToJson(GenreModel instance) =>
    <String, dynamic>{
      'genreId': instance.genreId,
      'genreName': instance.genreName,
      'predefinedGenreTypeId': instance.predefinedGenreTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedGenreTypeName': instance.predefinedGenreTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

GenreModelReturnListModel _$GenreModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    GenreModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => GenreModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$GenreModelReturnListModelToJson(
        GenreModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

GenreModelReturnModel _$GenreModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    GenreModelReturnModel(
      model: json['model'] == null
          ? null
          : GenreModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$GenreModelReturnModelToJson(
        GenreModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

GenreUpdateModel _$GenreUpdateModelFromJson(Map<String, dynamic> json) =>
    GenreUpdateModel(
      genreId: (json['genreId'] as num?)?.toInt(),
      genreName: json['genreName'] as String?,
      predefinedGenreTypeId: (json['predefinedGenreTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$GenreUpdateModelToJson(GenreUpdateModel instance) =>
    <String, dynamic>{
      'genreId': instance.genreId,
      'genreName': instance.genreName,
      'predefinedGenreTypeId': instance.predefinedGenreTypeId,
      'companyId': instance.companyId,
    };

GlobalConfigurationModel _$GlobalConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    GlobalConfigurationModel(
      isUserLoggedIn: json['isUserLoggedIn'] as bool?,
      loginOptionModel: json['loginOptionModel'] == null
          ? null
          : LoginOptionModel.fromJson(
              json['loginOptionModel'] as Map<String, dynamic>),
      appVersion: json['appVersion'] as String?,
      dbVersion: json['dbVersion'] as String?,
      appReleaseDate: json['appReleaseDate'] == null
          ? null
          : DateTime.parse(json['appReleaseDate'] as String),
      helpUrl: json['helpUrl'] as String?,
      onboardingCodes: (json['onboardingCodes'] as List<dynamic>?)
              ?.map((e) => TextWithValue.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      useMP: json['useMP'] as bool?,
      enableNewFeatures: json['enableNewFeatures'] as bool?,
      showAllLinksWithoutPermissionCheck:
          json['showAllLinksWithoutPermissionCheck'] as bool?,
    );

Map<String, dynamic> _$GlobalConfigurationModelToJson(
        GlobalConfigurationModel instance) =>
    <String, dynamic>{
      'isUserLoggedIn': instance.isUserLoggedIn,
      'loginOptionModel': instance.loginOptionModel?.toJson(),
      'appVersion': instance.appVersion,
      'dbVersion': instance.dbVersion,
      'appReleaseDate': instance.appReleaseDate?.toIso8601String(),
      'helpUrl': instance.helpUrl,
      'onboardingCodes':
          instance.onboardingCodes?.map((e) => e.toJson()).toList(),
      'useMP': instance.useMP,
      'enableNewFeatures': instance.enableNewFeatures,
      'showAllLinksWithoutPermissionCheck':
          instance.showAllLinksWithoutPermissionCheck,
    };

GlobalConfigurationModelReturnModel
    _$GlobalConfigurationModelReturnModelFromJson(Map<String, dynamic> json) =>
        GlobalConfigurationModelReturnModel(
          model: json['model'] == null
              ? null
              : GlobalConfigurationModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$GlobalConfigurationModelReturnModelToJson(
        GlobalConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

GlobalSettingModel _$GlobalSettingModelFromJson(Map<String, dynamic> json) =>
    GlobalSettingModel(
      html5DocumentViewerPath: json['html5DocumentViewerPath'] as String?,
      html5SupportedDocTypes: (json['html5SupportedDocTypes'] as List<dynamic>?)
              ?.map((e) => e as String)
              .toList() ??
          [],
      mobileTheme: json['mobileTheme'] as String?,
      mobileTitle: json['mobileTitle'] as String?,
      mobileCopyright: json['mobileCopyright'] as String?,
      desktopTheme: json['desktopTheme'] as String?,
      desktopCourtUrl: json['desktopCourtUrl'] as String?,
      desktopTitle: json['desktopTitle'] as String?,
      desktopCopyright: json['desktopCopyright'] as String?,
      applicationVersion: json['applicationVersion'] as String?,
      databaseVersion: json['databaseVersion'] as String?,
      enableNewFeatures: json['enableNewFeatures'] as bool?,
      enableFrontPageDisplayMessage:
          json['enableFrontPageDisplayMessage'] as bool?,
      frontPageDisplayMessage: json['frontPageDisplayMessage'] as String?,
      frontPageDisplayMessageTitle:
          json['frontPageDisplayMessageTitle'] as String?,
      frontPageDisplayMessageDisplayTime:
          (json['frontPageDisplayMessageDisplayTime'] as num?)?.toInt(),
      frontPageDisplayMessageUntilDate:
          json['frontPageDisplayMessageUntilDate'] == null
              ? null
              : DateTime.parse(
                  json['frontPageDisplayMessageUntilDate'] as String),
      readOnlyAccess: json['readOnlyAccess'] as bool?,
      readOnlyAccessMessage: json['readOnlyAccessMessage'] as String?,
      isProduction: json['isProduction'] as bool?,
    );

Map<String, dynamic> _$GlobalSettingModelToJson(GlobalSettingModel instance) =>
    <String, dynamic>{
      'html5DocumentViewerPath': instance.html5DocumentViewerPath,
      'html5SupportedDocTypes': instance.html5SupportedDocTypes,
      'mobileTheme': instance.mobileTheme,
      'mobileTitle': instance.mobileTitle,
      'mobileCopyright': instance.mobileCopyright,
      'desktopTheme': instance.desktopTheme,
      'desktopCourtUrl': instance.desktopCourtUrl,
      'desktopTitle': instance.desktopTitle,
      'desktopCopyright': instance.desktopCopyright,
      'applicationVersion': instance.applicationVersion,
      'databaseVersion': instance.databaseVersion,
      'enableNewFeatures': instance.enableNewFeatures,
      'enableFrontPageDisplayMessage': instance.enableFrontPageDisplayMessage,
      'frontPageDisplayMessage': instance.frontPageDisplayMessage,
      'frontPageDisplayMessageTitle': instance.frontPageDisplayMessageTitle,
      'frontPageDisplayMessageDisplayTime':
          instance.frontPageDisplayMessageDisplayTime,
      'frontPageDisplayMessageUntilDate':
          instance.frontPageDisplayMessageUntilDate?.toIso8601String(),
      'readOnlyAccess': instance.readOnlyAccess,
      'readOnlyAccessMessage': instance.readOnlyAccessMessage,
      'isProduction': instance.isProduction,
    };

GlobalSettingModelReturnModel _$GlobalSettingModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    GlobalSettingModelReturnModel(
      model: json['model'] == null
          ? null
          : GlobalSettingModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$GlobalSettingModelReturnModelToJson(
        GlobalSettingModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

Int64ReturnListModel _$Int64ReturnListModelFromJson(
        Map<String, dynamic> json) =>
    Int64ReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$Int64ReturnListModelToJson(
        Int64ReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model,
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

Int64ReturnModel _$Int64ReturnModelFromJson(Map<String, dynamic> json) =>
    Int64ReturnModel(
      model: (json['model'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$Int64ReturnModelToJson(Int64ReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobAttachmentCreateModel _$JobAttachmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    JobAttachmentCreateModel(
      jobId: (json['jobId'] as num?)?.toInt(),
      fileName: json['fileName'] as String?,
      storedFilePath: json['storedFilePath'] as String?,
    );

Map<String, dynamic> _$JobAttachmentCreateModelToJson(
        JobAttachmentCreateModel instance) =>
    <String, dynamic>{
      'jobId': instance.jobId,
      'fileName': instance.fileName,
      'storedFilePath': instance.storedFilePath,
    };

JobAttachmentModel _$JobAttachmentModelFromJson(Map<String, dynamic> json) =>
    JobAttachmentModel(
      jobAttachmentId: (json['jobAttachmentId'] as num?)?.toInt(),
      jobId: (json['jobId'] as num?)?.toInt(),
      fileName: json['fileName'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      storedFilePath: json['storedFilePath'] as String?,
      jobName: json['jobName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$JobAttachmentModelToJson(JobAttachmentModel instance) =>
    <String, dynamic>{
      'jobAttachmentId': instance.jobAttachmentId,
      'jobId': instance.jobId,
      'fileName': instance.fileName,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'storedFilePath': instance.storedFilePath,
      'jobName': instance.jobName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

JobAttachmentModelReturnListModel _$JobAttachmentModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    JobAttachmentModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => JobAttachmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobAttachmentModelReturnListModelToJson(
        JobAttachmentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobAttachmentModelReturnModel _$JobAttachmentModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    JobAttachmentModelReturnModel(
      model: json['model'] == null
          ? null
          : JobAttachmentModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobAttachmentModelReturnModelToJson(
        JobAttachmentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobAttachmentUpdateModel _$JobAttachmentUpdateModelFromJson(
        Map<String, dynamic> json) =>
    JobAttachmentUpdateModel(
      jobAttachmentId: (json['jobAttachmentId'] as num?)?.toInt(),
      jobId: (json['jobId'] as num?)?.toInt(),
      fileName: json['fileName'] as String?,
      storedFilePath: json['storedFilePath'] as String?,
    );

Map<String, dynamic> _$JobAttachmentUpdateModelToJson(
        JobAttachmentUpdateModel instance) =>
    <String, dynamic>{
      'jobAttachmentId': instance.jobAttachmentId,
      'jobId': instance.jobId,
      'fileName': instance.fileName,
      'storedFilePath': instance.storedFilePath,
    };

JobCreateModel _$JobCreateModelFromJson(Map<String, dynamic> json) =>
    JobCreateModel(
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      submittedDate: json['submittedDate'] == null
          ? null
          : DateTime.parse(json['submittedDate'] as String),
      message: json['message'] as String?,
      predefinedJobStatusTypeId:
          (json['predefinedJobStatusTypeId'] as num?)?.toInt(),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupTime: (json['pickupTime'] as num?)?.toInt(),
      jobName: json['jobName'] as String?,
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      executionAppName: json['executionAppName'] as String?,
      executionAppId: json['executionAppId'] as String?,
      executionHostName: json['executionHostName'] as String?,
      executionAppCheckPort: (json['executionAppCheckPort'] as num?)?.toInt(),
      executionProcessId: (json['executionProcessId'] as num?)?.toInt(),
      executionThreadId: (json['executionThreadId'] as num?)?.toInt(),
      emails: (json['emails'] as List<dynamic>?)
              ?.map((e) => JobNotificationEmailCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$JobCreateModelToJson(JobCreateModel instance) =>
    <String, dynamic>{
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'jobTemplateId': instance.jobTemplateId,
      'companyId': instance.companyId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'submittedDate': instance.submittedDate?.toIso8601String(),
      'message': instance.message,
      'predefinedJobStatusTypeId': instance.predefinedJobStatusTypeId,
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupTime': instance.pickupTime,
      'jobName': instance.jobName,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'executionAppName': instance.executionAppName,
      'executionAppId': instance.executionAppId,
      'executionHostName': instance.executionHostName,
      'executionAppCheckPort': instance.executionAppCheckPort,
      'executionProcessId': instance.executionProcessId,
      'executionThreadId': instance.executionThreadId,
      'emails': instance.emails?.map((e) => e.toJson()).toList(),
    };

JobModel _$JobModelFromJson(Map<String, dynamic> json) => JobModel(
      jobId: (json['jobId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      submittedDate: json['submittedDate'] == null
          ? null
          : DateTime.parse(json['submittedDate'] as String),
      message: json['message'] as String?,
      predefinedJobStatusTypeId:
          (json['predefinedJobStatusTypeId'] as num?)?.toInt(),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupTime: (json['pickupTime'] as num?)?.toInt(),
      jobName: json['jobName'] as String?,
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      executionAppName: json['executionAppName'] as String?,
      executionAppId: json['executionAppId'] as String?,
      executionHostName: json['executionHostName'] as String?,
      executionAppCheckPort: (json['executionAppCheckPort'] as num?)?.toInt(),
      executionProcessId: (json['executionProcessId'] as num?)?.toInt(),
      executionThreadId: (json['executionThreadId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedJobTypeName: json['predefinedJobTypeName'] as String?,
      companyName: json['companyName'] as String?,
      predefinedJobOrReportTypeName:
          json['predefinedJobOrReportTypeName'] as String?,
      predefinedJobStatusTypeName:
          json['predefinedJobStatusTypeName'] as String?,
      submittedByUserName: json['submittedByUserName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      attachments: (json['attachments'] as List<dynamic>?)
              ?.map(
                  (e) => JobAttachmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      notificationEmails: (json['notificationEmails'] as List<dynamic>?)
              ?.map((e) =>
                  JobNotificationEmailModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$JobModelToJson(JobModel instance) => <String, dynamic>{
      'jobId': instance.jobId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'jobTemplateId': instance.jobTemplateId,
      'companyId': instance.companyId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'submittedDate': instance.submittedDate?.toIso8601String(),
      'message': instance.message,
      'predefinedJobStatusTypeId': instance.predefinedJobStatusTypeId,
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupTime': instance.pickupTime,
      'jobName': instance.jobName,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'executionAppName': instance.executionAppName,
      'executionAppId': instance.executionAppId,
      'executionHostName': instance.executionHostName,
      'executionAppCheckPort': instance.executionAppCheckPort,
      'executionProcessId': instance.executionProcessId,
      'executionThreadId': instance.executionThreadId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedJobTypeName': instance.predefinedJobTypeName,
      'companyName': instance.companyName,
      'predefinedJobOrReportTypeName': instance.predefinedJobOrReportTypeName,
      'predefinedJobStatusTypeName': instance.predefinedJobStatusTypeName,
      'submittedByUserName': instance.submittedByUserName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'attachments': instance.attachments?.map((e) => e.toJson()).toList(),
      'notificationEmails':
          instance.notificationEmails?.map((e) => e.toJson()).toList(),
    };

JobModelReturnListModel _$JobModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    JobModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => JobModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobModelReturnListModelToJson(
        JobModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobModelReturnModel _$JobModelReturnModelFromJson(Map<String, dynamic> json) =>
    JobModelReturnModel(
      model: json['model'] == null
          ? null
          : JobModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobModelReturnModelToJson(
        JobModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobNotificationEmailCreateModel _$JobNotificationEmailCreateModelFromJson(
        Map<String, dynamic> json) =>
    JobNotificationEmailCreateModel(
      jobId: (json['jobId'] as num?)?.toInt(),
      email: json['email'] as String?,
      sendStatus: (json['sendStatus'] as num?)?.toInt(),
      message: json['message'] as String?,
    );

Map<String, dynamic> _$JobNotificationEmailCreateModelToJson(
        JobNotificationEmailCreateModel instance) =>
    <String, dynamic>{
      'jobId': instance.jobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
    };

JobNotificationEmailModel _$JobNotificationEmailModelFromJson(
        Map<String, dynamic> json) =>
    JobNotificationEmailModel(
      jobNotificationEmailId: (json['jobNotificationEmailId'] as num?)?.toInt(),
      jobId: (json['jobId'] as num?)?.toInt(),
      email: json['email'] as String?,
      sendStatus: (json['sendStatus'] as num?)?.toInt(),
      message: json['message'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      jobName: json['jobName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$JobNotificationEmailModelToJson(
        JobNotificationEmailModel instance) =>
    <String, dynamic>{
      'jobNotificationEmailId': instance.jobNotificationEmailId,
      'jobId': instance.jobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'jobName': instance.jobName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

JobNotificationEmailModelReturnListModel
    _$JobNotificationEmailModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        JobNotificationEmailModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => JobNotificationEmailModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$JobNotificationEmailModelReturnListModelToJson(
        JobNotificationEmailModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobNotificationEmailModelReturnModel
    _$JobNotificationEmailModelReturnModelFromJson(Map<String, dynamic> json) =>
        JobNotificationEmailModelReturnModel(
          model: json['model'] == null
              ? null
              : JobNotificationEmailModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$JobNotificationEmailModelReturnModelToJson(
        JobNotificationEmailModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobNotificationEmailUpdateModel _$JobNotificationEmailUpdateModelFromJson(
        Map<String, dynamic> json) =>
    JobNotificationEmailUpdateModel(
      jobNotificationEmailId: (json['jobNotificationEmailId'] as num?)?.toInt(),
      jobId: (json['jobId'] as num?)?.toInt(),
      email: json['email'] as String?,
      sendStatus: (json['sendStatus'] as num?)?.toInt(),
      message: json['message'] as String?,
    );

Map<String, dynamic> _$JobNotificationEmailUpdateModelToJson(
        JobNotificationEmailUpdateModel instance) =>
    <String, dynamic>{
      'jobNotificationEmailId': instance.jobNotificationEmailId,
      'jobId': instance.jobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
    };

JobTemplateCategoryCreateModel _$JobTemplateCategoryCreateModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateCategoryCreateModel(
      name: json['name'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobTemplateCategoryCreateModelToJson(
        JobTemplateCategoryCreateModel instance) =>
    <String, dynamic>{
      'name': instance.name,
      'companyId': instance.companyId,
    };

JobTemplateCategoryModel _$JobTemplateCategoryModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateCategoryModel(
      jobTemplateCategoryId: (json['jobTemplateCategoryId'] as num?)?.toInt(),
      name: json['name'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$JobTemplateCategoryModelToJson(
        JobTemplateCategoryModel instance) =>
    <String, dynamic>{
      'jobTemplateCategoryId': instance.jobTemplateCategoryId,
      'name': instance.name,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

JobTemplateCategoryModelReturnListModel
    _$JobTemplateCategoryModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        JobTemplateCategoryModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => JobTemplateCategoryModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$JobTemplateCategoryModelReturnListModelToJson(
        JobTemplateCategoryModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobTemplateCategoryModelReturnModel
    _$JobTemplateCategoryModelReturnModelFromJson(Map<String, dynamic> json) =>
        JobTemplateCategoryModelReturnModel(
          model: json['model'] == null
              ? null
              : JobTemplateCategoryModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$JobTemplateCategoryModelReturnModelToJson(
        JobTemplateCategoryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobTemplateCategoryUpdateModel _$JobTemplateCategoryUpdateModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateCategoryUpdateModel(
      jobTemplateCategoryId: (json['jobTemplateCategoryId'] as num?)?.toInt(),
      name: json['name'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobTemplateCategoryUpdateModelToJson(
        JobTemplateCategoryUpdateModel instance) =>
    <String, dynamic>{
      'jobTemplateCategoryId': instance.jobTemplateCategoryId,
      'name': instance.name,
      'companyId': instance.companyId,
    };

JobTemplateCreateModel _$JobTemplateCreateModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateCreateModel(
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      description: json['description'] as String?,
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      predefinedJobUsageForTypeId:
          (json['predefinedJobUsageForTypeId'] as num?)?.toInt(),
      jobTemplateCategoryId: (json['jobTemplateCategoryId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      canExportDoc: json['canExportDoc'] as bool?,
      canExportXls: json['canExportXls'] as bool?,
      canExportPpt: json['canExportPpt'] as bool?,
      canExportCsv: json['canExportCsv'] as bool?,
      canExportXml: json['canExportXml'] as bool?,
      canExportPdf: json['canExportPdf'] as bool?,
      canExportCustom: json['canExportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      templateName: json['templateName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      canExportDocDefaultValue: json['canExportDocDefaultValue'] as bool?,
      canExportXlsDefaultValue: json['canExportXlsDefaultValue'] as bool?,
      canExportPptDefaultValue: json['canExportPptDefaultValue'] as bool?,
      canExportCsvDefaultValue: json['canExportCsvDefaultValue'] as bool?,
      canExportXmlDefaultValue: json['canExportXmlDefaultValue'] as bool?,
      canExportPdfDefaultValue: json['canExportPdfDefaultValue'] as bool?,
      canExportCustomDefaultValue: json['canExportCustomDefaultValue'] as bool?,
      taskIdentifierName: json['taskIdentifierName'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      defaultOutputFileName: json['defaultOutputFileName'] as String?,
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      includeDataSourceFileDefaultValue:
          json['includeDataSourceFileDefaultValue'] as bool?,
      newParameters: (json['newParameters'] as List<dynamic>?)
              ?.map((e) => JobTemplateParameterCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$JobTemplateCreateModelToJson(
        JobTemplateCreateModel instance) =>
    <String, dynamic>{
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'description': instance.description,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'predefinedJobUsageForTypeId': instance.predefinedJobUsageForTypeId,
      'jobTemplateCategoryId': instance.jobTemplateCategoryId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'canExportDoc': instance.canExportDoc,
      'canExportXls': instance.canExportXls,
      'canExportPpt': instance.canExportPpt,
      'canExportCsv': instance.canExportCsv,
      'canExportXml': instance.canExportXml,
      'canExportPdf': instance.canExportPdf,
      'canExportCustom': instance.canExportCustom,
      'customExportName': instance.customExportName,
      'templateName': instance.templateName,
      'companyId': instance.companyId,
      'canExportDocDefaultValue': instance.canExportDocDefaultValue,
      'canExportXlsDefaultValue': instance.canExportXlsDefaultValue,
      'canExportPptDefaultValue': instance.canExportPptDefaultValue,
      'canExportCsvDefaultValue': instance.canExportCsvDefaultValue,
      'canExportXmlDefaultValue': instance.canExportXmlDefaultValue,
      'canExportPdfDefaultValue': instance.canExportPdfDefaultValue,
      'canExportCustomDefaultValue': instance.canExportCustomDefaultValue,
      'taskIdentifierName': instance.taskIdentifierName,
      'reportTemplateFile': instance.reportTemplateFile,
      'defaultOutputFileName': instance.defaultOutputFileName,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'includeDataSourceFileDefaultValue':
          instance.includeDataSourceFileDefaultValue,
      'newParameters': instance.newParameters?.map((e) => e.toJson()).toList(),
    };

JobTemplateModel _$JobTemplateModelFromJson(Map<String, dynamic> json) =>
    JobTemplateModel(
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      description: json['description'] as String?,
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      predefinedJobUsageForTypeId:
          (json['predefinedJobUsageForTypeId'] as num?)?.toInt(),
      jobTemplateCategoryId: (json['jobTemplateCategoryId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      canExportDoc: json['canExportDoc'] as bool?,
      canExportXls: json['canExportXls'] as bool?,
      canExportPpt: json['canExportPpt'] as bool?,
      canExportCsv: json['canExportCsv'] as bool?,
      canExportXml: json['canExportXml'] as bool?,
      canExportPdf: json['canExportPdf'] as bool?,
      canExportCustom: json['canExportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      templateName: json['templateName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      canExportDocDefaultValue: json['canExportDocDefaultValue'] as bool?,
      canExportXlsDefaultValue: json['canExportXlsDefaultValue'] as bool?,
      canExportPptDefaultValue: json['canExportPptDefaultValue'] as bool?,
      canExportCsvDefaultValue: json['canExportCsvDefaultValue'] as bool?,
      canExportXmlDefaultValue: json['canExportXmlDefaultValue'] as bool?,
      canExportPdfDefaultValue: json['canExportPdfDefaultValue'] as bool?,
      canExportCustomDefaultValue: json['canExportCustomDefaultValue'] as bool?,
      taskIdentifierName: json['taskIdentifierName'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      defaultOutputFileName: json['defaultOutputFileName'] as String?,
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      includeDataSourceFileDefaultValue:
          json['includeDataSourceFileDefaultValue'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedJobTypeName: json['predefinedJobTypeName'] as String?,
      predefinedJobOrReportTypeName:
          json['predefinedJobOrReportTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      parameters: (json['parameters'] as List<dynamic>?)
              ?.map((e) =>
                  JobTemplateParameterModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$JobTemplateModelToJson(JobTemplateModel instance) =>
    <String, dynamic>{
      'jobTemplateId': instance.jobTemplateId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'description': instance.description,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'predefinedJobUsageForTypeId': instance.predefinedJobUsageForTypeId,
      'jobTemplateCategoryId': instance.jobTemplateCategoryId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'canExportDoc': instance.canExportDoc,
      'canExportXls': instance.canExportXls,
      'canExportPpt': instance.canExportPpt,
      'canExportCsv': instance.canExportCsv,
      'canExportXml': instance.canExportXml,
      'canExportPdf': instance.canExportPdf,
      'canExportCustom': instance.canExportCustom,
      'customExportName': instance.customExportName,
      'templateName': instance.templateName,
      'companyId': instance.companyId,
      'canExportDocDefaultValue': instance.canExportDocDefaultValue,
      'canExportXlsDefaultValue': instance.canExportXlsDefaultValue,
      'canExportPptDefaultValue': instance.canExportPptDefaultValue,
      'canExportCsvDefaultValue': instance.canExportCsvDefaultValue,
      'canExportXmlDefaultValue': instance.canExportXmlDefaultValue,
      'canExportPdfDefaultValue': instance.canExportPdfDefaultValue,
      'canExportCustomDefaultValue': instance.canExportCustomDefaultValue,
      'taskIdentifierName': instance.taskIdentifierName,
      'reportTemplateFile': instance.reportTemplateFile,
      'defaultOutputFileName': instance.defaultOutputFileName,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'includeDataSourceFileDefaultValue':
          instance.includeDataSourceFileDefaultValue,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedJobTypeName': instance.predefinedJobTypeName,
      'predefinedJobOrReportTypeName': instance.predefinedJobOrReportTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'parameters': instance.parameters?.map((e) => e.toJson()).toList(),
    };

JobTemplateModelReturnListModel _$JobTemplateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => JobTemplateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobTemplateModelReturnListModelToJson(
        JobTemplateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobTemplateModelReturnModel _$JobTemplateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateModelReturnModel(
      model: json['model'] == null
          ? null
          : JobTemplateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobTemplateModelReturnModelToJson(
        JobTemplateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobTemplateParameterCreateModel _$JobTemplateParameterCreateModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateParameterCreateModel(
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      name: json['name'] as String?,
      $value: json['value'] as String?,
      defaultValue: json['defaultValue'] as String?,
      predefinedFieldControlTypeId:
          (json['predefinedFieldControlTypeId'] as num?)?.toInt(),
      predefinedFieldTypeId: (json['predefinedFieldTypeId'] as num?)?.toInt(),
      predefinedFieldPopulatorTypeId:
          (json['predefinedFieldPopulatorTypeId'] as num?)?.toInt(),
      caption: json['caption'] as String?,
      populatorSource: json['populatorSource'] as String?,
      size: (json['size'] as num?)?.toInt(),
      empty: json['empty'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      isVisible: json['isVisible'] as bool?,
    );

Map<String, dynamic> _$JobTemplateParameterCreateModelToJson(
        JobTemplateParameterCreateModel instance) =>
    <String, dynamic>{
      'jobTemplateId': instance.jobTemplateId,
      'name': instance.name,
      'value': instance.$value,
      'defaultValue': instance.defaultValue,
      'predefinedFieldControlTypeId': instance.predefinedFieldControlTypeId,
      'predefinedFieldTypeId': instance.predefinedFieldTypeId,
      'predefinedFieldPopulatorTypeId': instance.predefinedFieldPopulatorTypeId,
      'caption': instance.caption,
      'populatorSource': instance.populatorSource,
      'size': instance.size,
      'empty': instance.empty,
      'position': instance.position,
      'isVisible': instance.isVisible,
    };

JobTemplateParameterModel _$JobTemplateParameterModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateParameterModel(
      jobTemplateParameterId: (json['jobTemplateParameterId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      name: json['name'] as String?,
      $value: json['value'] as String?,
      defaultValue: json['defaultValue'] as String?,
      predefinedFieldControlTypeId:
          (json['predefinedFieldControlTypeId'] as num?)?.toInt(),
      predefinedFieldTypeId: (json['predefinedFieldTypeId'] as num?)?.toInt(),
      predefinedFieldPopulatorTypeId:
          (json['predefinedFieldPopulatorTypeId'] as num?)?.toInt(),
      caption: json['caption'] as String?,
      populatorSource: json['populatorSource'] as String?,
      size: (json['size'] as num?)?.toInt(),
      empty: json['empty'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      isVisible: json['isVisible'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedFieldControlTypeName:
          json['predefinedFieldControlTypeName'] as String?,
      predefinedFieldTypeName: json['predefinedFieldTypeName'] as String?,
      predefinedFieldPopulatorTypeName:
          json['predefinedFieldPopulatorTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$JobTemplateParameterModelToJson(
        JobTemplateParameterModel instance) =>
    <String, dynamic>{
      'jobTemplateParameterId': instance.jobTemplateParameterId,
      'jobTemplateId': instance.jobTemplateId,
      'name': instance.name,
      'value': instance.$value,
      'defaultValue': instance.defaultValue,
      'predefinedFieldControlTypeId': instance.predefinedFieldControlTypeId,
      'predefinedFieldTypeId': instance.predefinedFieldTypeId,
      'predefinedFieldPopulatorTypeId': instance.predefinedFieldPopulatorTypeId,
      'caption': instance.caption,
      'populatorSource': instance.populatorSource,
      'size': instance.size,
      'empty': instance.empty,
      'position': instance.position,
      'isVisible': instance.isVisible,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedFieldControlTypeName': instance.predefinedFieldControlTypeName,
      'predefinedFieldTypeName': instance.predefinedFieldTypeName,
      'predefinedFieldPopulatorTypeName':
          instance.predefinedFieldPopulatorTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

JobTemplateParameterModelReturnListModel
    _$JobTemplateParameterModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        JobTemplateParameterModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => JobTemplateParameterModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$JobTemplateParameterModelReturnListModelToJson(
        JobTemplateParameterModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobTemplateParameterModelReturnModel
    _$JobTemplateParameterModelReturnModelFromJson(Map<String, dynamic> json) =>
        JobTemplateParameterModelReturnModel(
          model: json['model'] == null
              ? null
              : JobTemplateParameterModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$JobTemplateParameterModelReturnModelToJson(
        JobTemplateParameterModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

JobTemplateParameterUpdateModel _$JobTemplateParameterUpdateModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateParameterUpdateModel(
      jobTemplateParameterId: (json['jobTemplateParameterId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      name: json['name'] as String?,
      $value: json['value'] as String?,
      defaultValue: json['defaultValue'] as String?,
      predefinedFieldControlTypeId:
          (json['predefinedFieldControlTypeId'] as num?)?.toInt(),
      predefinedFieldTypeId: (json['predefinedFieldTypeId'] as num?)?.toInt(),
      predefinedFieldPopulatorTypeId:
          (json['predefinedFieldPopulatorTypeId'] as num?)?.toInt(),
      caption: json['caption'] as String?,
      populatorSource: json['populatorSource'] as String?,
      size: (json['size'] as num?)?.toInt(),
      empty: json['empty'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      isVisible: json['isVisible'] as bool?,
    );

Map<String, dynamic> _$JobTemplateParameterUpdateModelToJson(
        JobTemplateParameterUpdateModel instance) =>
    <String, dynamic>{
      'jobTemplateParameterId': instance.jobTemplateParameterId,
      'jobTemplateId': instance.jobTemplateId,
      'name': instance.name,
      'value': instance.$value,
      'defaultValue': instance.defaultValue,
      'predefinedFieldControlTypeId': instance.predefinedFieldControlTypeId,
      'predefinedFieldTypeId': instance.predefinedFieldTypeId,
      'predefinedFieldPopulatorTypeId': instance.predefinedFieldPopulatorTypeId,
      'caption': instance.caption,
      'populatorSource': instance.populatorSource,
      'size': instance.size,
      'empty': instance.empty,
      'position': instance.position,
      'isVisible': instance.isVisible,
    };

JobTemplateUpdateModel _$JobTemplateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    JobTemplateUpdateModel(
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      description: json['description'] as String?,
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      predefinedJobUsageForTypeId:
          (json['predefinedJobUsageForTypeId'] as num?)?.toInt(),
      jobTemplateCategoryId: (json['jobTemplateCategoryId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      canExportDoc: json['canExportDoc'] as bool?,
      canExportXls: json['canExportXls'] as bool?,
      canExportPpt: json['canExportPpt'] as bool?,
      canExportCsv: json['canExportCsv'] as bool?,
      canExportXml: json['canExportXml'] as bool?,
      canExportPdf: json['canExportPdf'] as bool?,
      canExportCustom: json['canExportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      templateName: json['templateName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      canExportDocDefaultValue: json['canExportDocDefaultValue'] as bool?,
      canExportXlsDefaultValue: json['canExportXlsDefaultValue'] as bool?,
      canExportPptDefaultValue: json['canExportPptDefaultValue'] as bool?,
      canExportCsvDefaultValue: json['canExportCsvDefaultValue'] as bool?,
      canExportXmlDefaultValue: json['canExportXmlDefaultValue'] as bool?,
      canExportPdfDefaultValue: json['canExportPdfDefaultValue'] as bool?,
      canExportCustomDefaultValue: json['canExportCustomDefaultValue'] as bool?,
      taskIdentifierName: json['taskIdentifierName'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      defaultOutputFileName: json['defaultOutputFileName'] as String?,
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      includeDataSourceFileDefaultValue:
          json['includeDataSourceFileDefaultValue'] as bool?,
      existingParameters: (json['existingParameters'] as List<dynamic>?)
              ?.map((e) => JobTemplateParameterUpdateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      newParameters: (json['newParameters'] as List<dynamic>?)
              ?.map((e) => JobTemplateParameterCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$JobTemplateUpdateModelToJson(
        JobTemplateUpdateModel instance) =>
    <String, dynamic>{
      'jobTemplateId': instance.jobTemplateId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'description': instance.description,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'predefinedJobUsageForTypeId': instance.predefinedJobUsageForTypeId,
      'jobTemplateCategoryId': instance.jobTemplateCategoryId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'canExportDoc': instance.canExportDoc,
      'canExportXls': instance.canExportXls,
      'canExportPpt': instance.canExportPpt,
      'canExportCsv': instance.canExportCsv,
      'canExportXml': instance.canExportXml,
      'canExportPdf': instance.canExportPdf,
      'canExportCustom': instance.canExportCustom,
      'customExportName': instance.customExportName,
      'templateName': instance.templateName,
      'companyId': instance.companyId,
      'canExportDocDefaultValue': instance.canExportDocDefaultValue,
      'canExportXlsDefaultValue': instance.canExportXlsDefaultValue,
      'canExportPptDefaultValue': instance.canExportPptDefaultValue,
      'canExportCsvDefaultValue': instance.canExportCsvDefaultValue,
      'canExportXmlDefaultValue': instance.canExportXmlDefaultValue,
      'canExportPdfDefaultValue': instance.canExportPdfDefaultValue,
      'canExportCustomDefaultValue': instance.canExportCustomDefaultValue,
      'taskIdentifierName': instance.taskIdentifierName,
      'reportTemplateFile': instance.reportTemplateFile,
      'defaultOutputFileName': instance.defaultOutputFileName,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'includeDataSourceFileDefaultValue':
          instance.includeDataSourceFileDefaultValue,
      'existingParameters':
          instance.existingParameters?.map((e) => e.toJson()).toList(),
      'newParameters': instance.newParameters?.map((e) => e.toJson()).toList(),
    };

JobUpdateModel _$JobUpdateModelFromJson(Map<String, dynamic> json) =>
    JobUpdateModel(
      jobId: (json['jobId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      submittedDate: json['submittedDate'] == null
          ? null
          : DateTime.parse(json['submittedDate'] as String),
      message: json['message'] as String?,
      predefinedJobStatusTypeId:
          (json['predefinedJobStatusTypeId'] as num?)?.toInt(),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupTime: (json['pickupTime'] as num?)?.toInt(),
      jobName: json['jobName'] as String?,
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      executionAppName: json['executionAppName'] as String?,
      executionAppId: json['executionAppId'] as String?,
      executionHostName: json['executionHostName'] as String?,
      executionAppCheckPort: (json['executionAppCheckPort'] as num?)?.toInt(),
      executionProcessId: (json['executionProcessId'] as num?)?.toInt(),
      executionThreadId: (json['executionThreadId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$JobUpdateModelToJson(JobUpdateModel instance) =>
    <String, dynamic>{
      'jobId': instance.jobId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'jobTemplateId': instance.jobTemplateId,
      'companyId': instance.companyId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'submittedDate': instance.submittedDate?.toIso8601String(),
      'message': instance.message,
      'predefinedJobStatusTypeId': instance.predefinedJobStatusTypeId,
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupTime': instance.pickupTime,
      'jobName': instance.jobName,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'executionAppName': instance.executionAppName,
      'executionAppId': instance.executionAppId,
      'executionHostName': instance.executionHostName,
      'executionAppCheckPort': instance.executionAppCheckPort,
      'executionProcessId': instance.executionProcessId,
      'executionThreadId': instance.executionThreadId,
    };

LedgerTypeCreateModel _$LedgerTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    LedgerTypeCreateModel(
      ledgerTypeName: json['ledgerTypeName'] as String?,
      predefinedLedgerGroupTypeId:
          (json['predefinedLedgerGroupTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$LedgerTypeCreateModelToJson(
        LedgerTypeCreateModel instance) =>
    <String, dynamic>{
      'ledgerTypeName': instance.ledgerTypeName,
      'predefinedLedgerGroupTypeId': instance.predefinedLedgerGroupTypeId,
      'companyId': instance.companyId,
    };

LedgerTypeCreateWithMovieModel _$LedgerTypeCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    LedgerTypeCreateWithMovieModel(
      ledgerTypeName: json['ledgerTypeName'] as String?,
      predefinedLedgerGroupTypeId:
          (json['predefinedLedgerGroupTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$LedgerTypeCreateWithMovieModelToJson(
        LedgerTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'ledgerTypeName': instance.ledgerTypeName,
      'predefinedLedgerGroupTypeId': instance.predefinedLedgerGroupTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

LedgerTypeModel _$LedgerTypeModelFromJson(Map<String, dynamic> json) =>
    LedgerTypeModel(
      ledgerTypeId: (json['ledgerTypeId'] as num?)?.toInt(),
      ledgerTypeName: json['ledgerTypeName'] as String?,
      predefinedLedgerGroupTypeId:
          (json['predefinedLedgerGroupTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedLedgerGroupTypeName:
          json['predefinedLedgerGroupTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$LedgerTypeModelToJson(LedgerTypeModel instance) =>
    <String, dynamic>{
      'ledgerTypeId': instance.ledgerTypeId,
      'ledgerTypeName': instance.ledgerTypeName,
      'predefinedLedgerGroupTypeId': instance.predefinedLedgerGroupTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedLedgerGroupTypeName': instance.predefinedLedgerGroupTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

LedgerTypeModelReturnListModel _$LedgerTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    LedgerTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => LedgerTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$LedgerTypeModelReturnListModelToJson(
        LedgerTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

LedgerTypeModelReturnModel _$LedgerTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    LedgerTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : LedgerTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$LedgerTypeModelReturnModelToJson(
        LedgerTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

LedgerTypeUpdateModel _$LedgerTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    LedgerTypeUpdateModel(
      ledgerTypeId: (json['ledgerTypeId'] as num?)?.toInt(),
      ledgerTypeName: json['ledgerTypeName'] as String?,
      predefinedLedgerGroupTypeId:
          (json['predefinedLedgerGroupTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$LedgerTypeUpdateModelToJson(
        LedgerTypeUpdateModel instance) =>
    <String, dynamic>{
      'ledgerTypeId': instance.ledgerTypeId,
      'ledgerTypeName': instance.ledgerTypeName,
      'predefinedLedgerGroupTypeId': instance.predefinedLedgerGroupTypeId,
      'companyId': instance.companyId,
    };

LogConfigurationModel _$LogConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    LogConfigurationModel(
      logTrace: json['logTrace'] as bool?,
      logDebug: json['logDebug'] as bool?,
      logInfo: json['logInfo'] as bool?,
      logSql: json['logSql'] as bool?,
      logWarn: json['logWarn'] as bool?,
      logError: json['logError'] as bool?,
      logPerformance: json['logPerformance'] as bool?,
      logLocation: json['logLocation'] as String?,
      logToFile: json['logToFile'] as bool?,
      logToConsole: json['logToConsole'] as bool?,
      logToDebugger: json['logToDebugger'] as bool?,
      logToServer: json['logToServer'] as bool?,
      logServerHost: json['logServerHost'] as bool?,
      logServerPort: json['logServerPort'] as bool?,
      logServerUserName: json['logServerUserName'] as bool?,
      logServerPassword: json['logServerPassword'] as bool?,
      logServerAccessKey: json['logServerAccessKey'] as bool?,
      logPerformanceToMainLogger: json['logPerformanceToMainLogger'] as bool?,
    );

Map<String, dynamic> _$LogConfigurationModelToJson(
        LogConfigurationModel instance) =>
    <String, dynamic>{
      'logTrace': instance.logTrace,
      'logDebug': instance.logDebug,
      'logInfo': instance.logInfo,
      'logSql': instance.logSql,
      'logWarn': instance.logWarn,
      'logError': instance.logError,
      'logPerformance': instance.logPerformance,
      'logLocation': instance.logLocation,
      'logToFile': instance.logToFile,
      'logToConsole': instance.logToConsole,
      'logToDebugger': instance.logToDebugger,
      'logToServer': instance.logToServer,
      'logServerHost': instance.logServerHost,
      'logServerPort': instance.logServerPort,
      'logServerUserName': instance.logServerUserName,
      'logServerPassword': instance.logServerPassword,
      'logServerAccessKey': instance.logServerAccessKey,
      'logPerformanceToMainLogger': instance.logPerformanceToMainLogger,
    };

LogConfigurationModelReturnModel _$LogConfigurationModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    LogConfigurationModelReturnModel(
      model: json['model'] == null
          ? null
          : LogConfigurationModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$LogConfigurationModelReturnModelToJson(
        LogConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

LogSettings _$LogSettingsFromJson(Map<String, dynamic> json) => LogSettings(
      logTrace: json['logTrace'] as bool?,
      logDebug: json['logDebug'] as bool?,
      logInfo: json['logInfo'] as bool?,
      logSql: json['logSql'] as bool?,
      logWarn: json['logWarn'] as bool?,
      logError: json['logError'] as bool?,
      logPerformance: json['logPerformance'] as bool?,
      logLocation: json['logLocation'] as String?,
      logToFile: json['logToFile'] as bool?,
      logToConsole: json['logToConsole'] as bool?,
      logToDebugger: json['logToDebugger'] as bool?,
      logToServer: json['logToServer'] as bool?,
      logServerHost: json['logServerHost'] as bool?,
      logServerPort: json['logServerPort'] as bool?,
      logServerUserName: json['logServerUserName'] as bool?,
      logServerPassword: json['logServerPassword'] as bool?,
      logServerAccessKey: json['logServerAccessKey'] as bool?,
    );

Map<String, dynamic> _$LogSettingsToJson(LogSettings instance) =>
    <String, dynamic>{
      'logTrace': instance.logTrace,
      'logDebug': instance.logDebug,
      'logInfo': instance.logInfo,
      'logSql': instance.logSql,
      'logWarn': instance.logWarn,
      'logError': instance.logError,
      'logPerformance': instance.logPerformance,
      'logLocation': instance.logLocation,
      'logToFile': instance.logToFile,
      'logToConsole': instance.logToConsole,
      'logToDebugger': instance.logToDebugger,
      'logToServer': instance.logToServer,
      'logServerHost': instance.logServerHost,
      'logServerPort': instance.logServerPort,
      'logServerUserName': instance.logServerUserName,
      'logServerPassword': instance.logServerPassword,
      'logServerAccessKey': instance.logServerAccessKey,
    };

LoggedInUserModel _$LoggedInUserModelFromJson(Map<String, dynamic> json) =>
    LoggedInUserModel(
      userName: json['userName'] as String?,
      firstName: json['firstName'] as String?,
      lastName: json['lastName'] as String?,
      userTypeId: (json['userTypeId'] as num?)?.toInt(),
      userTypeName: json['userTypeName'] as String?,
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      predefinedCurrencyTypeId:
          (json['predefinedCurrencyTypeId'] as num?)?.toInt(),
      predefinedLoggedInUserTypeId:
          (json['predefinedLoggedInUserTypeId'] as num?)?.toInt(),
      crewDetailsWhichHasMatchingPhoneOrEmailItems:
          (json['crewDetailsWhichHasMatchingPhoneOrEmailItems']
                      as List<dynamic>?)
                  ?.map((e) =>
                      CrewInfoWhichHasMatchingPhoneOrEmailModel.fromJson(
                          e as Map<String, dynamic>))
                  .toList() ??
              [],
      token: json['token'] as String?,
      permissions: (json['permissions'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
    );

Map<String, dynamic> _$LoggedInUserModelToJson(LoggedInUserModel instance) =>
    <String, dynamic>{
      'userName': instance.userName,
      'firstName': instance.firstName,
      'lastName': instance.lastName,
      'userTypeId': instance.userTypeId,
      'userTypeName': instance.userTypeName,
      'userId': instance.userId,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'predefinedCurrencyTypeId': instance.predefinedCurrencyTypeId,
      'predefinedLoggedInUserTypeId': instance.predefinedLoggedInUserTypeId,
      'crewDetailsWhichHasMatchingPhoneOrEmailItems': instance
          .crewDetailsWhichHasMatchingPhoneOrEmailItems
          ?.map((e) => e.toJson())
          .toList(),
      'token': instance.token,
      'permissions': instance.permissions,
    };

LoggedInUserModelReturnModel _$LoggedInUserModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    LoggedInUserModelReturnModel(
      model: json['model'] == null
          ? null
          : LoggedInUserModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$LoggedInUserModelReturnModelToJson(
        LoggedInUserModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

LoginModel _$LoginModelFromJson(Map<String, dynamic> json) => LoginModel(
      username: json['username'] as String?,
      password: json['password'] as String?,
      rememberMe: json['rememberMe'] as bool?,
    );

Map<String, dynamic> _$LoginModelToJson(LoginModel instance) =>
    <String, dynamic>{
      'username': instance.username,
      'password': instance.password,
      'rememberMe': instance.rememberMe,
    };

LoginOptionModel _$LoginOptionModelFromJson(Map<String, dynamic> json) =>
    LoginOptionModel(
      useBuiltInAuthentication: json['useBuiltInAuthentication'] as bool?,
      signInUrl: json['signInUrl'] as String?,
      companyName: json['companyName'] as String?,
      companyDesktopUrl: json['companyDesktopUrl'] as String?,
      companyMobileUrl: json['companyMobileUrl'] as String?,
      companySlogan: json['companySlogan'] as String?,
      companyEntityName: json['companyEntityName'] as String?,
    );

Map<String, dynamic> _$LoginOptionModelToJson(LoginOptionModel instance) =>
    <String, dynamic>{
      'useBuiltInAuthentication': instance.useBuiltInAuthentication,
      'signInUrl': instance.signInUrl,
      'companyName': instance.companyName,
      'companyDesktopUrl': instance.companyDesktopUrl,
      'companyMobileUrl': instance.companyMobileUrl,
      'companySlogan': instance.companySlogan,
      'companyEntityName': instance.companyEntityName,
    };

LoginOptionModelReturnModel _$LoginOptionModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    LoginOptionModelReturnModel(
      model: json['model'] == null
          ? null
          : LoginOptionModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$LoginOptionModelReturnModelToJson(
        LoginOptionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MailServerCreateModel _$MailServerCreateModelFromJson(
        Map<String, dynamic> json) =>
    MailServerCreateModel(
      mailServerCode: json['mailServerCode'] as String?,
      mailServerName: json['mailServerName'] as String?,
      host: json['host'] as String?,
      port: (json['port'] as num?)?.toInt(),
      senderName: json['senderName'] as String?,
      senderEmail: json['senderEmail'] as String?,
      userName: json['userName'] as String?,
      password: json['password'] as String?,
      isSecure: json['isSecure'] as bool?,
      isDefault: json['isDefault'] as bool?,
    );

Map<String, dynamic> _$MailServerCreateModelToJson(
        MailServerCreateModel instance) =>
    <String, dynamic>{
      'mailServerCode': instance.mailServerCode,
      'mailServerName': instance.mailServerName,
      'host': instance.host,
      'port': instance.port,
      'senderName': instance.senderName,
      'senderEmail': instance.senderEmail,
      'userName': instance.userName,
      'password': instance.password,
      'isSecure': instance.isSecure,
      'isDefault': instance.isDefault,
    };

MailServerModel _$MailServerModelFromJson(Map<String, dynamic> json) =>
    MailServerModel(
      mailServerId: (json['mailServerId'] as num?)?.toInt(),
      mailServerCode: json['mailServerCode'] as String?,
      mailServerName: json['mailServerName'] as String?,
      host: json['host'] as String?,
      port: (json['port'] as num?)?.toInt(),
      senderName: json['senderName'] as String?,
      senderEmail: json['senderEmail'] as String?,
      userName: json['userName'] as String?,
      password: json['password'] as String?,
      isSecure: json['isSecure'] as bool?,
      isDefault: json['isDefault'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MailServerModelToJson(MailServerModel instance) =>
    <String, dynamic>{
      'mailServerId': instance.mailServerId,
      'mailServerCode': instance.mailServerCode,
      'mailServerName': instance.mailServerName,
      'host': instance.host,
      'port': instance.port,
      'senderName': instance.senderName,
      'senderEmail': instance.senderEmail,
      'userName': instance.userName,
      'password': instance.password,
      'isSecure': instance.isSecure,
      'isDefault': instance.isDefault,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MailServerModelReturnListModel _$MailServerModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MailServerModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MailServerModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MailServerModelReturnListModelToJson(
        MailServerModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MailServerModelReturnModel _$MailServerModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MailServerModelReturnModel(
      model: json['model'] == null
          ? null
          : MailServerModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MailServerModelReturnModelToJson(
        MailServerModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MailServerUpdateModel _$MailServerUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MailServerUpdateModel(
      mailServerId: (json['mailServerId'] as num?)?.toInt(),
      mailServerCode: json['mailServerCode'] as String?,
      mailServerName: json['mailServerName'] as String?,
      host: json['host'] as String?,
      port: (json['port'] as num?)?.toInt(),
      senderName: json['senderName'] as String?,
      senderEmail: json['senderEmail'] as String?,
      userName: json['userName'] as String?,
      password: json['password'] as String?,
      isSecure: json['isSecure'] as bool?,
      isDefault: json['isDefault'] as bool?,
    );

Map<String, dynamic> _$MailServerUpdateModelToJson(
        MailServerUpdateModel instance) =>
    <String, dynamic>{
      'mailServerId': instance.mailServerId,
      'mailServerCode': instance.mailServerCode,
      'mailServerName': instance.mailServerName,
      'host': instance.host,
      'port': instance.port,
      'senderName': instance.senderName,
      'senderEmail': instance.senderEmail,
      'userName': instance.userName,
      'password': instance.password,
      'isSecure': instance.isSecure,
      'isDefault': instance.isDefault,
    };

MessageTemplateCreateModel _$MessageTemplateCreateModelFromJson(
        Map<String, dynamic> json) =>
    MessageTemplateCreateModel(
      predefinedMessageTemplateTypeId:
          (json['predefinedMessageTemplateTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      emailSubject: json['emailSubject'] as String?,
      emailBody: json['emailBody'] as String?,
      smsBody: json['smsBody'] as String?,
      appNotificationSubject: json['appNotificationSubject'] as String?,
      appNotificationBody: json['appNotificationBody'] as String?,
      webNotificationSubject: json['webNotificationSubject'] as String?,
      webNotificationBody: json['webNotificationBody'] as String?,
      sendEmailForInternalUser: json['sendEmailForInternalUser'] as bool?,
      sendSmsForInternalUser: json['sendSmsForInternalUser'] as bool?,
      sendAppNotificationForInternalUser:
          json['sendAppNotificationForInternalUser'] as bool?,
      sendEmailForExternalUser: json['sendEmailForExternalUser'] as bool?,
      sendSmsForExternalUser: json['sendSmsForExternalUser'] as bool?,
      sendAppNotificationForExternalUser:
          json['sendAppNotificationForExternalUser'] as bool?,
      additionalRecipients: json['additionalRecipients'] as String?,
    );

Map<String, dynamic> _$MessageTemplateCreateModelToJson(
        MessageTemplateCreateModel instance) =>
    <String, dynamic>{
      'predefinedMessageTemplateTypeId':
          instance.predefinedMessageTemplateTypeId,
      'companyId': instance.companyId,
      'emailSubject': instance.emailSubject,
      'emailBody': instance.emailBody,
      'smsBody': instance.smsBody,
      'appNotificationSubject': instance.appNotificationSubject,
      'appNotificationBody': instance.appNotificationBody,
      'webNotificationSubject': instance.webNotificationSubject,
      'webNotificationBody': instance.webNotificationBody,
      'sendEmailForInternalUser': instance.sendEmailForInternalUser,
      'sendSmsForInternalUser': instance.sendSmsForInternalUser,
      'sendAppNotificationForInternalUser':
          instance.sendAppNotificationForInternalUser,
      'sendEmailForExternalUser': instance.sendEmailForExternalUser,
      'sendSmsForExternalUser': instance.sendSmsForExternalUser,
      'sendAppNotificationForExternalUser':
          instance.sendAppNotificationForExternalUser,
      'additionalRecipients': instance.additionalRecipients,
    };

MessageTemplateModel _$MessageTemplateModelFromJson(
        Map<String, dynamic> json) =>
    MessageTemplateModel(
      messageTemplateId: (json['messageTemplateId'] as num?)?.toInt(),
      predefinedMessageTemplateTypeId:
          (json['predefinedMessageTemplateTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      emailSubject: json['emailSubject'] as String?,
      emailBody: json['emailBody'] as String?,
      smsBody: json['smsBody'] as String?,
      appNotificationSubject: json['appNotificationSubject'] as String?,
      appNotificationBody: json['appNotificationBody'] as String?,
      webNotificationSubject: json['webNotificationSubject'] as String?,
      webNotificationBody: json['webNotificationBody'] as String?,
      sendEmailForInternalUser: json['sendEmailForInternalUser'] as bool?,
      sendSmsForInternalUser: json['sendSmsForInternalUser'] as bool?,
      sendAppNotificationForInternalUser:
          json['sendAppNotificationForInternalUser'] as bool?,
      sendEmailForExternalUser: json['sendEmailForExternalUser'] as bool?,
      sendSmsForExternalUser: json['sendSmsForExternalUser'] as bool?,
      sendAppNotificationForExternalUser:
          json['sendAppNotificationForExternalUser'] as bool?,
      additionalRecipients: json['additionalRecipients'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedMessageTemplateTypeName:
          json['predefinedMessageTemplateTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MessageTemplateModelToJson(
        MessageTemplateModel instance) =>
    <String, dynamic>{
      'messageTemplateId': instance.messageTemplateId,
      'predefinedMessageTemplateTypeId':
          instance.predefinedMessageTemplateTypeId,
      'companyId': instance.companyId,
      'emailSubject': instance.emailSubject,
      'emailBody': instance.emailBody,
      'smsBody': instance.smsBody,
      'appNotificationSubject': instance.appNotificationSubject,
      'appNotificationBody': instance.appNotificationBody,
      'webNotificationSubject': instance.webNotificationSubject,
      'webNotificationBody': instance.webNotificationBody,
      'sendEmailForInternalUser': instance.sendEmailForInternalUser,
      'sendSmsForInternalUser': instance.sendSmsForInternalUser,
      'sendAppNotificationForInternalUser':
          instance.sendAppNotificationForInternalUser,
      'sendEmailForExternalUser': instance.sendEmailForExternalUser,
      'sendSmsForExternalUser': instance.sendSmsForExternalUser,
      'sendAppNotificationForExternalUser':
          instance.sendAppNotificationForExternalUser,
      'additionalRecipients': instance.additionalRecipients,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedMessageTemplateTypeName':
          instance.predefinedMessageTemplateTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MessageTemplateModelReturnListModel
    _$MessageTemplateModelReturnListModelFromJson(Map<String, dynamic> json) =>
        MessageTemplateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MessageTemplateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MessageTemplateModelReturnListModelToJson(
        MessageTemplateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MessageTemplateModelReturnModel _$MessageTemplateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MessageTemplateModelReturnModel(
      model: json['model'] == null
          ? null
          : MessageTemplateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MessageTemplateModelReturnModelToJson(
        MessageTemplateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MessageTemplateUpdateModel _$MessageTemplateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MessageTemplateUpdateModel(
      messageTemplateId: (json['messageTemplateId'] as num?)?.toInt(),
      predefinedMessageTemplateTypeId:
          (json['predefinedMessageTemplateTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      emailSubject: json['emailSubject'] as String?,
      emailBody: json['emailBody'] as String?,
      smsBody: json['smsBody'] as String?,
      appNotificationSubject: json['appNotificationSubject'] as String?,
      appNotificationBody: json['appNotificationBody'] as String?,
      webNotificationSubject: json['webNotificationSubject'] as String?,
      webNotificationBody: json['webNotificationBody'] as String?,
      sendEmailForInternalUser: json['sendEmailForInternalUser'] as bool?,
      sendSmsForInternalUser: json['sendSmsForInternalUser'] as bool?,
      sendAppNotificationForInternalUser:
          json['sendAppNotificationForInternalUser'] as bool?,
      sendEmailForExternalUser: json['sendEmailForExternalUser'] as bool?,
      sendSmsForExternalUser: json['sendSmsForExternalUser'] as bool?,
      sendAppNotificationForExternalUser:
          json['sendAppNotificationForExternalUser'] as bool?,
      additionalRecipients: json['additionalRecipients'] as String?,
    );

Map<String, dynamic> _$MessageTemplateUpdateModelToJson(
        MessageTemplateUpdateModel instance) =>
    <String, dynamic>{
      'messageTemplateId': instance.messageTemplateId,
      'predefinedMessageTemplateTypeId':
          instance.predefinedMessageTemplateTypeId,
      'companyId': instance.companyId,
      'emailSubject': instance.emailSubject,
      'emailBody': instance.emailBody,
      'smsBody': instance.smsBody,
      'appNotificationSubject': instance.appNotificationSubject,
      'appNotificationBody': instance.appNotificationBody,
      'webNotificationSubject': instance.webNotificationSubject,
      'webNotificationBody': instance.webNotificationBody,
      'sendEmailForInternalUser': instance.sendEmailForInternalUser,
      'sendSmsForInternalUser': instance.sendSmsForInternalUser,
      'sendAppNotificationForInternalUser':
          instance.sendAppNotificationForInternalUser,
      'sendEmailForExternalUser': instance.sendEmailForExternalUser,
      'sendSmsForExternalUser': instance.sendSmsForExternalUser,
      'sendAppNotificationForExternalUser':
          instance.sendAppNotificationForExternalUser,
      'additionalRecipients': instance.additionalRecipients,
    };

MessageToSendCreateModel _$MessageToSendCreateModelFromJson(
        Map<String, dynamic> json) =>
    MessageToSendCreateModel(
      predefinedMessageToSendTypeId:
          (json['predefinedMessageToSendTypeId'] as num?)?.toInt(),
      realtimeMessageId: (json['realtimeMessageId'] as num?)?.toInt(),
      messageFrom: json['messageFrom'] as String?,
      messageTo: json['messageTo'] as String?,
      messageFromName: json['messageFromName'] as String?,
      messageToName: json['messageToName'] as String?,
      messageSubject: json['messageSubject'] as String?,
      messageBody: json['messageBody'] as String?,
      sentDate: json['sentDate'] == null
          ? null
          : DateTime.parse(json['sentDate'] as String),
      sent: json['sent'] as bool?,
      isSentError: json['isSentError'] as bool?,
      sentErrorMessage: json['sentErrorMessage'] as String?,
      sentErrorDate: json['sentErrorDate'] == null
          ? null
          : DateTime.parse(json['sentErrorDate'] as String),
      retryCount: (json['retryCount'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MessageToSendCreateModelToJson(
        MessageToSendCreateModel instance) =>
    <String, dynamic>{
      'predefinedMessageToSendTypeId': instance.predefinedMessageToSendTypeId,
      'realtimeMessageId': instance.realtimeMessageId,
      'messageFrom': instance.messageFrom,
      'messageTo': instance.messageTo,
      'messageFromName': instance.messageFromName,
      'messageToName': instance.messageToName,
      'messageSubject': instance.messageSubject,
      'messageBody': instance.messageBody,
      'sentDate': instance.sentDate?.toIso8601String(),
      'sent': instance.sent,
      'isSentError': instance.isSentError,
      'sentErrorMessage': instance.sentErrorMessage,
      'sentErrorDate': instance.sentErrorDate?.toIso8601String(),
      'retryCount': instance.retryCount,
      'companyId': instance.companyId,
    };

MessageToSendModel _$MessageToSendModelFromJson(Map<String, dynamic> json) =>
    MessageToSendModel(
      messageToSendId: (json['messageToSendId'] as num?)?.toInt(),
      predefinedMessageToSendTypeId:
          (json['predefinedMessageToSendTypeId'] as num?)?.toInt(),
      realtimeMessageId: (json['realtimeMessageId'] as num?)?.toInt(),
      messageFrom: json['messageFrom'] as String?,
      messageTo: json['messageTo'] as String?,
      messageFromName: json['messageFromName'] as String?,
      messageToName: json['messageToName'] as String?,
      messageSubject: json['messageSubject'] as String?,
      messageBody: json['messageBody'] as String?,
      sentDate: json['sentDate'] == null
          ? null
          : DateTime.parse(json['sentDate'] as String),
      sent: json['sent'] as bool?,
      isSentError: json['isSentError'] as bool?,
      sentErrorMessage: json['sentErrorMessage'] as String?,
      sentErrorDate: json['sentErrorDate'] == null
          ? null
          : DateTime.parse(json['sentErrorDate'] as String),
      retryCount: (json['retryCount'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedMessageToSendTypeName:
          json['predefinedMessageToSendTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MessageToSendModelToJson(MessageToSendModel instance) =>
    <String, dynamic>{
      'messageToSendId': instance.messageToSendId,
      'predefinedMessageToSendTypeId': instance.predefinedMessageToSendTypeId,
      'realtimeMessageId': instance.realtimeMessageId,
      'messageFrom': instance.messageFrom,
      'messageTo': instance.messageTo,
      'messageFromName': instance.messageFromName,
      'messageToName': instance.messageToName,
      'messageSubject': instance.messageSubject,
      'messageBody': instance.messageBody,
      'sentDate': instance.sentDate?.toIso8601String(),
      'sent': instance.sent,
      'isSentError': instance.isSentError,
      'sentErrorMessage': instance.sentErrorMessage,
      'sentErrorDate': instance.sentErrorDate?.toIso8601String(),
      'retryCount': instance.retryCount,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedMessageToSendTypeName':
          instance.predefinedMessageToSendTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MessageToSendModelReturnListModel _$MessageToSendModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MessageToSendModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => MessageToSendModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MessageToSendModelReturnListModelToJson(
        MessageToSendModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MessageToSendModelReturnModel _$MessageToSendModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MessageToSendModelReturnModel(
      model: json['model'] == null
          ? null
          : MessageToSendModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MessageToSendModelReturnModelToJson(
        MessageToSendModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MetaDataCreateModel _$MetaDataCreateModelFromJson(Map<String, dynamic> json) =>
    MetaDataCreateModel(
      metaDataName: json['metaDataName'] as String?,
      metaDataCode: json['metaDataCode'] as String?,
      metaDataGroupId: (json['metaDataGroupId'] as num?)?.toInt(),
      parent1MetaDataId: (json['parent1MetaDataId'] as num?)?.toInt(),
      parent2MetaDataId: (json['parent2MetaDataId'] as num?)?.toInt(),
      parent3MetaDataId: (json['parent3MetaDataId'] as num?)?.toInt(),
      parent4MetaDataId: (json['parent4MetaDataId'] as num?)?.toInt(),
      parent5MetaDataId: (json['parent5MetaDataId'] as num?)?.toInt(),
      parent1MetaDataGroupId: (json['parent1MetaDataGroupId'] as num?)?.toInt(),
      parent2MetaDataGroupId: (json['parent2MetaDataGroupId'] as num?)?.toInt(),
      parent3MetaDataGroupId: (json['parent3MetaDataGroupId'] as num?)?.toInt(),
      parent4MetaDataGroupId: (json['parent4MetaDataGroupId'] as num?)?.toInt(),
      parent5MetaDataGroupId: (json['parent5MetaDataGroupId'] as num?)?.toInt(),
      metaDataGroupSectionId: (json['metaDataGroupSectionId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      metaDataTypeValueId: (json['metaDataTypeValueId'] as num?)?.toInt(),
      isEditable: json['isEditable'] as bool?,
      isActive: json['isActive'] as bool?,
      copiedFromMetaDataId: (json['copiedFromMetaDataId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataCreateModelToJson(
        MetaDataCreateModel instance) =>
    <String, dynamic>{
      'metaDataName': instance.metaDataName,
      'metaDataCode': instance.metaDataCode,
      'metaDataGroupId': instance.metaDataGroupId,
      'parent1MetaDataId': instance.parent1MetaDataId,
      'parent2MetaDataId': instance.parent2MetaDataId,
      'parent3MetaDataId': instance.parent3MetaDataId,
      'parent4MetaDataId': instance.parent4MetaDataId,
      'parent5MetaDataId': instance.parent5MetaDataId,
      'parent1MetaDataGroupId': instance.parent1MetaDataGroupId,
      'parent2MetaDataGroupId': instance.parent2MetaDataGroupId,
      'parent3MetaDataGroupId': instance.parent3MetaDataGroupId,
      'parent4MetaDataGroupId': instance.parent4MetaDataGroupId,
      'parent5MetaDataGroupId': instance.parent5MetaDataGroupId,
      'metaDataGroupSectionId': instance.metaDataGroupSectionId,
      'companyId': instance.companyId,
      'metaDataTypeValueId': instance.metaDataTypeValueId,
      'isEditable': instance.isEditable,
      'isActive': instance.isActive,
      'copiedFromMetaDataId': instance.copiedFromMetaDataId,
    };

MetaDataGroupCreateModel _$MetaDataGroupCreateModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataGroupCreateModel(
      metaDataGroupName: json['metaDataGroupName'] as String?,
      metaDataGroupCode: json['metaDataGroupCode'] as String?,
      parentMetaDataGroupId: (json['parentMetaDataGroupId'] as num?)?.toInt(),
      predefinedMetaDataGroupTypeId:
          (json['predefinedMetaDataGroupTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataGroupCreateModelToJson(
        MetaDataGroupCreateModel instance) =>
    <String, dynamic>{
      'metaDataGroupName': instance.metaDataGroupName,
      'metaDataGroupCode': instance.metaDataGroupCode,
      'parentMetaDataGroupId': instance.parentMetaDataGroupId,
      'predefinedMetaDataGroupTypeId': instance.predefinedMetaDataGroupTypeId,
      'companyId': instance.companyId,
    };

MetaDataGroupModel _$MetaDataGroupModelFromJson(Map<String, dynamic> json) =>
    MetaDataGroupModel(
      metaDataGroupId: (json['metaDataGroupId'] as num?)?.toInt(),
      metaDataGroupName: json['metaDataGroupName'] as String?,
      metaDataGroupCode: json['metaDataGroupCode'] as String?,
      parentMetaDataGroupId: (json['parentMetaDataGroupId'] as num?)?.toInt(),
      predefinedMetaDataGroupTypeId:
          (json['predefinedMetaDataGroupTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      parentMetaDataGroupName: json['parentMetaDataGroupName'] as String?,
      predefinedMetaDataGroupTypeName:
          json['predefinedMetaDataGroupTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MetaDataGroupModelToJson(MetaDataGroupModel instance) =>
    <String, dynamic>{
      'metaDataGroupId': instance.metaDataGroupId,
      'metaDataGroupName': instance.metaDataGroupName,
      'metaDataGroupCode': instance.metaDataGroupCode,
      'parentMetaDataGroupId': instance.parentMetaDataGroupId,
      'predefinedMetaDataGroupTypeId': instance.predefinedMetaDataGroupTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'parentMetaDataGroupName': instance.parentMetaDataGroupName,
      'predefinedMetaDataGroupTypeName':
          instance.predefinedMetaDataGroupTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MetaDataGroupModelReturnListModel _$MetaDataGroupModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataGroupModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => MetaDataGroupModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataGroupModelReturnListModelToJson(
        MetaDataGroupModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MetaDataGroupModelReturnModel _$MetaDataGroupModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataGroupModelReturnModel(
      model: json['model'] == null
          ? null
          : MetaDataGroupModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataGroupModelReturnModelToJson(
        MetaDataGroupModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MetaDataGroupSectionCreateModel _$MetaDataGroupSectionCreateModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataGroupSectionCreateModel(
      metaDataGroupSectionName: json['metaDataGroupSectionName'] as String?,
      metaDataGroupId: (json['metaDataGroupId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataGroupSectionCreateModelToJson(
        MetaDataGroupSectionCreateModel instance) =>
    <String, dynamic>{
      'metaDataGroupSectionName': instance.metaDataGroupSectionName,
      'metaDataGroupId': instance.metaDataGroupId,
    };

MetaDataGroupSectionModel _$MetaDataGroupSectionModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataGroupSectionModel(
      metaDataGroupSectionId: (json['metaDataGroupSectionId'] as num?)?.toInt(),
      metaDataGroupSectionName: json['metaDataGroupSectionName'] as String?,
      metaDataGroupId: (json['metaDataGroupId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      metaDataGroupName: json['metaDataGroupName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MetaDataGroupSectionModelToJson(
        MetaDataGroupSectionModel instance) =>
    <String, dynamic>{
      'metaDataGroupSectionId': instance.metaDataGroupSectionId,
      'metaDataGroupSectionName': instance.metaDataGroupSectionName,
      'metaDataGroupId': instance.metaDataGroupId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'metaDataGroupName': instance.metaDataGroupName,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MetaDataGroupSectionModelReturnListModel
    _$MetaDataGroupSectionModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MetaDataGroupSectionModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MetaDataGroupSectionModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MetaDataGroupSectionModelReturnListModelToJson(
        MetaDataGroupSectionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MetaDataGroupSectionModelReturnModel
    _$MetaDataGroupSectionModelReturnModelFromJson(Map<String, dynamic> json) =>
        MetaDataGroupSectionModelReturnModel(
          model: json['model'] == null
              ? null
              : MetaDataGroupSectionModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MetaDataGroupSectionModelReturnModelToJson(
        MetaDataGroupSectionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MetaDataGroupSectionUpdateModel _$MetaDataGroupSectionUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataGroupSectionUpdateModel(
      metaDataGroupSectionId: (json['metaDataGroupSectionId'] as num?)?.toInt(),
      metaDataGroupSectionName: json['metaDataGroupSectionName'] as String?,
      metaDataGroupId: (json['metaDataGroupId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataGroupSectionUpdateModelToJson(
        MetaDataGroupSectionUpdateModel instance) =>
    <String, dynamic>{
      'metaDataGroupSectionId': instance.metaDataGroupSectionId,
      'metaDataGroupSectionName': instance.metaDataGroupSectionName,
      'metaDataGroupId': instance.metaDataGroupId,
    };

MetaDataGroupUpdateModel _$MetaDataGroupUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataGroupUpdateModel(
      metaDataGroupId: (json['metaDataGroupId'] as num?)?.toInt(),
      metaDataGroupName: json['metaDataGroupName'] as String?,
      metaDataGroupCode: json['metaDataGroupCode'] as String?,
      parentMetaDataGroupId: (json['parentMetaDataGroupId'] as num?)?.toInt(),
      predefinedMetaDataGroupTypeId:
          (json['predefinedMetaDataGroupTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataGroupUpdateModelToJson(
        MetaDataGroupUpdateModel instance) =>
    <String, dynamic>{
      'metaDataGroupId': instance.metaDataGroupId,
      'metaDataGroupName': instance.metaDataGroupName,
      'metaDataGroupCode': instance.metaDataGroupCode,
      'parentMetaDataGroupId': instance.parentMetaDataGroupId,
      'predefinedMetaDataGroupTypeId': instance.predefinedMetaDataGroupTypeId,
      'companyId': instance.companyId,
    };

MetaDataModel _$MetaDataModelFromJson(Map<String, dynamic> json) =>
    MetaDataModel(
      metaDataId: (json['metaDataId'] as num?)?.toInt(),
      metaDataName: json['metaDataName'] as String?,
      metaDataCode: json['metaDataCode'] as String?,
      metaDataGroupId: (json['metaDataGroupId'] as num?)?.toInt(),
      parent1MetaDataId: (json['parent1MetaDataId'] as num?)?.toInt(),
      parent2MetaDataId: (json['parent2MetaDataId'] as num?)?.toInt(),
      parent3MetaDataId: (json['parent3MetaDataId'] as num?)?.toInt(),
      parent4MetaDataId: (json['parent4MetaDataId'] as num?)?.toInt(),
      parent5MetaDataId: (json['parent5MetaDataId'] as num?)?.toInt(),
      parent1MetaDataGroupId: (json['parent1MetaDataGroupId'] as num?)?.toInt(),
      parent2MetaDataGroupId: (json['parent2MetaDataGroupId'] as num?)?.toInt(),
      parent3MetaDataGroupId: (json['parent3MetaDataGroupId'] as num?)?.toInt(),
      parent4MetaDataGroupId: (json['parent4MetaDataGroupId'] as num?)?.toInt(),
      parent5MetaDataGroupId: (json['parent5MetaDataGroupId'] as num?)?.toInt(),
      metaDataGroupSectionId: (json['metaDataGroupSectionId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      metaDataTypeValueId: (json['metaDataTypeValueId'] as num?)?.toInt(),
      isEditable: json['isEditable'] as bool?,
      isActive: json['isActive'] as bool?,
      copiedFromMetaDataId: (json['copiedFromMetaDataId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      metaDataGroupName: json['metaDataGroupName'] as String?,
      parent1MetaDataName: json['parent1MetaDataName'] as String?,
      parent2MetaDataName: json['parent2MetaDataName'] as String?,
      parent3MetaDataName: json['parent3MetaDataName'] as String?,
      parent4MetaDataName: json['parent4MetaDataName'] as String?,
      parent5MetaDataName: json['parent5MetaDataName'] as String?,
      parent1MetaDataGroupName: json['parent1MetaDataGroupName'] as String?,
      parent2MetaDataGroupName: json['parent2MetaDataGroupName'] as String?,
      parent3MetaDataGroupName: json['parent3MetaDataGroupName'] as String?,
      parent4MetaDataGroupName: json['parent4MetaDataGroupName'] as String?,
      parent5MetaDataGroupName: json['parent5MetaDataGroupName'] as String?,
      metaDataGroupSectionName: json['metaDataGroupSectionName'] as String?,
      companyName: json['companyName'] as String?,
      metaDataTypeValueName: json['metaDataTypeValueName'] as String?,
      copiedFromMetaDataName: json['copiedFromMetaDataName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MetaDataModelToJson(MetaDataModel instance) =>
    <String, dynamic>{
      'metaDataId': instance.metaDataId,
      'metaDataName': instance.metaDataName,
      'metaDataCode': instance.metaDataCode,
      'metaDataGroupId': instance.metaDataGroupId,
      'parent1MetaDataId': instance.parent1MetaDataId,
      'parent2MetaDataId': instance.parent2MetaDataId,
      'parent3MetaDataId': instance.parent3MetaDataId,
      'parent4MetaDataId': instance.parent4MetaDataId,
      'parent5MetaDataId': instance.parent5MetaDataId,
      'parent1MetaDataGroupId': instance.parent1MetaDataGroupId,
      'parent2MetaDataGroupId': instance.parent2MetaDataGroupId,
      'parent3MetaDataGroupId': instance.parent3MetaDataGroupId,
      'parent4MetaDataGroupId': instance.parent4MetaDataGroupId,
      'parent5MetaDataGroupId': instance.parent5MetaDataGroupId,
      'metaDataGroupSectionId': instance.metaDataGroupSectionId,
      'companyId': instance.companyId,
      'metaDataTypeValueId': instance.metaDataTypeValueId,
      'isEditable': instance.isEditable,
      'isActive': instance.isActive,
      'copiedFromMetaDataId': instance.copiedFromMetaDataId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'metaDataGroupName': instance.metaDataGroupName,
      'parent1MetaDataName': instance.parent1MetaDataName,
      'parent2MetaDataName': instance.parent2MetaDataName,
      'parent3MetaDataName': instance.parent3MetaDataName,
      'parent4MetaDataName': instance.parent4MetaDataName,
      'parent5MetaDataName': instance.parent5MetaDataName,
      'parent1MetaDataGroupName': instance.parent1MetaDataGroupName,
      'parent2MetaDataGroupName': instance.parent2MetaDataGroupName,
      'parent3MetaDataGroupName': instance.parent3MetaDataGroupName,
      'parent4MetaDataGroupName': instance.parent4MetaDataGroupName,
      'parent5MetaDataGroupName': instance.parent5MetaDataGroupName,
      'metaDataGroupSectionName': instance.metaDataGroupSectionName,
      'companyName': instance.companyName,
      'metaDataTypeValueName': instance.metaDataTypeValueName,
      'copiedFromMetaDataName': instance.copiedFromMetaDataName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MetaDataModelReturnListModel _$MetaDataModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MetaDataModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataModelReturnListModelToJson(
        MetaDataModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MetaDataModelReturnModel _$MetaDataModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MetaDataModelReturnModel(
      model: json['model'] == null
          ? null
          : MetaDataModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataModelReturnModelToJson(
        MetaDataModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MetaDataUpdateModel _$MetaDataUpdateModelFromJson(Map<String, dynamic> json) =>
    MetaDataUpdateModel(
      metaDataId: (json['metaDataId'] as num?)?.toInt(),
      metaDataName: json['metaDataName'] as String?,
      metaDataCode: json['metaDataCode'] as String?,
      metaDataGroupId: (json['metaDataGroupId'] as num?)?.toInt(),
      parent1MetaDataId: (json['parent1MetaDataId'] as num?)?.toInt(),
      parent2MetaDataId: (json['parent2MetaDataId'] as num?)?.toInt(),
      parent3MetaDataId: (json['parent3MetaDataId'] as num?)?.toInt(),
      parent4MetaDataId: (json['parent4MetaDataId'] as num?)?.toInt(),
      parent5MetaDataId: (json['parent5MetaDataId'] as num?)?.toInt(),
      parent1MetaDataGroupId: (json['parent1MetaDataGroupId'] as num?)?.toInt(),
      parent2MetaDataGroupId: (json['parent2MetaDataGroupId'] as num?)?.toInt(),
      parent3MetaDataGroupId: (json['parent3MetaDataGroupId'] as num?)?.toInt(),
      parent4MetaDataGroupId: (json['parent4MetaDataGroupId'] as num?)?.toInt(),
      parent5MetaDataGroupId: (json['parent5MetaDataGroupId'] as num?)?.toInt(),
      metaDataGroupSectionId: (json['metaDataGroupSectionId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      metaDataTypeValueId: (json['metaDataTypeValueId'] as num?)?.toInt(),
      isEditable: json['isEditable'] as bool?,
      isActive: json['isActive'] as bool?,
      copiedFromMetaDataId: (json['copiedFromMetaDataId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MetaDataUpdateModelToJson(
        MetaDataUpdateModel instance) =>
    <String, dynamic>{
      'metaDataId': instance.metaDataId,
      'metaDataName': instance.metaDataName,
      'metaDataCode': instance.metaDataCode,
      'metaDataGroupId': instance.metaDataGroupId,
      'parent1MetaDataId': instance.parent1MetaDataId,
      'parent2MetaDataId': instance.parent2MetaDataId,
      'parent3MetaDataId': instance.parent3MetaDataId,
      'parent4MetaDataId': instance.parent4MetaDataId,
      'parent5MetaDataId': instance.parent5MetaDataId,
      'parent1MetaDataGroupId': instance.parent1MetaDataGroupId,
      'parent2MetaDataGroupId': instance.parent2MetaDataGroupId,
      'parent3MetaDataGroupId': instance.parent3MetaDataGroupId,
      'parent4MetaDataGroupId': instance.parent4MetaDataGroupId,
      'parent5MetaDataGroupId': instance.parent5MetaDataGroupId,
      'metaDataGroupSectionId': instance.metaDataGroupSectionId,
      'companyId': instance.companyId,
      'metaDataTypeValueId': instance.metaDataTypeValueId,
      'isEditable': instance.isEditable,
      'isActive': instance.isActive,
      'copiedFromMetaDataId': instance.copiedFromMetaDataId,
    };

MlModelTrainingSessionCreateModel _$MlModelTrainingSessionCreateModelFromJson(
        Map<String, dynamic> json) =>
    MlModelTrainingSessionCreateModel(
      jobId: (json['jobId'] as num?)?.toInt(),
      mlModelTrainingNameSession: json['mlModelTrainingNameSession'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      sessionDate: json['sessionDate'] == null
          ? null
          : DateTime.parse(json['sessionDate'] as String),
      message: json['message'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MlModelTrainingSessionCreateModelToJson(
        MlModelTrainingSessionCreateModel instance) =>
    <String, dynamic>{
      'jobId': instance.jobId,
      'mlModelTrainingNameSession': instance.mlModelTrainingNameSession,
      'movieId': instance.movieId,
      'sessionDate': instance.sessionDate?.toIso8601String(),
      'message': instance.message,
      'companyId': instance.companyId,
    };

MlModelTrainingSessionModel _$MlModelTrainingSessionModelFromJson(
        Map<String, dynamic> json) =>
    MlModelTrainingSessionModel(
      mlModelTrainingSessionId:
          (json['mlModelTrainingSessionId'] as num?)?.toInt(),
      jobId: (json['jobId'] as num?)?.toInt(),
      mlModelTrainingNameSession: json['mlModelTrainingNameSession'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      sessionDate: json['sessionDate'] == null
          ? null
          : DateTime.parse(json['sessionDate'] as String),
      message: json['message'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      jobName: json['jobName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MlModelTrainingSessionModelToJson(
        MlModelTrainingSessionModel instance) =>
    <String, dynamic>{
      'mlModelTrainingSessionId': instance.mlModelTrainingSessionId,
      'jobId': instance.jobId,
      'mlModelTrainingNameSession': instance.mlModelTrainingNameSession,
      'movieId': instance.movieId,
      'sessionDate': instance.sessionDate?.toIso8601String(),
      'message': instance.message,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'jobName': instance.jobName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MlModelTrainingSessionModelReturnListModel
    _$MlModelTrainingSessionModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MlModelTrainingSessionModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MlModelTrainingSessionModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MlModelTrainingSessionModelReturnListModelToJson(
        MlModelTrainingSessionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MlModelTrainingSessionModelReturnModel
    _$MlModelTrainingSessionModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MlModelTrainingSessionModelReturnModel(
          model: json['model'] == null
              ? null
              : MlModelTrainingSessionModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MlModelTrainingSessionModelReturnModelToJson(
        MlModelTrainingSessionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MlModelTrainingSessionUpdateModel _$MlModelTrainingSessionUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MlModelTrainingSessionUpdateModel(
      mlModelTrainingSessionId:
          (json['mlModelTrainingSessionId'] as num?)?.toInt(),
      jobId: (json['jobId'] as num?)?.toInt(),
      mlModelTrainingNameSession: json['mlModelTrainingNameSession'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      sessionDate: json['sessionDate'] == null
          ? null
          : DateTime.parse(json['sessionDate'] as String),
      message: json['message'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MlModelTrainingSessionUpdateModelToJson(
        MlModelTrainingSessionUpdateModel instance) =>
    <String, dynamic>{
      'mlModelTrainingSessionId': instance.mlModelTrainingSessionId,
      'jobId': instance.jobId,
      'mlModelTrainingNameSession': instance.mlModelTrainingNameSession,
      'movieId': instance.movieId,
      'sessionDate': instance.sessionDate?.toIso8601String(),
      'message': instance.message,
      'companyId': instance.companyId,
    };

MonthlyMovieShootDayBudgetExpenseSummaryModel
    _$MonthlyMovieShootDayBudgetExpenseSummaryModelFromJson(
            Map<String, dynamic> json) =>
        MonthlyMovieShootDayBudgetExpenseSummaryModel(
          month: (json['month'] as num?)?.toInt(),
          year: (json['year'] as num?)?.toInt(),
          predefinedBudgetDivisionTypeId:
              (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
          predefinedBudgetDivisionTypeName:
              json['predefinedBudgetDivisionTypeName'] as String?,
          totalBudgetAmount: (json['totalBudgetAmount'] as num?)?.toDouble(),
          totalExpenseAmount: (json['totalExpenseAmount'] as num?)?.toDouble(),
          totalPaidAmount: (json['totalPaidAmount'] as num?)?.toDouble(),
        );

Map<String, dynamic> _$MonthlyMovieShootDayBudgetExpenseSummaryModelToJson(
        MonthlyMovieShootDayBudgetExpenseSummaryModel instance) =>
    <String, dynamic>{
      'month': instance.month,
      'year': instance.year,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'predefinedBudgetDivisionTypeName':
          instance.predefinedBudgetDivisionTypeName,
      'totalBudgetAmount': instance.totalBudgetAmount,
      'totalExpenseAmount': instance.totalExpenseAmount,
      'totalPaidAmount': instance.totalPaidAmount,
    };

MonthlyMovieShootDayBudgetExpenseSummaryModelReturnListModel
    _$MonthlyMovieShootDayBudgetExpenseSummaryModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MonthlyMovieShootDayBudgetExpenseSummaryModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MonthlyMovieShootDayBudgetExpenseSummaryModel.fromJson(
                          e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MonthlyMovieShootDayBudgetExpenseSummaryModelReturnListModelToJson(
            MonthlyMovieShootDayBudgetExpenseSummaryModelReturnListModel
                instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieArtistCreateModel _$MovieArtistCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistCreateModel(
      movieArtistCode: json['movieArtistCode'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      artistCharacterName: json['artistCharacterName'] as String?,
      parentMovieArtistId: (json['parentMovieArtistId'] as num?)?.toInt(),
      movieArtistName: json['movieArtistName'] as String?,
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isPrimaryCast: json['isPrimaryCast'] as bool?,
      ignoreCurrentMovieShootDayId:
          (json['ignoreCurrentMovieShootDayId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      newMovieArtistRates: (json['newMovieArtistRates'] as List<dynamic>?)
              ?.map((e) => MovieArtistRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieArtistCreateModelToJson(
        MovieArtistCreateModel instance) =>
    <String, dynamic>{
      'movieArtistCode': instance.movieArtistCode,
      'artistId': instance.artistId,
      'artistTypeId': instance.artistTypeId,
      'artistCharacterName': instance.artistCharacterName,
      'parentMovieArtistId': instance.parentMovieArtistId,
      'movieArtistName': instance.movieArtistName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'requiredDays': instance.requiredDays,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'estimatedRate': instance.estimatedRate,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'ignoreCurrentMovieShootDayId': instance.ignoreCurrentMovieShootDayId,
      'useDefaultRates': instance.useDefaultRates,
      'newMovieArtistRates':
          instance.newMovieArtistRates?.map((e) => e.toJson()).toList(),
    };

MovieArtistModel _$MovieArtistModelFromJson(Map<String, dynamic> json) =>
    MovieArtistModel(
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieArtistCode: json['movieArtistCode'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      artistCharacterName: json['artistCharacterName'] as String?,
      parentMovieArtistId: (json['parentMovieArtistId'] as num?)?.toInt(),
      movieArtistName: json['movieArtistName'] as String?,
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isPrimaryCast: json['isPrimaryCast'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      predefinedContractStatusTypeId:
          (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
      predefinedContractStatusTypeName:
          json['predefinedContractStatusTypeName'] as String?,
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      notes: json['notes'] as String?,
      parentArtistFirstName: json['parentArtistFirstName'] as String?,
      parentArtistLastName: json['parentArtistLastName'] as String?,
      departmentName: json['departmentName'] as String?,
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      artistWorkPhone: json['artistWorkPhone'] as String?,
      artistCellPhone: json['artistCellPhone'] as String?,
      artistEmail: json['artistEmail'] as String?,
      artistAssistantName: json['artistAssistantName'] as String?,
      artistAssistantPhone: json['artistAssistantPhone'] as String?,
      artistAssistantEmail: json['artistAssistantEmail'] as String?,
      predefinedContractAssignmentStatusTypeName:
          json['predefinedContractAssignmentStatusTypeName'] as String?,
      contractName: json['contractName'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      parentMovieArtistName: json['parentMovieArtistName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTitle: json['movieTitle'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      isMovieEnabled: json['isMovieEnabled'] as bool?,
      artistCode: json['artistCode'] as String?,
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      defaultPreProductionMovieBudgetCategoryName:
          json['defaultPreProductionMovieBudgetCategoryName'] as String?,
      defaultProductionMovieBudgetCategoryName:
          json['defaultProductionMovieBudgetCategoryName'] as String?,
      defaultPostProductionMovieBudgetCategoryName:
          json['defaultPostProductionMovieBudgetCategoryName'] as String?,
      defaultPreProductionMovieBudgetCategoryCode:
          json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
      defaultProductionMovieBudgetCategoryCode:
          json['defaultProductionMovieBudgetCategoryCode'] as String?,
      defaultPostProductionMovieBudgetCategoryCode:
          json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingMovieArtistRates:
          (json['existingMovieArtistRates'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieArtistRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieArtistModelToJson(MovieArtistModel instance) =>
    <String, dynamic>{
      'movieArtistId': instance.movieArtistId,
      'movieArtistCode': instance.movieArtistCode,
      'artistId': instance.artistId,
      'artistTypeId': instance.artistTypeId,
      'artistCharacterName': instance.artistCharacterName,
      'parentMovieArtistId': instance.parentMovieArtistId,
      'movieArtistName': instance.movieArtistName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'requiredDays': instance.requiredDays,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'estimatedRate': instance.estimatedRate,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'notes': instance.notes,
      'parentArtistFirstName': instance.parentArtistFirstName,
      'parentArtistLastName': instance.parentArtistLastName,
      'departmentName': instance.departmentName,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'artistWorkPhone': instance.artistWorkPhone,
      'artistCellPhone': instance.artistCellPhone,
      'artistEmail': instance.artistEmail,
      'artistAssistantName': instance.artistAssistantName,
      'artistAssistantPhone': instance.artistAssistantPhone,
      'artistAssistantEmail': instance.artistAssistantEmail,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'contractName': instance.contractName,
      'artistTypeName': instance.artistTypeName,
      'parentMovieArtistName': instance.parentMovieArtistName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'artistCode': instance.artistCode,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieArtistRates':
          instance.existingMovieArtistRates?.map((e) => e.toJson()).toList(),
    };

MovieArtistModelReturnListModel _$MovieArtistModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MovieArtistModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieArtistModelReturnListModelToJson(
        MovieArtistModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieArtistModelReturnModel _$MovieArtistModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieArtistModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieArtistModelReturnModelToJson(
        MovieArtistModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieArtistRateCreateModel _$MovieArtistRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistRateCreateModel(
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieArtistRateCreateModelToJson(
        MovieArtistRateCreateModel instance) =>
    <String, dynamic>{
      'movieArtistId': instance.movieArtistId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieArtistRateModel _$MovieArtistRateModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistRateModel(
      movieArtistRateId: (json['movieArtistRateId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieArtistName: json['movieArtistName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      companyName: json['companyName'] as String?,
      movieArtistCode: json['movieArtistCode'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieArtistRateModelToJson(
        MovieArtistRateModel instance) =>
    <String, dynamic>{
      'movieArtistRateId': instance.movieArtistRateId,
      'movieArtistId': instance.movieArtistId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieArtistName': instance.movieArtistName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'companyName': instance.companyName,
      'movieArtistCode': instance.movieArtistCode,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieArtistRateModelReturnListModel
    _$MovieArtistRateModelReturnListModelFromJson(Map<String, dynamic> json) =>
        MovieArtistRateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieArtistRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieArtistRateModelReturnListModelToJson(
        MovieArtistRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieArtistRateModelReturnModel _$MovieArtistRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistRateModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieArtistRateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieArtistRateModelReturnModelToJson(
        MovieArtistRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieArtistRateUpdateModel _$MovieArtistRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistRateUpdateModel(
      movieArtistRateId: (json['movieArtistRateId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieArtistRateUpdateModelToJson(
        MovieArtistRateUpdateModel instance) =>
    <String, dynamic>{
      'movieArtistRateId': instance.movieArtistRateId,
      'movieArtistId': instance.movieArtistId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieArtistUpdateModel _$MovieArtistUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistUpdateModel(
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieArtistCode: json['movieArtistCode'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      artistCharacterName: json['artistCharacterName'] as String?,
      parentMovieArtistId: (json['parentMovieArtistId'] as num?)?.toInt(),
      movieArtistName: json['movieArtistName'] as String?,
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isPrimaryCast: json['isPrimaryCast'] as bool?,
      ignoreCurrentMovieShootDayId:
          (json['ignoreCurrentMovieShootDayId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      existingMovieArtistRates:
          (json['existingMovieArtistRates'] as List<dynamic>?)
                  ?.map((e) => MovieArtistRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newMovieArtistRates: (json['newMovieArtistRates'] as List<dynamic>?)
              ?.map((e) => MovieArtistRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieArtistUpdateModelToJson(
        MovieArtistUpdateModel instance) =>
    <String, dynamic>{
      'movieArtistId': instance.movieArtistId,
      'movieArtistCode': instance.movieArtistCode,
      'artistId': instance.artistId,
      'artistTypeId': instance.artistTypeId,
      'artistCharacterName': instance.artistCharacterName,
      'parentMovieArtistId': instance.parentMovieArtistId,
      'movieArtistName': instance.movieArtistName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'requiredDays': instance.requiredDays,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'estimatedRate': instance.estimatedRate,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'ignoreCurrentMovieShootDayId': instance.ignoreCurrentMovieShootDayId,
      'useDefaultRates': instance.useDefaultRates,
      'existingMovieArtistRates':
          instance.existingMovieArtistRates?.map((e) => e.toJson()).toList(),
      'newMovieArtistRates':
          instance.newMovieArtistRates?.map((e) => e.toJson()).toList(),
    };

MovieArtistWithCompanyArtistCreateModel
    _$MovieArtistWithCompanyArtistCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieArtistWithCompanyArtistCreateModel(
          artistCode: json['artistCode'] as String?,
          artistFirstName: json['artistFirstName'] as String?,
          artistLastName: json['artistLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          departmentId: (json['departmentId'] as num?)?.toInt(),
          artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isPrimaryCast: json['isPrimaryCast'] as bool?,
          isDisabled: json['isDisabled'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newArtistRates: (json['newArtistRates'] as List<dynamic>?)
                  ?.map((e) =>
                      ArtistRateCreateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieArtistCode: json['movieArtistCode'] as String?,
          artistId: (json['artistId'] as num?)?.toInt(),
          artistCharacterName: json['artistCharacterName'] as String?,
          parentMovieArtistId: (json['parentMovieArtistId'] as num?)?.toInt(),
          movieArtistName: json['movieArtistName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieArtistWithCompanyArtistCreateModelToJson(
        MovieArtistWithCompanyArtistCreateModel instance) =>
    <String, dynamic>{
      'artistCode': instance.artistCode,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'departmentId': instance.departmentId,
      'artistTypeId': instance.artistTypeId,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'isDisabled': instance.isDisabled,
      'useDefaultRates': instance.useDefaultRates,
      'newArtistRates':
          instance.newArtistRates?.map((e) => e.toJson()).toList(),
      'movieArtistId': instance.movieArtistId,
      'movieArtistCode': instance.movieArtistCode,
      'artistId': instance.artistId,
      'artistCharacterName': instance.artistCharacterName,
      'parentMovieArtistId': instance.parentMovieArtistId,
      'movieArtistName': instance.movieArtistName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'movieId': instance.movieId,
    };

MovieArtistWithCompanyArtistModel _$MovieArtistWithCompanyArtistModelFromJson(
        Map<String, dynamic> json) =>
    MovieArtistWithCompanyArtistModel(
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieArtistCode: json['movieArtistCode'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      artistCharacterName: json['artistCharacterName'] as String?,
      parentMovieArtistId: (json['parentMovieArtistId'] as num?)?.toInt(),
      movieArtistName: json['movieArtistName'] as String?,
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isPrimaryCast: json['isPrimaryCast'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      predefinedContractStatusTypeId:
          (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
      predefinedContractStatusTypeName:
          json['predefinedContractStatusTypeName'] as String?,
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      notes: json['notes'] as String?,
      parentArtistFirstName: json['parentArtistFirstName'] as String?,
      parentArtistLastName: json['parentArtistLastName'] as String?,
      departmentName: json['departmentName'] as String?,
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      artistWorkPhone: json['artistWorkPhone'] as String?,
      artistCellPhone: json['artistCellPhone'] as String?,
      artistEmail: json['artistEmail'] as String?,
      artistAssistantName: json['artistAssistantName'] as String?,
      artistAssistantPhone: json['artistAssistantPhone'] as String?,
      artistAssistantEmail: json['artistAssistantEmail'] as String?,
      predefinedContractAssignmentStatusTypeName:
          json['predefinedContractAssignmentStatusTypeName'] as String?,
      contractName: json['contractName'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      parentMovieArtistName: json['parentMovieArtistName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTitle: json['movieTitle'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      isMovieEnabled: json['isMovieEnabled'] as bool?,
      artistCode: json['artistCode'] as String?,
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      defaultPreProductionMovieBudgetCategoryName:
          json['defaultPreProductionMovieBudgetCategoryName'] as String?,
      defaultProductionMovieBudgetCategoryName:
          json['defaultProductionMovieBudgetCategoryName'] as String?,
      defaultPostProductionMovieBudgetCategoryName:
          json['defaultPostProductionMovieBudgetCategoryName'] as String?,
      defaultPreProductionMovieBudgetCategoryCode:
          json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
      defaultProductionMovieBudgetCategoryCode:
          json['defaultProductionMovieBudgetCategoryCode'] as String?,
      defaultPostProductionMovieBudgetCategoryCode:
          json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingMovieArtistRates:
          (json['existingMovieArtistRates'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieArtistRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
      isNonMovieArtist: json['isNonMovieArtist'] as bool?,
    );

Map<String, dynamic> _$MovieArtistWithCompanyArtistModelToJson(
        MovieArtistWithCompanyArtistModel instance) =>
    <String, dynamic>{
      'movieArtistId': instance.movieArtistId,
      'movieArtistCode': instance.movieArtistCode,
      'artistId': instance.artistId,
      'artistTypeId': instance.artistTypeId,
      'artistCharacterName': instance.artistCharacterName,
      'parentMovieArtistId': instance.parentMovieArtistId,
      'movieArtistName': instance.movieArtistName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'requiredDays': instance.requiredDays,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'estimatedRate': instance.estimatedRate,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isPrimaryCast': instance.isPrimaryCast,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'notes': instance.notes,
      'parentArtistFirstName': instance.parentArtistFirstName,
      'parentArtistLastName': instance.parentArtistLastName,
      'departmentName': instance.departmentName,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'artistWorkPhone': instance.artistWorkPhone,
      'artistCellPhone': instance.artistCellPhone,
      'artistEmail': instance.artistEmail,
      'artistAssistantName': instance.artistAssistantName,
      'artistAssistantPhone': instance.artistAssistantPhone,
      'artistAssistantEmail': instance.artistAssistantEmail,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'contractName': instance.contractName,
      'artistTypeName': instance.artistTypeName,
      'parentMovieArtistName': instance.parentMovieArtistName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'artistCode': instance.artistCode,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieArtistRates':
          instance.existingMovieArtistRates?.map((e) => e.toJson()).toList(),
      'isNonMovieArtist': instance.isNonMovieArtist,
    };

MovieArtistWithCompanyArtistModelReturnListModel
    _$MovieArtistWithCompanyArtistModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieArtistWithCompanyArtistModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieArtistWithCompanyArtistModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieArtistWithCompanyArtistModelReturnListModelToJson(
        MovieArtistWithCompanyArtistModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieBudgetCategoryCreateModel _$MovieBudgetCategoryCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieBudgetCategoryCreateModel(
      accountNumber: json['accountNumber'] as String?,
      movieBudgetCategoryCode: json['movieBudgetCategoryCode'] as String?,
      movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      parentMovieBudgetCategoryId:
          (json['parentMovieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetCategoryTypeId:
          (json['predefinedBudgetCategoryTypeId'] as num?)?.toInt(),
      copiedFromBudgetCategoryId:
          (json['copiedFromBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      canDirectlySetBudgetValue: json['canDirectlySetBudgetValue'] as bool?,
      directlySetBudgetValue:
          (json['directlySetBudgetValue'] as num?)?.toDouble(),
      rollupBudgetValue: (json['rollupBudgetValue'] as num?)?.toDouble(),
    );

Map<String, dynamic> _$MovieBudgetCategoryCreateModelToJson(
        MovieBudgetCategoryCreateModel instance) =>
    <String, dynamic>{
      'accountNumber': instance.accountNumber,
      'movieBudgetCategoryCode': instance.movieBudgetCategoryCode,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'parentMovieBudgetCategoryId': instance.parentMovieBudgetCategoryId,
      'predefinedBudgetCategoryTypeId': instance.predefinedBudgetCategoryTypeId,
      'copiedFromBudgetCategoryId': instance.copiedFromBudgetCategoryId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
      'canDirectlySetBudgetValue': instance.canDirectlySetBudgetValue,
      'directlySetBudgetValue': instance.directlySetBudgetValue,
      'rollupBudgetValue': instance.rollupBudgetValue,
    };

MovieBudgetCategoryModel _$MovieBudgetCategoryModelFromJson(
        Map<String, dynamic> json) =>
    MovieBudgetCategoryModel(
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      accountNumber: json['accountNumber'] as String?,
      movieBudgetCategoryCode: json['movieBudgetCategoryCode'] as String?,
      movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      parentMovieBudgetCategoryId:
          (json['parentMovieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetCategoryTypeId:
          (json['predefinedBudgetCategoryTypeId'] as num?)?.toInt(),
      copiedFromBudgetCategoryId:
          (json['copiedFromBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      canDirectlySetBudgetValue: json['canDirectlySetBudgetValue'] as bool?,
      directlySetBudgetValue:
          (json['directlySetBudgetValue'] as num?)?.toDouble(),
      rollupBudgetValue: (json['rollupBudgetValue'] as num?)?.toDouble(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieBudgetDivisionName: json['movieBudgetDivisionName'] as String?,
      predefinedBudgetCategoryTypeName:
          json['predefinedBudgetCategoryTypeName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      predefinedBudgetDivisionTypeName:
          json['predefinedBudgetDivisionTypeName'] as String?,
      companyName: json['companyName'] as String?,
      movieCode: json['movieCode'] as String?,
      parentMovieBudgetCategoryName:
          json['parentMovieBudgetCategoryName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      childBudgetCategories: (json['childBudgetCategories'] as List<dynamic>?)
              ?.map((e) =>
                  MovieBudgetCategoryModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieBudgetCategoryModelToJson(
        MovieBudgetCategoryModel instance) =>
    <String, dynamic>{
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'accountNumber': instance.accountNumber,
      'movieBudgetCategoryCode': instance.movieBudgetCategoryCode,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'parentMovieBudgetCategoryId': instance.parentMovieBudgetCategoryId,
      'predefinedBudgetCategoryTypeId': instance.predefinedBudgetCategoryTypeId,
      'copiedFromBudgetCategoryId': instance.copiedFromBudgetCategoryId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
      'canDirectlySetBudgetValue': instance.canDirectlySetBudgetValue,
      'directlySetBudgetValue': instance.directlySetBudgetValue,
      'rollupBudgetValue': instance.rollupBudgetValue,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieBudgetDivisionName': instance.movieBudgetDivisionName,
      'predefinedBudgetCategoryTypeName':
          instance.predefinedBudgetCategoryTypeName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'predefinedBudgetDivisionTypeName':
          instance.predefinedBudgetDivisionTypeName,
      'companyName': instance.companyName,
      'movieCode': instance.movieCode,
      'parentMovieBudgetCategoryName': instance.parentMovieBudgetCategoryName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'childBudgetCategories':
          instance.childBudgetCategories?.map((e) => e.toJson()).toList(),
    };

MovieBudgetCategoryModelReturnListModel
    _$MovieBudgetCategoryModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetCategoryModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieBudgetCategoryModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieBudgetCategoryModelReturnListModelToJson(
        MovieBudgetCategoryModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieBudgetCategoryModelReturnModel
    _$MovieBudgetCategoryModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieBudgetCategoryModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieBudgetCategoryModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieBudgetCategoryModelReturnModelToJson(
        MovieBudgetCategoryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieBudgetCategoryNoteAttachmentModel
    _$MovieBudgetCategoryNoteAttachmentModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetCategoryNoteAttachmentModel(
          noteAttachmentId: (json['noteAttachmentId'] as num?)?.toInt(),
          title: json['title'] as String?,
          description: json['description'] as String?,
          movieId: (json['movieId'] as num?)?.toInt(),
          userId: (json['userId'] as num?)?.toInt(),
          artistId: (json['artistId'] as num?)?.toInt(),
          vendorId: (json['vendorId'] as num?)?.toInt(),
          equipmentId: (json['equipmentId'] as num?)?.toInt(),
          propertyId: (json['propertyId'] as num?)?.toInt(),
          technicianId: (json['technicianId'] as num?)?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
          movieLocationCandidateId:
              (json['movieLocationCandidateId'] as num?)?.toInt(),
          movieCommitmentTaskId:
              (json['movieCommitmentTaskId'] as num?)?.toInt(),
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
          movieSceneEquipmentId:
              (json['movieSceneEquipmentId'] as num?)?.toInt(),
          movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
          movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
          movieSceneTechnicianId:
              (json['movieSceneTechnicianId'] as num?)?.toInt(),
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieShootDayArtistId:
              (json['movieShootDayArtistId'] as num?)?.toInt(),
          movieShootDayBudgetId:
              (json['movieShootDayBudgetId'] as num?)?.toInt(),
          movieShootDayEquipmentId:
              (json['movieShootDayEquipmentId'] as num?)?.toInt(),
          movieShootDayPropertyId:
              (json['movieShootDayPropertyId'] as num?)?.toInt(),
          movieShootDayExpenseId:
              (json['movieShootDayExpenseId'] as num?)?.toInt(),
          movieShootDayRequirementId:
              (json['movieShootDayRequirementId'] as num?)?.toInt(),
          movieShootDayVendorId:
              (json['movieShootDayVendorId'] as num?)?.toInt(),
          movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
          movieShootDayTechnicianId:
              (json['movieShootDayTechnicianId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['movieBudgetCategoryId'] as num?)?.toInt(),
          movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
          movieUserId: (json['movieUserId'] as num?)?.toInt(),
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          companyName: json['companyName'] as String?,
          userName: json['userName'] as String?,
          movieCode: json['movieCode'] as String?,
          artistCode: json['artistCode'] as String?,
          technicianCode: json['technicianCode'] as String?,
          equipmentCode: json['equipmentCode'] as String?,
          vendorCode: json['vendorCode'] as String?,
          propertyCode: json['propertyCode'] as String?,
          movieArtistCode: json['movieArtistCode'] as String?,
          movieTechnicianCode: json['movieTechnicianCode'] as String?,
          movieEquipmentCode: json['movieEquipmentCode'] as String?,
          movieLocationCode: json['movieLocationCode'] as String?,
          movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
          movieVendorCode: json['movieVendorCode'] as String?,
          moviePropertyCode: json['moviePropertyCode'] as String?,
          movieSceneArtistName: json['movieSceneArtistName'] as String?,
          movieSceneTechnicianName: json['movieSceneTechnicianName'] as String?,
          movieSceneEquipmentName: json['movieSceneEquipmentName'] as String?,
          movieSceneVendorName: json['movieSceneVendorName'] as String?,
          movieScenePropertyName: json['movieScenePropertyName'] as String?,
          movieSceneCode: json['movieSceneCode'] as String?,
          movieSceneArtistCode: json['movieSceneArtistCode'] as String?,
          movieSceneTechnicianCode: json['movieSceneTechnicianCode'] as String?,
          movieSceneEquipmentCode: json['movieSceneEquipmentCode'] as String?,
          movieSceneVendorCode: json['movieSceneVendorCode'] as String?,
          movieScenePropertyCode: json['movieScenePropertyCode'] as String?,
          movieShootDayCode: json['movieShootDayCode'] as String?,
          movieShootDayArtistCode: json['movieShootDayArtistCode'] as String?,
          movieShootDayTechnicianCode:
              json['movieShootDayTechnicianCode'] as String?,
          movieShootDayEquipmentCode:
              json['movieShootDayEquipmentCode'] as String?,
          movieShootDayVendorCode: json['movieShootDayVendorCode'] as String?,
          movieShootDayPropertyCode:
              json['movieShootDayPropertyCode'] as String?,
          movieShootDayExpenseCode: json['movieShootDayExpenseCode'] as String?,
          isExpenseDeleted: json['isExpenseDeleted'] as bool?,
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
          movieBudgetDivisionId:
              (json['movieBudgetDivisionId'] as num?)?.toInt(),
          movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
          movieBudgetDivisionName: json['movieBudgetDivisionName'] as String?,
        );

Map<String, dynamic> _$MovieBudgetCategoryNoteAttachmentModelToJson(
        MovieBudgetCategoryNoteAttachmentModel instance) =>
    <String, dynamic>{
      'noteAttachmentId': instance.noteAttachmentId,
      'title': instance.title,
      'description': instance.description,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'artistId': instance.artistId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'technicianId': instance.technicianId,
      'contractId': instance.contractId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieUnitId': instance.movieUnitId,
      'movieUserId': instance.movieUserId,
      'movieVendorId': instance.movieVendorId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'userName': instance.userName,
      'movieCode': instance.movieCode,
      'artistCode': instance.artistCode,
      'technicianCode': instance.technicianCode,
      'equipmentCode': instance.equipmentCode,
      'vendorCode': instance.vendorCode,
      'propertyCode': instance.propertyCode,
      'movieArtistCode': instance.movieArtistCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieLocationCode': instance.movieLocationCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieVendorCode': instance.movieVendorCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'movieSceneArtistName': instance.movieSceneArtistName,
      'movieSceneTechnicianName': instance.movieSceneTechnicianName,
      'movieSceneEquipmentName': instance.movieSceneEquipmentName,
      'movieSceneVendorName': instance.movieSceneVendorName,
      'movieScenePropertyName': instance.movieScenePropertyName,
      'movieSceneCode': instance.movieSceneCode,
      'movieSceneArtistCode': instance.movieSceneArtistCode,
      'movieSceneTechnicianCode': instance.movieSceneTechnicianCode,
      'movieSceneEquipmentCode': instance.movieSceneEquipmentCode,
      'movieSceneVendorCode': instance.movieSceneVendorCode,
      'movieScenePropertyCode': instance.movieScenePropertyCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieShootDayArtistCode': instance.movieShootDayArtistCode,
      'movieShootDayTechnicianCode': instance.movieShootDayTechnicianCode,
      'movieShootDayEquipmentCode': instance.movieShootDayEquipmentCode,
      'movieShootDayVendorCode': instance.movieShootDayVendorCode,
      'movieShootDayPropertyCode': instance.movieShootDayPropertyCode,
      'movieShootDayExpenseCode': instance.movieShootDayExpenseCode,
      'isExpenseDeleted': instance.isExpenseDeleted,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'movieBudgetDivisionName': instance.movieBudgetDivisionName,
    };

MovieBudgetCategoryUpdateModel _$MovieBudgetCategoryUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieBudgetCategoryUpdateModel(
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      accountNumber: json['accountNumber'] as String?,
      movieBudgetCategoryCode: json['movieBudgetCategoryCode'] as String?,
      movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      parentMovieBudgetCategoryId:
          (json['parentMovieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetCategoryTypeId:
          (json['predefinedBudgetCategoryTypeId'] as num?)?.toInt(),
      copiedFromBudgetCategoryId:
          (json['copiedFromBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      canDirectlySetBudgetValue: json['canDirectlySetBudgetValue'] as bool?,
      directlySetBudgetValue:
          (json['directlySetBudgetValue'] as num?)?.toDouble(),
      rollupBudgetValue: (json['rollupBudgetValue'] as num?)?.toDouble(),
    );

Map<String, dynamic> _$MovieBudgetCategoryUpdateModelToJson(
        MovieBudgetCategoryUpdateModel instance) =>
    <String, dynamic>{
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'accountNumber': instance.accountNumber,
      'movieBudgetCategoryCode': instance.movieBudgetCategoryCode,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'parentMovieBudgetCategoryId': instance.parentMovieBudgetCategoryId,
      'predefinedBudgetCategoryTypeId': instance.predefinedBudgetCategoryTypeId,
      'copiedFromBudgetCategoryId': instance.copiedFromBudgetCategoryId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
      'canDirectlySetBudgetValue': instance.canDirectlySetBudgetValue,
      'directlySetBudgetValue': instance.directlySetBudgetValue,
      'rollupBudgetValue': instance.rollupBudgetValue,
    };

MovieBudgetCategoryWithAmountGroupModel
    _$MovieBudgetCategoryWithAmountGroupModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetCategoryWithAmountGroupModel(
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['movieBudgetCategoryId'] as num?)?.toInt(),
          parentMovieBudgetCategoryId:
              (json['parentMovieBudgetCategoryId'] as num?)?.toInt(),
          total: (json['total'] as num?)?.toDouble(),
          totalFromSubCategories:
              (json['totalFromSubCategories'] as num?)?.toDouble(),
          isNoteAvailable: json['isNoteAvailable'] as bool?,
        );

Map<String, dynamic> _$MovieBudgetCategoryWithAmountGroupModelToJson(
        MovieBudgetCategoryWithAmountGroupModel instance) =>
    <String, dynamic>{
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'parentMovieBudgetCategoryId': instance.parentMovieBudgetCategoryId,
      'total': instance.total,
      'totalFromSubCategories': instance.totalFromSubCategories,
      'isNoteAvailable': instance.isNoteAvailable,
    };

MovieBudgetCategoryWithAmountGroupModelReturnListModel
    _$MovieBudgetCategoryWithAmountGroupModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetCategoryWithAmountGroupModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieBudgetCategoryWithAmountGroupModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieBudgetCategoryWithAmountGroupModelReturnListModelToJson(
            MovieBudgetCategoryWithAmountGroupModelReturnListModel instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieBudgetDivisionCreateModel _$MovieBudgetDivisionCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieBudgetDivisionCreateModel(
      movieBudgetDivisionCode: json['movieBudgetDivisionCode'] as String?,
      movieBudgetDivisionName: json['movieBudgetDivisionName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieBudgetDivisionCreateModelToJson(
        MovieBudgetDivisionCreateModel instance) =>
    <String, dynamic>{
      'movieBudgetDivisionCode': instance.movieBudgetDivisionCode,
      'movieBudgetDivisionName': instance.movieBudgetDivisionName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieBudgetDivisionModel _$MovieBudgetDivisionModelFromJson(
        Map<String, dynamic> json) =>
    MovieBudgetDivisionModel(
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      movieBudgetDivisionCode: json['movieBudgetDivisionCode'] as String?,
      movieBudgetDivisionName: json['movieBudgetDivisionName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedBudgetDivisionTypeName:
          json['predefinedBudgetDivisionTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingMovieBudgetCategories: (json['existingMovieBudgetCategories']
                  as List<dynamic>?)
              ?.map((e) =>
                  MovieBudgetCategoryModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieBudgetDivisionModelToJson(
        MovieBudgetDivisionModel instance) =>
    <String, dynamic>{
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'movieBudgetDivisionCode': instance.movieBudgetDivisionCode,
      'movieBudgetDivisionName': instance.movieBudgetDivisionName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedBudgetDivisionTypeName':
          instance.predefinedBudgetDivisionTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieBudgetCategories': instance.existingMovieBudgetCategories
          ?.map((e) => e.toJson())
          .toList(),
    };

MovieBudgetDivisionModelReturnListModel
    _$MovieBudgetDivisionModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetDivisionModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieBudgetDivisionModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieBudgetDivisionModelReturnListModelToJson(
        MovieBudgetDivisionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieBudgetDivisionModelReturnModel
    _$MovieBudgetDivisionModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieBudgetDivisionModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieBudgetDivisionModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieBudgetDivisionModelReturnModelToJson(
        MovieBudgetDivisionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieBudgetDivisionUpdateModel _$MovieBudgetDivisionUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieBudgetDivisionUpdateModel(
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      movieBudgetDivisionCode: json['movieBudgetDivisionCode'] as String?,
      movieBudgetDivisionName: json['movieBudgetDivisionName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieBudgetDivisionUpdateModelToJson(
        MovieBudgetDivisionUpdateModel instance) =>
    <String, dynamic>{
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'movieBudgetDivisionCode': instance.movieBudgetDivisionCode,
      'movieBudgetDivisionName': instance.movieBudgetDivisionName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieBudgetExpenseSummaryByBudgetCategoryNameModel
    _$MovieBudgetExpenseSummaryByBudgetCategoryNameModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetExpenseSummaryByBudgetCategoryNameModel(
          budgetCategoryName: json['budgetCategoryName'] as String?,
          parentCategoryName: json['parentCategoryName'] as String?,
          totalBudgetAmount: (json['totalBudgetAmount'] as num?)?.toDouble(),
          totalPaidAmount: (json['totalPaidAmount'] as num?)?.toDouble(),
          totalExpenseAmount: (json['totalExpenseAmount'] as num?)?.toDouble(),
          totalBalanceAmount: (json['totalBalanceAmount'] as num?)?.toDouble(),
          totalOutstandingAmount:
              (json['totalOutstandingAmount'] as num?)?.toDouble(),
          childItems: (json['childItems'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieBudgetExpenseSummaryByBudgetCategoryNameModel
                          .fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
        );

Map<String, dynamic> _$MovieBudgetExpenseSummaryByBudgetCategoryNameModelToJson(
        MovieBudgetExpenseSummaryByBudgetCategoryNameModel instance) =>
    <String, dynamic>{
      'budgetCategoryName': instance.budgetCategoryName,
      'parentCategoryName': instance.parentCategoryName,
      'totalBudgetAmount': instance.totalBudgetAmount,
      'totalPaidAmount': instance.totalPaidAmount,
      'totalExpenseAmount': instance.totalExpenseAmount,
      'totalBalanceAmount': instance.totalBalanceAmount,
      'totalOutstandingAmount': instance.totalOutstandingAmount,
      'childItems': instance.childItems?.map((e) => e.toJson()).toList(),
    };

MovieBudgetExpenseSummaryByBudgetCategoryNameModelReturnListModel
    _$MovieBudgetExpenseSummaryByBudgetCategoryNameModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetExpenseSummaryByBudgetCategoryNameModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieBudgetExpenseSummaryByBudgetCategoryNameModel
                          .fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieBudgetExpenseSummaryByBudgetCategoryNameModelReturnListModelToJson(
            MovieBudgetExpenseSummaryByBudgetCategoryNameModelReturnListModel
                instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieBudgetExpenseSummaryForAllDepartmentModel
    _$MovieBudgetExpenseSummaryForAllDepartmentModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetExpenseSummaryForAllDepartmentModel(
          predefinedBudgetDivisionTypeName:
              json['predefinedBudgetDivisionTypeName'] as String?,
          predefinedBudgetDivisionTypeId:
              (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
          totalBudgetAmount: (json['totalBudgetAmount'] as num?)?.toDouble(),
          totalPaidAmount: (json['totalPaidAmount'] as num?)?.toDouble(),
          totalExpenseAmount: (json['totalExpenseAmount'] as num?)?.toDouble(),
          departmentName: json['departmentName'] as String?,
          departmentId: (json['departmentId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieBudgetExpenseSummaryForAllDepartmentModelToJson(
        MovieBudgetExpenseSummaryForAllDepartmentModel instance) =>
    <String, dynamic>{
      'predefinedBudgetDivisionTypeName':
          instance.predefinedBudgetDivisionTypeName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'totalBudgetAmount': instance.totalBudgetAmount,
      'totalPaidAmount': instance.totalPaidAmount,
      'totalExpenseAmount': instance.totalExpenseAmount,
      'departmentName': instance.departmentName,
      'departmentId': instance.departmentId,
    };

MovieBudgetExpenseSummaryForAllDepartmentModelReturnListModel
    _$MovieBudgetExpenseSummaryForAllDepartmentModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetExpenseSummaryForAllDepartmentModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieBudgetExpenseSummaryForAllDepartmentModel.fromJson(
                          e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieBudgetExpenseSummaryForAllDepartmentModelReturnListModelToJson(
            MovieBudgetExpenseSummaryForAllDepartmentModelReturnListModel
                instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModel
    _$MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModel(
          predefinedBudgetDivisionTypeName:
              json['predefinedBudgetDivisionTypeName'] as String?,
          predefinedBudgetDivisionTypeId:
              (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
          budgetCategoryTypeName: json['budgetCategoryTypeName'] as String?,
          budgetCategoryTypeId: (json['budgetCategoryTypeId'] as num?)?.toInt(),
          totalBudgetAmount: (json['totalBudgetAmount'] as num?)?.toDouble(),
          totalPaidAmount: (json['totalPaidAmount'] as num?)?.toDouble(),
          totalExpenseAmount: (json['totalExpenseAmount'] as num?)?.toDouble(),
        );

Map<String, dynamic>
    _$MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModelToJson(
            MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModel
                instance) =>
        <String, dynamic>{
          'predefinedBudgetDivisionTypeName':
              instance.predefinedBudgetDivisionTypeName,
          'predefinedBudgetDivisionTypeId':
              instance.predefinedBudgetDivisionTypeId,
          'budgetCategoryTypeName': instance.budgetCategoryTypeName,
          'budgetCategoryTypeId': instance.budgetCategoryTypeId,
          'totalBudgetAmount': instance.totalBudgetAmount,
          'totalPaidAmount': instance.totalPaidAmount,
          'totalExpenseAmount': instance.totalExpenseAmount,
        };

MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModelReturnListModel
    _$MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModel
                          .fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModelReturnListModelToJson(
            MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModelReturnListModel
                instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieCommitmentTaskCreateModel _$MovieCommitmentTaskCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieCommitmentTaskCreateModel(
      movieId: (json['movieId'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      parentMovieCommitmentTaskId:
          (json['parentMovieCommitmentTaskId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      commitmentTaskText: json['commitmentTaskText'] as String?,
      commitmentTaskDescription: json['commitmentTaskDescription'] as String?,
      startDate: json['startDate'] == null
          ? null
          : DateTime.parse(json['startDate'] as String),
      dueDate: json['dueDate'] == null
          ? null
          : DateTime.parse(json['dueDate'] as String),
      warnDate: json['warnDate'] == null
          ? null
          : DateTime.parse(json['warnDate'] as String),
      notifyDaysPriorToCommitmentTaskEvent:
          (json['notifyDaysPriorToCommitmentTaskEvent'] as num?)?.toInt(),
      notifyOnDueDate: json['notifyOnDueDate'] as bool?,
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      predefinedCommitmentTaskPriorityTypeId:
          (json['predefinedCommitmentTaskPriorityTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      predefinedCommitmentTaskStatusTypeId:
          (json['predefinedCommitmentTaskStatusTypeId'] as num?)?.toInt(),
      predefinedTaskForTypeId:
          (json['predefinedTaskForTypeId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      completedByUserId: (json['completedByUserId'] as num?)?.toInt(),
      sendNotificationEveryNDays:
          (json['sendNotificationEveryNDays'] as num?)?.toInt(),
      lastNotificationDate: json['lastNotificationDate'] == null
          ? null
          : DateTime.parse(json['lastNotificationDate'] as String),
      isRecurring: json['isRecurring'] as bool?,
      nextRecurringInDays: (json['nextRecurringInDays'] as num?)?.toInt(),
      isCreatedByRecurringAction: json['isCreatedByRecurringAction'] as bool?,
      recurringActionCreatedDate: json['recurringActionCreatedDate'] == null
          ? null
          : DateTime.parse(json['recurringActionCreatedDate'] as String),
      predefinedCommitmentTaskRecurrenceEndTypeId:
          (json['predefinedCommitmentTaskRecurrenceEndTypeId'] as num?)
              ?.toInt(),
      recurrenceEndOnSpecificDate: json['recurrenceEndOnSpecificDate'] == null
          ? null
          : DateTime.parse(json['recurrenceEndOnSpecificDate'] as String),
      recurrenceEndOnMovieExpiration:
          json['recurrenceEndOnMovieExpiration'] as bool?,
      recurrenceEndOnAfterNthOccurrence:
          (json['recurrenceEndOnAfterNthOccurrence'] as num?)?.toInt(),
      notes: json['notes'] as String?,
    );

Map<String, dynamic> _$MovieCommitmentTaskCreateModelToJson(
        MovieCommitmentTaskCreateModel instance) =>
    <String, dynamic>{
      'movieId': instance.movieId,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'parentMovieCommitmentTaskId': instance.parentMovieCommitmentTaskId,
      'companyId': instance.companyId,
      'commitmentTaskText': instance.commitmentTaskText,
      'commitmentTaskDescription': instance.commitmentTaskDescription,
      'startDate': instance.startDate?.toIso8601String(),
      'dueDate': instance.dueDate?.toIso8601String(),
      'warnDate': instance.warnDate?.toIso8601String(),
      'notifyDaysPriorToCommitmentTaskEvent':
          instance.notifyDaysPriorToCommitmentTaskEvent,
      'notifyOnDueDate': instance.notifyOnDueDate,
      'movieUserId': instance.movieUserId,
      'movieShootDayId': instance.movieShootDayId,
      'predefinedCommitmentTaskPriorityTypeId':
          instance.predefinedCommitmentTaskPriorityTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'position': instance.position,
      'predefinedCommitmentTaskStatusTypeId':
          instance.predefinedCommitmentTaskStatusTypeId,
      'predefinedTaskForTypeId': instance.predefinedTaskForTypeId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'completedByUserId': instance.completedByUserId,
      'sendNotificationEveryNDays': instance.sendNotificationEveryNDays,
      'lastNotificationDate': instance.lastNotificationDate?.toIso8601String(),
      'isRecurring': instance.isRecurring,
      'nextRecurringInDays': instance.nextRecurringInDays,
      'isCreatedByRecurringAction': instance.isCreatedByRecurringAction,
      'recurringActionCreatedDate':
          instance.recurringActionCreatedDate?.toIso8601String(),
      'predefinedCommitmentTaskRecurrenceEndTypeId':
          instance.predefinedCommitmentTaskRecurrenceEndTypeId,
      'recurrenceEndOnSpecificDate':
          instance.recurrenceEndOnSpecificDate?.toIso8601String(),
      'recurrenceEndOnMovieExpiration': instance.recurrenceEndOnMovieExpiration,
      'recurrenceEndOnAfterNthOccurrence':
          instance.recurrenceEndOnAfterNthOccurrence,
      'notes': instance.notes,
    };

MovieCommitmentTaskModel _$MovieCommitmentTaskModelFromJson(
        Map<String, dynamic> json) =>
    MovieCommitmentTaskModel(
      movieCommitmentTaskId: (json['movieCommitmentTaskId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      parentMovieCommitmentTaskId:
          (json['parentMovieCommitmentTaskId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      commitmentTaskText: json['commitmentTaskText'] as String?,
      commitmentTaskDescription: json['commitmentTaskDescription'] as String?,
      startDate: json['startDate'] == null
          ? null
          : DateTime.parse(json['startDate'] as String),
      dueDate: json['dueDate'] == null
          ? null
          : DateTime.parse(json['dueDate'] as String),
      warnDate: json['warnDate'] == null
          ? null
          : DateTime.parse(json['warnDate'] as String),
      notifyDaysPriorToCommitmentTaskEvent:
          (json['notifyDaysPriorToCommitmentTaskEvent'] as num?)?.toInt(),
      notifyOnDueDate: json['notifyOnDueDate'] as bool?,
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      predefinedCommitmentTaskPriorityTypeId:
          (json['predefinedCommitmentTaskPriorityTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      predefinedCommitmentTaskStatusTypeId:
          (json['predefinedCommitmentTaskStatusTypeId'] as num?)?.toInt(),
      predefinedTaskForTypeId:
          (json['predefinedTaskForTypeId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      completedByUserId: (json['completedByUserId'] as num?)?.toInt(),
      sendNotificationEveryNDays:
          (json['sendNotificationEveryNDays'] as num?)?.toInt(),
      lastNotificationDate: json['lastNotificationDate'] == null
          ? null
          : DateTime.parse(json['lastNotificationDate'] as String),
      isRecurring: json['isRecurring'] as bool?,
      nextRecurringInDays: (json['nextRecurringInDays'] as num?)?.toInt(),
      isCreatedByRecurringAction: json['isCreatedByRecurringAction'] as bool?,
      recurringActionCreatedDate: json['recurringActionCreatedDate'] == null
          ? null
          : DateTime.parse(json['recurringActionCreatedDate'] as String),
      predefinedCommitmentTaskRecurrenceEndTypeId:
          (json['predefinedCommitmentTaskRecurrenceEndTypeId'] as num?)
              ?.toInt(),
      recurrenceEndOnSpecificDate: json['recurrenceEndOnSpecificDate'] == null
          ? null
          : DateTime.parse(json['recurrenceEndOnSpecificDate'] as String),
      recurrenceEndOnMovieExpiration:
          json['recurrenceEndOnMovieExpiration'] as bool?,
      recurrenceEndOnAfterNthOccurrence:
          (json['recurrenceEndOnAfterNthOccurrence'] as num?)?.toInt(),
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedCommitmentTaskStatusTypeName:
          json['predefinedCommitmentTaskStatusTypeName'] as String?,
      predefinedTaskForTypeName: json['predefinedTaskForTypeName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      movieBudgetDivisionName: json['movieBudgetDivisionName'] as String?,
      isMovieShootDay: json['isMovieShootDay'] as bool?,
      predefinedCommitmentTaskPriorityTypeName:
          json['predefinedCommitmentTaskPriorityTypeName'] as String?,
      companyName: json['companyName'] as String?,
      userName: json['userName'] as String?,
      userFirstName: json['userFirstName'] as String?,
      userLastName: json['userLastName'] as String?,
      movieCode: json['movieCode'] as String?,
      movieCommitmentCode: json['movieCommitmentCode'] as String?,
      parentMovieCommitmentCode: json['parentMovieCommitmentCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieArtistCode: json['movieArtistCode'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      movieLocationCode: json['movieLocationCode'] as String?,
      movieLocationCandidateCode: json['movieLocationCandidateCode'] as String?,
      movieArtistName: json['movieArtistName'] as String?,
      movieTechnicianName: json['movieTechnicianName'] as String?,
      movieEquipmentName: json['movieEquipmentName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      moviePropertyName: json['moviePropertyName'] as String?,
      movieLocationName: json['movieLocationName'] as String?,
      movieLocationCandidateName: json['movieLocationCandidateName'] as String?,
      completedByUserName: json['completedByUserName'] as String?,
      notes: json['notes'] as String?,
      shootSummary: json['shootSummary'] as String?,
      dayNumber: (json['dayNumber'] as num?)?.toInt(),
      movieBudgetDivisionCode: json['movieBudgetDivisionCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieCommitmentTaskModelToJson(
        MovieCommitmentTaskModel instance) =>
    <String, dynamic>{
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieId': instance.movieId,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'parentMovieCommitmentTaskId': instance.parentMovieCommitmentTaskId,
      'companyId': instance.companyId,
      'commitmentTaskText': instance.commitmentTaskText,
      'commitmentTaskDescription': instance.commitmentTaskDescription,
      'startDate': instance.startDate?.toIso8601String(),
      'dueDate': instance.dueDate?.toIso8601String(),
      'warnDate': instance.warnDate?.toIso8601String(),
      'notifyDaysPriorToCommitmentTaskEvent':
          instance.notifyDaysPriorToCommitmentTaskEvent,
      'notifyOnDueDate': instance.notifyOnDueDate,
      'movieUserId': instance.movieUserId,
      'movieShootDayId': instance.movieShootDayId,
      'predefinedCommitmentTaskPriorityTypeId':
          instance.predefinedCommitmentTaskPriorityTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'position': instance.position,
      'isDeleted': instance.isDeleted,
      'predefinedCommitmentTaskStatusTypeId':
          instance.predefinedCommitmentTaskStatusTypeId,
      'predefinedTaskForTypeId': instance.predefinedTaskForTypeId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'completedByUserId': instance.completedByUserId,
      'sendNotificationEveryNDays': instance.sendNotificationEveryNDays,
      'lastNotificationDate': instance.lastNotificationDate?.toIso8601String(),
      'isRecurring': instance.isRecurring,
      'nextRecurringInDays': instance.nextRecurringInDays,
      'isCreatedByRecurringAction': instance.isCreatedByRecurringAction,
      'recurringActionCreatedDate':
          instance.recurringActionCreatedDate?.toIso8601String(),
      'predefinedCommitmentTaskRecurrenceEndTypeId':
          instance.predefinedCommitmentTaskRecurrenceEndTypeId,
      'recurrenceEndOnSpecificDate':
          instance.recurrenceEndOnSpecificDate?.toIso8601String(),
      'recurrenceEndOnMovieExpiration': instance.recurrenceEndOnMovieExpiration,
      'recurrenceEndOnAfterNthOccurrence':
          instance.recurrenceEndOnAfterNthOccurrence,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedCommitmentTaskStatusTypeName':
          instance.predefinedCommitmentTaskStatusTypeName,
      'predefinedTaskForTypeName': instance.predefinedTaskForTypeName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'movieBudgetDivisionName': instance.movieBudgetDivisionName,
      'isMovieShootDay': instance.isMovieShootDay,
      'predefinedCommitmentTaskPriorityTypeName':
          instance.predefinedCommitmentTaskPriorityTypeName,
      'companyName': instance.companyName,
      'userName': instance.userName,
      'userFirstName': instance.userFirstName,
      'userLastName': instance.userLastName,
      'movieCode': instance.movieCode,
      'movieCommitmentCode': instance.movieCommitmentCode,
      'parentMovieCommitmentCode': instance.parentMovieCommitmentCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieArtistCode': instance.movieArtistCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieVendorCode': instance.movieVendorCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'movieLocationCode': instance.movieLocationCode,
      'movieLocationCandidateCode': instance.movieLocationCandidateCode,
      'movieArtistName': instance.movieArtistName,
      'movieTechnicianName': instance.movieTechnicianName,
      'movieEquipmentName': instance.movieEquipmentName,
      'movieVendorName': instance.movieVendorName,
      'moviePropertyName': instance.moviePropertyName,
      'movieLocationName': instance.movieLocationName,
      'movieLocationCandidateName': instance.movieLocationCandidateName,
      'completedByUserName': instance.completedByUserName,
      'notes': instance.notes,
      'shootSummary': instance.shootSummary,
      'dayNumber': instance.dayNumber,
      'movieBudgetDivisionCode': instance.movieBudgetDivisionCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieCommitmentTaskModelReturnListModel
    _$MovieCommitmentTaskModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieCommitmentTaskModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieCommitmentTaskModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieCommitmentTaskModelReturnListModelToJson(
        MovieCommitmentTaskModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieCommitmentTaskModelReturnModel
    _$MovieCommitmentTaskModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieCommitmentTaskModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieCommitmentTaskModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieCommitmentTaskModelReturnModelToJson(
        MovieCommitmentTaskModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieCommitmentTaskSummaryModel _$MovieCommitmentTaskSummaryModelFromJson(
        Map<String, dynamic> json) =>
    MovieCommitmentTaskSummaryModel(
      predefinedBudgetDivisionTypeName:
          json['predefinedBudgetDivisionTypeName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      totalCompleted: (json['totalCompleted'] as num?)?.toInt(),
      totalNotCompleted: (json['totalNotCompleted'] as num?)?.toInt(),
      totalTasks: (json['totalTasks'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieCommitmentTaskSummaryModelToJson(
        MovieCommitmentTaskSummaryModel instance) =>
    <String, dynamic>{
      'predefinedBudgetDivisionTypeName':
          instance.predefinedBudgetDivisionTypeName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'totalCompleted': instance.totalCompleted,
      'totalNotCompleted': instance.totalNotCompleted,
      'totalTasks': instance.totalTasks,
    };

MovieCommitmentTaskSummaryModelReturnListModel
    _$MovieCommitmentTaskSummaryModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieCommitmentTaskSummaryModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieCommitmentTaskSummaryModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieCommitmentTaskSummaryModelReturnListModelToJson(
        MovieCommitmentTaskSummaryModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieCommitmentTaskUpdateModel _$MovieCommitmentTaskUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieCommitmentTaskUpdateModel(
      movieCommitmentTaskId: (json['movieCommitmentTaskId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      parentMovieCommitmentTaskId:
          (json['parentMovieCommitmentTaskId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      commitmentTaskText: json['commitmentTaskText'] as String?,
      commitmentTaskDescription: json['commitmentTaskDescription'] as String?,
      startDate: json['startDate'] == null
          ? null
          : DateTime.parse(json['startDate'] as String),
      dueDate: json['dueDate'] == null
          ? null
          : DateTime.parse(json['dueDate'] as String),
      warnDate: json['warnDate'] == null
          ? null
          : DateTime.parse(json['warnDate'] as String),
      notifyDaysPriorToCommitmentTaskEvent:
          (json['notifyDaysPriorToCommitmentTaskEvent'] as num?)?.toInt(),
      notifyOnDueDate: json['notifyOnDueDate'] as bool?,
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      predefinedCommitmentTaskPriorityTypeId:
          (json['predefinedCommitmentTaskPriorityTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      predefinedCommitmentTaskStatusTypeId:
          (json['predefinedCommitmentTaskStatusTypeId'] as num?)?.toInt(),
      predefinedTaskForTypeId:
          (json['predefinedTaskForTypeId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      completedByUserId: (json['completedByUserId'] as num?)?.toInt(),
      sendNotificationEveryNDays:
          (json['sendNotificationEveryNDays'] as num?)?.toInt(),
      lastNotificationDate: json['lastNotificationDate'] == null
          ? null
          : DateTime.parse(json['lastNotificationDate'] as String),
      isRecurring: json['isRecurring'] as bool?,
      nextRecurringInDays: (json['nextRecurringInDays'] as num?)?.toInt(),
      isCreatedByRecurringAction: json['isCreatedByRecurringAction'] as bool?,
      recurringActionCreatedDate: json['recurringActionCreatedDate'] == null
          ? null
          : DateTime.parse(json['recurringActionCreatedDate'] as String),
      predefinedCommitmentTaskRecurrenceEndTypeId:
          (json['predefinedCommitmentTaskRecurrenceEndTypeId'] as num?)
              ?.toInt(),
      recurrenceEndOnSpecificDate: json['recurrenceEndOnSpecificDate'] == null
          ? null
          : DateTime.parse(json['recurrenceEndOnSpecificDate'] as String),
      recurrenceEndOnMovieExpiration:
          json['recurrenceEndOnMovieExpiration'] as bool?,
      recurrenceEndOnAfterNthOccurrence:
          (json['recurrenceEndOnAfterNthOccurrence'] as num?)?.toInt(),
      notes: json['notes'] as String?,
    );

Map<String, dynamic> _$MovieCommitmentTaskUpdateModelToJson(
        MovieCommitmentTaskUpdateModel instance) =>
    <String, dynamic>{
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieId': instance.movieId,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'parentMovieCommitmentTaskId': instance.parentMovieCommitmentTaskId,
      'companyId': instance.companyId,
      'commitmentTaskText': instance.commitmentTaskText,
      'commitmentTaskDescription': instance.commitmentTaskDescription,
      'startDate': instance.startDate?.toIso8601String(),
      'dueDate': instance.dueDate?.toIso8601String(),
      'warnDate': instance.warnDate?.toIso8601String(),
      'notifyDaysPriorToCommitmentTaskEvent':
          instance.notifyDaysPriorToCommitmentTaskEvent,
      'notifyOnDueDate': instance.notifyOnDueDate,
      'movieUserId': instance.movieUserId,
      'movieShootDayId': instance.movieShootDayId,
      'predefinedCommitmentTaskPriorityTypeId':
          instance.predefinedCommitmentTaskPriorityTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'position': instance.position,
      'predefinedCommitmentTaskStatusTypeId':
          instance.predefinedCommitmentTaskStatusTypeId,
      'predefinedTaskForTypeId': instance.predefinedTaskForTypeId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'completedByUserId': instance.completedByUserId,
      'sendNotificationEveryNDays': instance.sendNotificationEveryNDays,
      'lastNotificationDate': instance.lastNotificationDate?.toIso8601String(),
      'isRecurring': instance.isRecurring,
      'nextRecurringInDays': instance.nextRecurringInDays,
      'isCreatedByRecurringAction': instance.isCreatedByRecurringAction,
      'recurringActionCreatedDate':
          instance.recurringActionCreatedDate?.toIso8601String(),
      'predefinedCommitmentTaskRecurrenceEndTypeId':
          instance.predefinedCommitmentTaskRecurrenceEndTypeId,
      'recurrenceEndOnSpecificDate':
          instance.recurrenceEndOnSpecificDate?.toIso8601String(),
      'recurrenceEndOnMovieExpiration': instance.recurrenceEndOnMovieExpiration,
      'recurrenceEndOnAfterNthOccurrence':
          instance.recurrenceEndOnAfterNthOccurrence,
      'notes': instance.notes,
    };

MovieCreateModel _$MovieCreateModelFromJson(Map<String, dynamic> json) =>
    MovieCreateModel(
      movieCode: json['movieCode'] as String?,
      title: json['title'] as String?,
      language: json['language'] as String?,
      runningTime: (json['runningTime'] as num?)?.toInt(),
      budgetCost: (json['budgetCost'] as num?)?.toDouble(),
      actualCost: (json['actualCost'] as num?)?.toDouble(),
      estimatedCost: (json['estimatedCost'] as num?)?.toDouble(),
      companyId: (json['companyId'] as num?)?.toInt(),
      internalValidUntilDate: json['internalValidUntilDate'] == null
          ? null
          : DateTime.parse(json['internalValidUntilDate'] as String),
      predefinedMovieStageTypeId:
          (json['predefinedMovieStageTypeId'] as num?)?.toInt(),
      predefinedMovieStatusTypeId:
          (json['predefinedMovieStatusTypeId'] as num?)?.toInt(),
      releaseDate: json['releaseDate'] == null
          ? null
          : DateTime.parse(json['releaseDate'] as String),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      isSecondCompanyAvailable: json['isSecondCompanyAvailable'] as bool?,
      secondCompanyName: json['secondCompanyName'] as String?,
      secondCompanyEmail: json['secondCompanyEmail'] as String?,
      secondCompanyContactFirstName:
          json['secondCompanyContactFirstName'] as String?,
      secondCompanyContactLastName:
          json['secondCompanyContactLastName'] as String?,
      secondCompanyWorkPhone: json['secondCompanyWorkPhone'] as String?,
      secondCompanyCellPhone: json['secondCompanyCellPhone'] as String?,
      secondCompanyAddress1: json['secondCompanyAddress1'] as String?,
      secondCompanyAddress2: json['secondCompanyAddress2'] as String?,
      secondCompanyCity: json['secondCompanyCity'] as String?,
      secondCompanyStateId: (json['secondCompanyStateId'] as num?)?.toInt(),
      secondCompanyCountryId: (json['secondCompanyCountryId'] as num?)?.toInt(),
      secondCompanyProfileImageLocation:
          json['secondCompanyProfileImageLocation'] as String?,
      secondCompanyProfileImageActualFileName:
          json['secondCompanyProfileImageActualFileName'] as String?,
      isEnabled: json['isEnabled'] as bool?,
      newMovieGenres: (json['newMovieGenres'] as List<dynamic>?)
              ?.map((e) =>
                  MovieGenreCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      createDummyData: json['createDummyData'] as bool?,
      createExtendedDummyData: json['createExtendedDummyData'] as bool?,
    );

Map<String, dynamic> _$MovieCreateModelToJson(MovieCreateModel instance) =>
    <String, dynamic>{
      'movieCode': instance.movieCode,
      'title': instance.title,
      'language': instance.language,
      'runningTime': instance.runningTime,
      'budgetCost': instance.budgetCost,
      'actualCost': instance.actualCost,
      'estimatedCost': instance.estimatedCost,
      'companyId': instance.companyId,
      'internalValidUntilDate':
          instance.internalValidUntilDate?.toIso8601String(),
      'predefinedMovieStageTypeId': instance.predefinedMovieStageTypeId,
      'predefinedMovieStatusTypeId': instance.predefinedMovieStatusTypeId,
      'releaseDate': instance.releaseDate?.toIso8601String(),
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'isSecondCompanyAvailable': instance.isSecondCompanyAvailable,
      'secondCompanyName': instance.secondCompanyName,
      'secondCompanyEmail': instance.secondCompanyEmail,
      'secondCompanyContactFirstName': instance.secondCompanyContactFirstName,
      'secondCompanyContactLastName': instance.secondCompanyContactLastName,
      'secondCompanyWorkPhone': instance.secondCompanyWorkPhone,
      'secondCompanyCellPhone': instance.secondCompanyCellPhone,
      'secondCompanyAddress1': instance.secondCompanyAddress1,
      'secondCompanyAddress2': instance.secondCompanyAddress2,
      'secondCompanyCity': instance.secondCompanyCity,
      'secondCompanyStateId': instance.secondCompanyStateId,
      'secondCompanyCountryId': instance.secondCompanyCountryId,
      'secondCompanyProfileImageLocation':
          instance.secondCompanyProfileImageLocation,
      'secondCompanyProfileImageActualFileName':
          instance.secondCompanyProfileImageActualFileName,
      'isEnabled': instance.isEnabled,
      'newMovieGenres':
          instance.newMovieGenres?.map((e) => e.toJson()).toList(),
      'createDummyData': instance.createDummyData,
      'createExtendedDummyData': instance.createExtendedDummyData,
    };

MovieEquipmentCreateModel _$MovieEquipmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieEquipmentCreateModel(
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      parentMovieEquipmentId: (json['parentMovieEquipmentId'] as num?)?.toInt(),
      movieEquipmentName: json['movieEquipmentName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      predefinedPropertyOrEquipmentRequestedByTypeId:
          (json['predefinedPropertyOrEquipmentRequestedByTypeId'] as num?)
              ?.toInt(),
      requestedDateTime: json['requestedDateTime'] == null
          ? null
          : DateTime.parse(json['requestedDateTime'] as String),
      requestedMovieArtistId: (json['requestedMovieArtistId'] as num?)?.toInt(),
      requestedMovieTechnicianId:
          (json['requestedMovieTechnicianId'] as num?)?.toInt(),
      requestedMovieUserId: (json['requestedMovieUserId'] as num?)?.toInt(),
      requestedNotes: json['requestedNotes'] as String?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      predefinedEquipmentForTypeId:
          (json['predefinedEquipmentForTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      ignoreCurrentMovieShootDayId:
          (json['ignoreCurrentMovieShootDayId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      newMovieEquipmentRates: (json['newMovieEquipmentRates'] as List<dynamic>?)
              ?.map((e) => MovieEquipmentRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieEquipmentCreateModelToJson(
        MovieEquipmentCreateModel instance) =>
    <String, dynamic>{
      'movieEquipmentCode': instance.movieEquipmentCode,
      'equipmentId': instance.equipmentId,
      'equipmentTypeId': instance.equipmentTypeId,
      'parentMovieEquipmentId': instance.parentMovieEquipmentId,
      'movieEquipmentName': instance.movieEquipmentName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'predefinedPropertyOrEquipmentRequestedByTypeId':
          instance.predefinedPropertyOrEquipmentRequestedByTypeId,
      'requestedDateTime': instance.requestedDateTime?.toIso8601String(),
      'requestedMovieArtistId': instance.requestedMovieArtistId,
      'requestedMovieTechnicianId': instance.requestedMovieTechnicianId,
      'requestedMovieUserId': instance.requestedMovieUserId,
      'requestedNotes': instance.requestedNotes,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'estimatedRate': instance.estimatedRate,
      'predefinedEquipmentForTypeId': instance.predefinedEquipmentForTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'ignoreCurrentMovieShootDayId': instance.ignoreCurrentMovieShootDayId,
      'useDefaultRates': instance.useDefaultRates,
      'newMovieEquipmentRates':
          instance.newMovieEquipmentRates?.map((e) => e.toJson()).toList(),
    };

MovieEquipmentModel _$MovieEquipmentModelFromJson(Map<String, dynamic> json) =>
    MovieEquipmentModel(
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      parentMovieEquipmentId: (json['parentMovieEquipmentId'] as num?)?.toInt(),
      movieEquipmentName: json['movieEquipmentName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      predefinedPropertyOrEquipmentRequestedByTypeId:
          (json['predefinedPropertyOrEquipmentRequestedByTypeId'] as num?)
              ?.toInt(),
      requestedDateTime: json['requestedDateTime'] == null
          ? null
          : DateTime.parse(json['requestedDateTime'] as String),
      requestedMovieArtistId: (json['requestedMovieArtistId'] as num?)?.toInt(),
      requestedMovieTechnicianId:
          (json['requestedMovieTechnicianId'] as num?)?.toInt(),
      requestedMovieUserId: (json['requestedMovieUserId'] as num?)?.toInt(),
      requestedNotes: json['requestedNotes'] as String?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      predefinedEquipmentForTypeId:
          (json['predefinedEquipmentForTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      predefinedContractStatusTypeId:
          (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
      predefinedContractStatusTypeName:
          json['predefinedContractStatusTypeName'] as String?,
      departmentName: json['departmentName'] as String?,
      equipmentName: json['equipmentName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTitle: json['movieTitle'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      isMovieEnabled: json['isMovieEnabled'] as bool?,
      equipmentCode: json['equipmentCode'] as String?,
      contractName: json['contractName'] as String?,
      equipmentTypeName: json['equipmentTypeName'] as String?,
      notes: json['notes'] as String?,
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      defaultPreProductionMovieBudgetCategoryName:
          json['defaultPreProductionMovieBudgetCategoryName'] as String?,
      defaultProductionMovieBudgetCategoryName:
          json['defaultProductionMovieBudgetCategoryName'] as String?,
      defaultPostProductionMovieBudgetCategoryName:
          json['defaultPostProductionMovieBudgetCategoryName'] as String?,
      defaultPreProductionMovieBudgetCategoryCode:
          json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
      defaultProductionMovieBudgetCategoryCode:
          json['defaultProductionMovieBudgetCategoryCode'] as String?,
      defaultPostProductionMovieBudgetCategoryCode:
          json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
      predefinedContractAssignmentStatusTypeName:
          json['predefinedContractAssignmentStatusTypeName'] as String?,
      parentMovieEquipmentName: json['parentMovieEquipmentName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingMovieEquipmentRates: (json['existingMovieEquipmentRates']
                  as List<dynamic>?)
              ?.map((e) =>
                  MovieEquipmentRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieEquipmentModelToJson(
        MovieEquipmentModel instance) =>
    <String, dynamic>{
      'movieEquipmentId': instance.movieEquipmentId,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'equipmentId': instance.equipmentId,
      'equipmentTypeId': instance.equipmentTypeId,
      'parentMovieEquipmentId': instance.parentMovieEquipmentId,
      'movieEquipmentName': instance.movieEquipmentName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'predefinedPropertyOrEquipmentRequestedByTypeId':
          instance.predefinedPropertyOrEquipmentRequestedByTypeId,
      'requestedDateTime': instance.requestedDateTime?.toIso8601String(),
      'requestedMovieArtistId': instance.requestedMovieArtistId,
      'requestedMovieTechnicianId': instance.requestedMovieTechnicianId,
      'requestedMovieUserId': instance.requestedMovieUserId,
      'requestedNotes': instance.requestedNotes,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'estimatedRate': instance.estimatedRate,
      'predefinedEquipmentForTypeId': instance.predefinedEquipmentForTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'departmentName': instance.departmentName,
      'equipmentName': instance.equipmentName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'equipmentCode': instance.equipmentCode,
      'contractName': instance.contractName,
      'equipmentTypeName': instance.equipmentTypeName,
      'notes': instance.notes,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'parentMovieEquipmentName': instance.parentMovieEquipmentName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieEquipmentRates':
          instance.existingMovieEquipmentRates?.map((e) => e.toJson()).toList(),
    };

MovieEquipmentModelReturnListModel _$MovieEquipmentModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieEquipmentModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  MovieEquipmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieEquipmentModelReturnListModelToJson(
        MovieEquipmentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieEquipmentModelReturnModel _$MovieEquipmentModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieEquipmentModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieEquipmentModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieEquipmentModelReturnModelToJson(
        MovieEquipmentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieEquipmentRateCreateModel _$MovieEquipmentRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieEquipmentRateCreateModel(
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieEquipmentRateCreateModelToJson(
        MovieEquipmentRateCreateModel instance) =>
    <String, dynamic>{
      'movieEquipmentId': instance.movieEquipmentId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieEquipmentRateModel _$MovieEquipmentRateModelFromJson(
        Map<String, dynamic> json) =>
    MovieEquipmentRateModel(
      movieEquipmentRateId: (json['movieEquipmentRateId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieEquipmentName: json['movieEquipmentName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      companyName: json['companyName'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieEquipmentRateModelToJson(
        MovieEquipmentRateModel instance) =>
    <String, dynamic>{
      'movieEquipmentRateId': instance.movieEquipmentRateId,
      'movieEquipmentId': instance.movieEquipmentId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieEquipmentName': instance.movieEquipmentName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'companyName': instance.companyName,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieEquipmentRateModelReturnListModel
    _$MovieEquipmentRateModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieEquipmentRateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieEquipmentRateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieEquipmentRateModelReturnListModelToJson(
        MovieEquipmentRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieEquipmentRateModelReturnModel _$MovieEquipmentRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieEquipmentRateModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieEquipmentRateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieEquipmentRateModelReturnModelToJson(
        MovieEquipmentRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieEquipmentRateUpdateModel _$MovieEquipmentRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieEquipmentRateUpdateModel(
      movieEquipmentRateId: (json['movieEquipmentRateId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieEquipmentRateUpdateModelToJson(
        MovieEquipmentRateUpdateModel instance) =>
    <String, dynamic>{
      'movieEquipmentRateId': instance.movieEquipmentRateId,
      'movieEquipmentId': instance.movieEquipmentId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieEquipmentUpdateModel _$MovieEquipmentUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieEquipmentUpdateModel(
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      parentMovieEquipmentId: (json['parentMovieEquipmentId'] as num?)?.toInt(),
      movieEquipmentName: json['movieEquipmentName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      predefinedPropertyOrEquipmentRequestedByTypeId:
          (json['predefinedPropertyOrEquipmentRequestedByTypeId'] as num?)
              ?.toInt(),
      requestedDateTime: json['requestedDateTime'] == null
          ? null
          : DateTime.parse(json['requestedDateTime'] as String),
      requestedMovieArtistId: (json['requestedMovieArtistId'] as num?)?.toInt(),
      requestedMovieTechnicianId:
          (json['requestedMovieTechnicianId'] as num?)?.toInt(),
      requestedMovieUserId: (json['requestedMovieUserId'] as num?)?.toInt(),
      requestedNotes: json['requestedNotes'] as String?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      predefinedEquipmentForTypeId:
          (json['predefinedEquipmentForTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      ignoreCurrentMovieShootDayId:
          (json['ignoreCurrentMovieShootDayId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      existingMovieEquipmentRates:
          (json['existingMovieEquipmentRates'] as List<dynamic>?)
                  ?.map((e) => MovieEquipmentRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newMovieEquipmentRates: (json['newMovieEquipmentRates'] as List<dynamic>?)
              ?.map((e) => MovieEquipmentRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieEquipmentUpdateModelToJson(
        MovieEquipmentUpdateModel instance) =>
    <String, dynamic>{
      'movieEquipmentId': instance.movieEquipmentId,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'equipmentId': instance.equipmentId,
      'equipmentTypeId': instance.equipmentTypeId,
      'parentMovieEquipmentId': instance.parentMovieEquipmentId,
      'movieEquipmentName': instance.movieEquipmentName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'predefinedPropertyOrEquipmentRequestedByTypeId':
          instance.predefinedPropertyOrEquipmentRequestedByTypeId,
      'requestedDateTime': instance.requestedDateTime?.toIso8601String(),
      'requestedMovieArtistId': instance.requestedMovieArtistId,
      'requestedMovieTechnicianId': instance.requestedMovieTechnicianId,
      'requestedMovieUserId': instance.requestedMovieUserId,
      'requestedNotes': instance.requestedNotes,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'estimatedRate': instance.estimatedRate,
      'predefinedEquipmentForTypeId': instance.predefinedEquipmentForTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'ignoreCurrentMovieShootDayId': instance.ignoreCurrentMovieShootDayId,
      'useDefaultRates': instance.useDefaultRates,
      'existingMovieEquipmentRates':
          instance.existingMovieEquipmentRates?.map((e) => e.toJson()).toList(),
      'newMovieEquipmentRates':
          instance.newMovieEquipmentRates?.map((e) => e.toJson()).toList(),
    };

MovieEquipmentWithCompanyEquipmentCreateModel
    _$MovieEquipmentWithCompanyEquipmentCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieEquipmentWithCompanyEquipmentCreateModel(
          equipmentCode: json['equipmentCode'] as String?,
          equipmentName: json['equipmentName'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          specification: json['specification'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          position: (json['position'] as num?)?.toInt(),
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          isOwn: json['isOwn'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newEquipmentRates: (json['newEquipmentRates'] as List<dynamic>?)
                  ?.map((e) => EquipmentRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          movieEquipmentCode: json['movieEquipmentCode'] as String?,
          equipmentId: (json['equipmentId'] as num?)?.toInt(),
          parentMovieEquipmentId:
              (json['parentMovieEquipmentId'] as num?)?.toInt(),
          movieEquipmentName: json['movieEquipmentName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieEquipmentWithCompanyEquipmentCreateModelToJson(
        MovieEquipmentWithCompanyEquipmentCreateModel instance) =>
    <String, dynamic>{
      'equipmentCode': instance.equipmentCode,
      'equipmentName': instance.equipmentName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'equipmentTypeId': instance.equipmentTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'position': instance.position,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newEquipmentRates':
          instance.newEquipmentRates?.map((e) => e.toJson()).toList(),
      'movieEquipmentId': instance.movieEquipmentId,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'equipmentId': instance.equipmentId,
      'parentMovieEquipmentId': instance.parentMovieEquipmentId,
      'movieEquipmentName': instance.movieEquipmentName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'movieId': instance.movieId,
    };

MovieEquipmentWithCompanyEquipmentModel
    _$MovieEquipmentWithCompanyEquipmentModelFromJson(
            Map<String, dynamic> json) =>
        MovieEquipmentWithCompanyEquipmentModel(
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          movieEquipmentCode: json['movieEquipmentCode'] as String?,
          equipmentId: (json['equipmentId'] as num?)?.toInt(),
          equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
          parentMovieEquipmentId:
              (json['parentMovieEquipmentId'] as num?)?.toInt(),
          movieEquipmentName: json['movieEquipmentName'] as String?,
          requiredDays: (json['requiredDays'] as num?)?.toInt(),
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          predefinedPropertyOrEquipmentRequestedByTypeId:
              (json['predefinedPropertyOrEquipmentRequestedByTypeId'] as num?)
                  ?.toInt(),
          requestedDateTime: json['requestedDateTime'] == null
              ? null
              : DateTime.parse(json['requestedDateTime'] as String),
          requestedMovieArtistId:
              (json['requestedMovieArtistId'] as num?)?.toInt(),
          requestedMovieTechnicianId:
              (json['requestedMovieTechnicianId'] as num?)?.toInt(),
          requestedMovieUserId: (json['requestedMovieUserId'] as num?)?.toInt(),
          requestedNotes: json['requestedNotes'] as String?,
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
          predefinedEquipmentForTypeId:
              (json['predefinedEquipmentForTypeId'] as num?)?.toInt(),
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['preProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['productionStatusTypeId'] as num?)?.toInt(),
          movieShootDayBudgetId:
              (json['movieShootDayBudgetId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          position: (json['position'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          postProductionStatusTypeName:
              json['postProductionStatusTypeName'] as String?,
          preProductionStatusTypeName:
              json['preProductionStatusTypeName'] as String?,
          productionStatusTypeName: json['productionStatusTypeName'] as String?,
          predefinedContractStatusTypeId:
              (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
          predefinedContractStatusTypeName:
              json['predefinedContractStatusTypeName'] as String?,
          departmentName: json['departmentName'] as String?,
          equipmentName: json['equipmentName'] as String?,
          companyName: json['companyName'] as String?,
          companyCode: json['companyCode'] as String?,
          movieCode: json['movieCode'] as String?,
          movieTitle: json['movieTitle'] as String?,
          predefinedMovieStatusTypeName:
              json['predefinedMovieStatusTypeName'] as String?,
          predefinedMovieStageTypeName:
              json['predefinedMovieStageTypeName'] as String?,
          isMovieEnabled: json['isMovieEnabled'] as bool?,
          equipmentCode: json['equipmentCode'] as String?,
          contractName: json['contractName'] as String?,
          equipmentTypeName: json['equipmentTypeName'] as String?,
          notes: json['notes'] as String?,
          canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
          defaultPreProductionMovieBudgetCategoryName:
              json['defaultPreProductionMovieBudgetCategoryName'] as String?,
          defaultProductionMovieBudgetCategoryName:
              json['defaultProductionMovieBudgetCategoryName'] as String?,
          defaultPostProductionMovieBudgetCategoryName:
              json['defaultPostProductionMovieBudgetCategoryName'] as String?,
          defaultPreProductionMovieBudgetCategoryCode:
              json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
          defaultProductionMovieBudgetCategoryCode:
              json['defaultProductionMovieBudgetCategoryCode'] as String?,
          defaultPostProductionMovieBudgetCategoryCode:
              json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
          predefinedContractAssignmentStatusTypeName:
              json['predefinedContractAssignmentStatusTypeName'] as String?,
          parentMovieEquipmentName: json['parentMovieEquipmentName'] as String?,
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
          existingMovieEquipmentRates:
              (json['existingMovieEquipmentRates'] as List<dynamic>?)
                      ?.map((e) => MovieEquipmentRateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          isNonMovieEquipment: json['isNonMovieEquipment'] as bool?,
        );

Map<String, dynamic> _$MovieEquipmentWithCompanyEquipmentModelToJson(
        MovieEquipmentWithCompanyEquipmentModel instance) =>
    <String, dynamic>{
      'movieEquipmentId': instance.movieEquipmentId,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'equipmentId': instance.equipmentId,
      'equipmentTypeId': instance.equipmentTypeId,
      'parentMovieEquipmentId': instance.parentMovieEquipmentId,
      'movieEquipmentName': instance.movieEquipmentName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'predefinedPropertyOrEquipmentRequestedByTypeId':
          instance.predefinedPropertyOrEquipmentRequestedByTypeId,
      'requestedDateTime': instance.requestedDateTime?.toIso8601String(),
      'requestedMovieArtistId': instance.requestedMovieArtistId,
      'requestedMovieTechnicianId': instance.requestedMovieTechnicianId,
      'requestedMovieUserId': instance.requestedMovieUserId,
      'requestedNotes': instance.requestedNotes,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'estimatedRate': instance.estimatedRate,
      'predefinedEquipmentForTypeId': instance.predefinedEquipmentForTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'departmentName': instance.departmentName,
      'equipmentName': instance.equipmentName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'equipmentCode': instance.equipmentCode,
      'contractName': instance.contractName,
      'equipmentTypeName': instance.equipmentTypeName,
      'notes': instance.notes,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'parentMovieEquipmentName': instance.parentMovieEquipmentName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieEquipmentRates':
          instance.existingMovieEquipmentRates?.map((e) => e.toJson()).toList(),
      'isNonMovieEquipment': instance.isNonMovieEquipment,
    };

MovieEquipmentWithCompanyEquipmentModelReturnListModel
    _$MovieEquipmentWithCompanyEquipmentModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieEquipmentWithCompanyEquipmentModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieEquipmentWithCompanyEquipmentModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieEquipmentWithCompanyEquipmentModelReturnListModelToJson(
            MovieEquipmentWithCompanyEquipmentModelReturnListModel instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieGenreCreateModel _$MovieGenreCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieGenreCreateModel(
      movieId: (json['movieId'] as num?)?.toInt(),
      genreId: (json['genreId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieGenreCreateModelToJson(
        MovieGenreCreateModel instance) =>
    <String, dynamic>{
      'movieId': instance.movieId,
      'genreId': instance.genreId,
      'companyId': instance.companyId,
    };

MovieGenreModel _$MovieGenreModelFromJson(Map<String, dynamic> json) =>
    MovieGenreModel(
      movieGenreId: (json['movieGenreId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      genreId: (json['genreId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      genreName: json['genreName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieGenreModelToJson(MovieGenreModel instance) =>
    <String, dynamic>{
      'movieGenreId': instance.movieGenreId,
      'movieId': instance.movieId,
      'genreId': instance.genreId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'genreName': instance.genreName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieGenreModelReturnListModel _$MovieGenreModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieGenreModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MovieGenreModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieGenreModelReturnListModelToJson(
        MovieGenreModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieGenreModelReturnModel _$MovieGenreModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieGenreModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieGenreModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieGenreModelReturnModelToJson(
        MovieGenreModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieGenreUpdateModel _$MovieGenreUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieGenreUpdateModel(
      movieGenreId: (json['movieGenreId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      genreId: (json['genreId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieGenreUpdateModelToJson(
        MovieGenreUpdateModel instance) =>
    <String, dynamic>{
      'movieGenreId': instance.movieGenreId,
      'movieId': instance.movieId,
      'genreId': instance.genreId,
      'companyId': instance.companyId,
    };

MovieLocationCandidateCreateModel _$MovieLocationCandidateCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieLocationCandidateCreateModel(
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateCode: json['movieLocationCandidateCode'] as String?,
      predefinedMovieLocationVisitedStatusTypeId:
          (json['predefinedMovieLocationVisitedStatusTypeId'] as num?)?.toInt(),
      askingRate: (json['askingRate'] as num?)?.toDouble(),
      rateUnit: (json['rateUnit'] as num?)?.toInt(),
      predefinedRateUnitTypeId:
          (json['predefinedRateUnitTypeId'] as num?)?.toInt(),
      movieLocationCandidateName: json['movieLocationCandidateName'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      contactLastName: json['contactLastName'] as String?,
      contactPhone: json['contactPhone'] as String?,
      contactEmail: json['contactEmail'] as String?,
      website: json['website'] as String?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      nearbyHospitalName: json['nearbyHospitalName'] as String?,
      nearbyHospitalPhone: json['nearbyHospitalPhone'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      visitedDateTime: json['visitedDateTime'] == null
          ? null
          : DateTime.parse(json['visitedDateTime'] as String),
      companyId: (json['companyId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
    );

Map<String, dynamic> _$MovieLocationCandidateCreateModelToJson(
        MovieLocationCandidateCreateModel instance) =>
    <String, dynamic>{
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateCode': instance.movieLocationCandidateCode,
      'predefinedMovieLocationVisitedStatusTypeId':
          instance.predefinedMovieLocationVisitedStatusTypeId,
      'askingRate': instance.askingRate,
      'rateUnit': instance.rateUnit,
      'predefinedRateUnitTypeId': instance.predefinedRateUnitTypeId,
      'movieLocationCandidateName': instance.movieLocationCandidateName,
      'contactFirstName': instance.contactFirstName,
      'contactLastName': instance.contactLastName,
      'contactPhone': instance.contactPhone,
      'contactEmail': instance.contactEmail,
      'website': instance.website,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'state': instance.state,
      'country': instance.country,
      'nearbyHospitalName': instance.nearbyHospitalName,
      'nearbyHospitalPhone': instance.nearbyHospitalPhone,
      'movieId': instance.movieId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'visitedDateTime': instance.visitedDateTime?.toIso8601String(),
      'companyId': instance.companyId,
      'notes': instance.notes,
    };

MovieLocationCandidateModel _$MovieLocationCandidateModelFromJson(
        Map<String, dynamic> json) =>
    MovieLocationCandidateModel(
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateCode: json['movieLocationCandidateCode'] as String?,
      predefinedMovieLocationVisitedStatusTypeId:
          (json['predefinedMovieLocationVisitedStatusTypeId'] as num?)?.toInt(),
      askingRate: (json['askingRate'] as num?)?.toDouble(),
      rateUnit: (json['rateUnit'] as num?)?.toInt(),
      predefinedRateUnitTypeId:
          (json['predefinedRateUnitTypeId'] as num?)?.toInt(),
      movieLocationCandidateName: json['movieLocationCandidateName'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      contactLastName: json['contactLastName'] as String?,
      contactPhone: json['contactPhone'] as String?,
      contactEmail: json['contactEmail'] as String?,
      website: json['website'] as String?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      nearbyHospitalName: json['nearbyHospitalName'] as String?,
      nearbyHospitalPhone: json['nearbyHospitalPhone'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      visitedDateTime: json['visitedDateTime'] == null
          ? null
          : DateTime.parse(json['visitedDateTime'] as String),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      predefinedMovieLocationVisitedStatusTypeName:
          json['predefinedMovieLocationVisitedStatusTypeName'] as String?,
      predefinedRateUnitTypeName: json['predefinedRateUnitTypeName'] as String?,
      companyName: json['companyName'] as String?,
      notes: json['notes'] as String?,
      movieCode: json['movieCode'] as String?,
      movieLocationCode: json['movieLocationCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieLocationCandidateModelToJson(
        MovieLocationCandidateModel instance) =>
    <String, dynamic>{
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateCode': instance.movieLocationCandidateCode,
      'predefinedMovieLocationVisitedStatusTypeId':
          instance.predefinedMovieLocationVisitedStatusTypeId,
      'askingRate': instance.askingRate,
      'rateUnit': instance.rateUnit,
      'predefinedRateUnitTypeId': instance.predefinedRateUnitTypeId,
      'movieLocationCandidateName': instance.movieLocationCandidateName,
      'contactFirstName': instance.contactFirstName,
      'contactLastName': instance.contactLastName,
      'contactPhone': instance.contactPhone,
      'contactEmail': instance.contactEmail,
      'website': instance.website,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'state': instance.state,
      'country': instance.country,
      'nearbyHospitalName': instance.nearbyHospitalName,
      'nearbyHospitalPhone': instance.nearbyHospitalPhone,
      'movieId': instance.movieId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'visitedDateTime': instance.visitedDateTime?.toIso8601String(),
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieLocationName': instance.movieLocationName,
      'predefinedMovieLocationVisitedStatusTypeName':
          instance.predefinedMovieLocationVisitedStatusTypeName,
      'predefinedRateUnitTypeName': instance.predefinedRateUnitTypeName,
      'companyName': instance.companyName,
      'notes': instance.notes,
      'movieCode': instance.movieCode,
      'movieLocationCode': instance.movieLocationCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieLocationCandidateModelReturnListModel
    _$MovieLocationCandidateModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieLocationCandidateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieLocationCandidateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieLocationCandidateModelReturnListModelToJson(
        MovieLocationCandidateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieLocationCandidateModelReturnModel
    _$MovieLocationCandidateModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieLocationCandidateModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieLocationCandidateModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieLocationCandidateModelReturnModelToJson(
        MovieLocationCandidateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieLocationCategoryCreateModel _$MovieLocationCategoryCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieLocationCategoryCreateModel(
      movieLocationCategoryCode: json['movieLocationCategoryCode'] as String?,
      movieLocationCategoryName: json['movieLocationCategoryName'] as String?,
      parentMovieLocationCategoryId:
          (json['parentMovieLocationCategoryId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieLocationCategoryCreateModelToJson(
        MovieLocationCategoryCreateModel instance) =>
    <String, dynamic>{
      'movieLocationCategoryCode': instance.movieLocationCategoryCode,
      'movieLocationCategoryName': instance.movieLocationCategoryName,
      'parentMovieLocationCategoryId': instance.parentMovieLocationCategoryId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieLocationCategoryModel _$MovieLocationCategoryModelFromJson(
        Map<String, dynamic> json) =>
    MovieLocationCategoryModel(
      movieLocationCategoryId:
          (json['movieLocationCategoryId'] as num?)?.toInt(),
      movieLocationCategoryCode: json['movieLocationCategoryCode'] as String?,
      movieLocationCategoryName: json['movieLocationCategoryName'] as String?,
      parentMovieLocationCategoryId:
          (json['parentMovieLocationCategoryId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      parentMovieLocationCategoryName:
          json['parentMovieLocationCategoryName'] as String?,
      companyName: json['companyName'] as String?,
      movieCode: json['movieCode'] as String?,
      parentMovieLocationCategoryCode:
          json['parentMovieLocationCategoryCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieLocationCategoryModelToJson(
        MovieLocationCategoryModel instance) =>
    <String, dynamic>{
      'movieLocationCategoryId': instance.movieLocationCategoryId,
      'movieLocationCategoryCode': instance.movieLocationCategoryCode,
      'movieLocationCategoryName': instance.movieLocationCategoryName,
      'parentMovieLocationCategoryId': instance.parentMovieLocationCategoryId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'parentMovieLocationCategoryName':
          instance.parentMovieLocationCategoryName,
      'companyName': instance.companyName,
      'movieCode': instance.movieCode,
      'parentMovieLocationCategoryCode':
          instance.parentMovieLocationCategoryCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieLocationCategoryModelReturnListModel
    _$MovieLocationCategoryModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieLocationCategoryModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieLocationCategoryModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieLocationCategoryModelReturnListModelToJson(
        MovieLocationCategoryModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieLocationCategoryModelReturnModel
    _$MovieLocationCategoryModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieLocationCategoryModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieLocationCategoryModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieLocationCategoryModelReturnModelToJson(
        MovieLocationCategoryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieLocationCategoryUpdateModel _$MovieLocationCategoryUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieLocationCategoryUpdateModel(
      movieLocationCategoryId:
          (json['movieLocationCategoryId'] as num?)?.toInt(),
      movieLocationCategoryCode: json['movieLocationCategoryCode'] as String?,
      movieLocationCategoryName: json['movieLocationCategoryName'] as String?,
      parentMovieLocationCategoryId:
          (json['parentMovieLocationCategoryId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieLocationCategoryUpdateModelToJson(
        MovieLocationCategoryUpdateModel instance) =>
    <String, dynamic>{
      'movieLocationCategoryId': instance.movieLocationCategoryId,
      'movieLocationCategoryCode': instance.movieLocationCategoryCode,
      'movieLocationCategoryName': instance.movieLocationCategoryName,
      'parentMovieLocationCategoryId': instance.parentMovieLocationCategoryId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieLocationCreateModel _$MovieLocationCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieLocationCreateModel(
      movieLocationCode: json['movieLocationCode'] as String?,
      predefinedLocationTypeId:
          (json['predefinedLocationTypeId'] as num?)?.toInt(),
      predefinedLocationSubTypeId:
          (json['predefinedLocationSubTypeId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      selectedMovieLocationCandidateId:
          (json['selectedMovieLocationCandidateId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      movieLocationCategoryId:
          (json['movieLocationCategoryId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
    );

Map<String, dynamic> _$MovieLocationCreateModelToJson(
        MovieLocationCreateModel instance) =>
    <String, dynamic>{
      'movieLocationCode': instance.movieLocationCode,
      'predefinedLocationTypeId': instance.predefinedLocationTypeId,
      'predefinedLocationSubTypeId': instance.predefinedLocationSubTypeId,
      'movieLocationName': instance.movieLocationName,
      'selectedMovieLocationCandidateId':
          instance.selectedMovieLocationCandidateId,
      'movieId': instance.movieId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'movieLocationCategoryId': instance.movieLocationCategoryId,
      'estimatedRate': instance.estimatedRate,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'companyId': instance.companyId,
      'notes': instance.notes,
    };

MovieLocationModel _$MovieLocationModelFromJson(Map<String, dynamic> json) =>
    MovieLocationModel(
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCode: json['movieLocationCode'] as String?,
      predefinedLocationTypeId:
          (json['predefinedLocationTypeId'] as num?)?.toInt(),
      predefinedLocationSubTypeId:
          (json['predefinedLocationSubTypeId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      selectedMovieLocationCandidateId:
          (json['selectedMovieLocationCandidateId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      movieLocationCategoryId:
          (json['movieLocationCategoryId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieLocationCategoryName: json['movieLocationCategoryName'] as String?,
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      selectedMovieLocationCandidateName:
          json['selectedMovieLocationCandidateName'] as String?,
      selectedMovieLocationCandidateAskingRate:
          (json['selectedMovieLocationCandidateAskingRate'] as num?)
              ?.toDouble(),
      predefinedLocationTypeName: json['predefinedLocationTypeName'] as String?,
      predefinedLocationSubTypeName:
          json['predefinedLocationSubTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      notes: json['notes'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      contactLastName: json['contactLastName'] as String?,
      contactPhone: json['contactPhone'] as String?,
      contactEmail: json['contactEmail'] as String?,
      website: json['website'] as String?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      nearbyHospitalName: json['nearbyHospitalName'] as String?,
      nearbyHospitalPhone: json['nearbyHospitalPhone'] as String?,
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      visitedDateTime: json['visitedDateTime'] == null
          ? null
          : DateTime.parse(json['visitedDateTime'] as String),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      movieLocationCandidates:
          (json['movieLocationCandidates'] as List<dynamic>?)
                  ?.map((e) => MovieLocationCandidateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieLocationModelToJson(MovieLocationModel instance) =>
    <String, dynamic>{
      'movieLocationId': instance.movieLocationId,
      'movieLocationCode': instance.movieLocationCode,
      'predefinedLocationTypeId': instance.predefinedLocationTypeId,
      'predefinedLocationSubTypeId': instance.predefinedLocationSubTypeId,
      'movieLocationName': instance.movieLocationName,
      'selectedMovieLocationCandidateId':
          instance.selectedMovieLocationCandidateId,
      'movieId': instance.movieId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'movieLocationCategoryId': instance.movieLocationCategoryId,
      'estimatedRate': instance.estimatedRate,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieLocationCategoryName': instance.movieLocationCategoryName,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'selectedMovieLocationCandidateName':
          instance.selectedMovieLocationCandidateName,
      'selectedMovieLocationCandidateAskingRate':
          instance.selectedMovieLocationCandidateAskingRate,
      'predefinedLocationTypeName': instance.predefinedLocationTypeName,
      'predefinedLocationSubTypeName': instance.predefinedLocationSubTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'notes': instance.notes,
      'contactFirstName': instance.contactFirstName,
      'contactLastName': instance.contactLastName,
      'contactPhone': instance.contactPhone,
      'contactEmail': instance.contactEmail,
      'website': instance.website,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'state': instance.state,
      'country': instance.country,
      'nearbyHospitalName': instance.nearbyHospitalName,
      'nearbyHospitalPhone': instance.nearbyHospitalPhone,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'visitedDateTime': instance.visitedDateTime?.toIso8601String(),
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'movieLocationCandidates':
          instance.movieLocationCandidates?.map((e) => e.toJson()).toList(),
    };

MovieLocationModelReturnListModel _$MovieLocationModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieLocationModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => MovieLocationModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieLocationModelReturnListModelToJson(
        MovieLocationModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieLocationModelReturnModel _$MovieLocationModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieLocationModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieLocationModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieLocationModelReturnModelToJson(
        MovieLocationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieModel _$MovieModelFromJson(Map<String, dynamic> json) => MovieModel(
      movieId: (json['movieId'] as num?)?.toInt(),
      movieCode: json['movieCode'] as String?,
      title: json['title'] as String?,
      language: json['language'] as String?,
      runningTime: (json['runningTime'] as num?)?.toInt(),
      budgetCost: (json['budgetCost'] as num?)?.toDouble(),
      actualCost: (json['actualCost'] as num?)?.toDouble(),
      estimatedCost: (json['estimatedCost'] as num?)?.toDouble(),
      companyId: (json['companyId'] as num?)?.toInt(),
      internalValidUntilDate: json['internalValidUntilDate'] == null
          ? null
          : DateTime.parse(json['internalValidUntilDate'] as String),
      predefinedMovieStageTypeId:
          (json['predefinedMovieStageTypeId'] as num?)?.toInt(),
      predefinedMovieStatusTypeId:
          (json['predefinedMovieStatusTypeId'] as num?)?.toInt(),
      releaseDate: json['releaseDate'] == null
          ? null
          : DateTime.parse(json['releaseDate'] as String),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      isSecondCompanyAvailable: json['isSecondCompanyAvailable'] as bool?,
      secondCompanyName: json['secondCompanyName'] as String?,
      secondCompanyEmail: json['secondCompanyEmail'] as String?,
      secondCompanyContactFirstName:
          json['secondCompanyContactFirstName'] as String?,
      secondCompanyContactLastName:
          json['secondCompanyContactLastName'] as String?,
      secondCompanyWorkPhone: json['secondCompanyWorkPhone'] as String?,
      secondCompanyCellPhone: json['secondCompanyCellPhone'] as String?,
      secondCompanyAddress1: json['secondCompanyAddress1'] as String?,
      secondCompanyAddress2: json['secondCompanyAddress2'] as String?,
      secondCompanyCity: json['secondCompanyCity'] as String?,
      secondCompanyStateId: (json['secondCompanyStateId'] as num?)?.toInt(),
      secondCompanyCountryId: (json['secondCompanyCountryId'] as num?)?.toInt(),
      secondCompanyProfileImageLocation:
          json['secondCompanyProfileImageLocation'] as String?,
      secondCompanyProfileImageActualFileName:
          json['secondCompanyProfileImageActualFileName'] as String?,
      isEnabled: json['isEnabled'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      secondCompanyStateName: json['secondCompanyStateName'] as String?,
      secondCompanyCountryName: json['secondCompanyCountryName'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      numberOfDays: (json['numberOfDays'] as num?)?.toInt(),
      numberOfCallSheets: (json['numberOfCallSheets'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      completedMovieShootDayCount:
          (json['completedMovieShootDayCount'] as num?)?.toInt(),
      notCompletedMovieShootDayCount:
          (json['notCompletedMovieShootDayCount'] as num?)?.toInt(),
      totalPaidAmount: (json['totalPaidAmount'] as num?)?.toDouble(),
      existingMovieGenres: (json['existingMovieGenres'] as List<dynamic>?)
              ?.map((e) => MovieGenreModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingUserPermissions:
          (json['existingUserPermissions'] as List<dynamic>?)
                  ?.map((e) =>
                      UserPermissionModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieModelToJson(MovieModel instance) =>
    <String, dynamic>{
      'movieId': instance.movieId,
      'movieCode': instance.movieCode,
      'title': instance.title,
      'language': instance.language,
      'runningTime': instance.runningTime,
      'budgetCost': instance.budgetCost,
      'actualCost': instance.actualCost,
      'estimatedCost': instance.estimatedCost,
      'companyId': instance.companyId,
      'internalValidUntilDate':
          instance.internalValidUntilDate?.toIso8601String(),
      'predefinedMovieStageTypeId': instance.predefinedMovieStageTypeId,
      'predefinedMovieStatusTypeId': instance.predefinedMovieStatusTypeId,
      'releaseDate': instance.releaseDate?.toIso8601String(),
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'isSecondCompanyAvailable': instance.isSecondCompanyAvailable,
      'secondCompanyName': instance.secondCompanyName,
      'secondCompanyEmail': instance.secondCompanyEmail,
      'secondCompanyContactFirstName': instance.secondCompanyContactFirstName,
      'secondCompanyContactLastName': instance.secondCompanyContactLastName,
      'secondCompanyWorkPhone': instance.secondCompanyWorkPhone,
      'secondCompanyCellPhone': instance.secondCompanyCellPhone,
      'secondCompanyAddress1': instance.secondCompanyAddress1,
      'secondCompanyAddress2': instance.secondCompanyAddress2,
      'secondCompanyCity': instance.secondCompanyCity,
      'secondCompanyStateId': instance.secondCompanyStateId,
      'secondCompanyCountryId': instance.secondCompanyCountryId,
      'secondCompanyProfileImageLocation':
          instance.secondCompanyProfileImageLocation,
      'secondCompanyProfileImageActualFileName':
          instance.secondCompanyProfileImageActualFileName,
      'isEnabled': instance.isEnabled,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'secondCompanyStateName': instance.secondCompanyStateName,
      'secondCompanyCountryName': instance.secondCompanyCountryName,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'numberOfDays': instance.numberOfDays,
      'numberOfCallSheets': instance.numberOfCallSheets,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'completedMovieShootDayCount': instance.completedMovieShootDayCount,
      'notCompletedMovieShootDayCount': instance.notCompletedMovieShootDayCount,
      'totalPaidAmount': instance.totalPaidAmount,
      'existingMovieGenres':
          instance.existingMovieGenres?.map((e) => e.toJson()).toList(),
      'existingUserPermissions':
          instance.existingUserPermissions?.map((e) => e.toJson()).toList(),
    };

MovieModelReturnListModel _$MovieModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MovieModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieModelReturnListModelToJson(
        MovieModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieModelReturnModel _$MovieModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieModelReturnModelToJson(
        MovieModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MoviePropertyCreateModel _$MoviePropertyCreateModelFromJson(
        Map<String, dynamic> json) =>
    MoviePropertyCreateModel(
      moviePropertyCode: json['moviePropertyCode'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      parentMoviePropertyId: (json['parentMoviePropertyId'] as num?)?.toInt(),
      moviePropertyName: json['moviePropertyName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      predefinedPropertyOrEquipmentRequestedByTypeId:
          (json['predefinedPropertyOrEquipmentRequestedByTypeId'] as num?)
              ?.toInt(),
      requestedDateTime: json['requestedDateTime'] == null
          ? null
          : DateTime.parse(json['requestedDateTime'] as String),
      requestedMovieArtistId: (json['requestedMovieArtistId'] as num?)?.toInt(),
      requestedMovieTechnicianId:
          (json['requestedMovieTechnicianId'] as num?)?.toInt(),
      requestedMovieUserId: (json['requestedMovieUserId'] as num?)?.toInt(),
      requestedNotes: json['requestedNotes'] as String?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      predefinedPropertyForTypeId:
          (json['predefinedPropertyForTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newMoviePropertyRates: (json['newMoviePropertyRates'] as List<dynamic>?)
              ?.map((e) => MoviePropertyRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MoviePropertyCreateModelToJson(
        MoviePropertyCreateModel instance) =>
    <String, dynamic>{
      'moviePropertyCode': instance.moviePropertyCode,
      'propertyId': instance.propertyId,
      'propertyTypeId': instance.propertyTypeId,
      'parentMoviePropertyId': instance.parentMoviePropertyId,
      'moviePropertyName': instance.moviePropertyName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'predefinedPropertyOrEquipmentRequestedByTypeId':
          instance.predefinedPropertyOrEquipmentRequestedByTypeId,
      'requestedDateTime': instance.requestedDateTime?.toIso8601String(),
      'requestedMovieArtistId': instance.requestedMovieArtistId,
      'requestedMovieTechnicianId': instance.requestedMovieTechnicianId,
      'requestedMovieUserId': instance.requestedMovieUserId,
      'requestedNotes': instance.requestedNotes,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'predefinedPropertyForTypeId': instance.predefinedPropertyForTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'movieEquipmentId': instance.movieEquipmentId,
      'departmentId': instance.departmentId,
      'estimatedRate': instance.estimatedRate,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'useDefaultRates': instance.useDefaultRates,
      'newMoviePropertyRates':
          instance.newMoviePropertyRates?.map((e) => e.toJson()).toList(),
    };

MoviePropertyModel _$MoviePropertyModelFromJson(Map<String, dynamic> json) =>
    MoviePropertyModel(
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      moviePropertyCode: json['moviePropertyCode'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      parentMoviePropertyId: (json['parentMoviePropertyId'] as num?)?.toInt(),
      moviePropertyName: json['moviePropertyName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      predefinedPropertyOrEquipmentRequestedByTypeId:
          (json['predefinedPropertyOrEquipmentRequestedByTypeId'] as num?)
              ?.toInt(),
      requestedDateTime: json['requestedDateTime'] == null
          ? null
          : DateTime.parse(json['requestedDateTime'] as String),
      requestedMovieArtistId: (json['requestedMovieArtistId'] as num?)?.toInt(),
      requestedMovieTechnicianId:
          (json['requestedMovieTechnicianId'] as num?)?.toInt(),
      requestedMovieUserId: (json['requestedMovieUserId'] as num?)?.toInt(),
      requestedNotes: json['requestedNotes'] as String?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      predefinedPropertyForTypeId:
          (json['predefinedPropertyForTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      predefinedContractStatusTypeId:
          (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
      predefinedContractStatusTypeName:
          json['predefinedContractStatusTypeName'] as String?,
      departmentName: json['departmentName'] as String?,
      propertyName: json['propertyName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTitle: json['movieTitle'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      isMovieEnabled: json['isMovieEnabled'] as bool?,
      propertyCode: json['propertyCode'] as String?,
      contractName: json['contractName'] as String?,
      propertyTypeName: json['propertyTypeName'] as String?,
      parentMoviePropertyName: json['parentMoviePropertyName'] as String?,
      notes: json['notes'] as String?,
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      defaultPreProductionMovieBudgetCategoryName:
          json['defaultPreProductionMovieBudgetCategoryName'] as String?,
      defaultProductionMovieBudgetCategoryName:
          json['defaultProductionMovieBudgetCategoryName'] as String?,
      defaultPostProductionMovieBudgetCategoryName:
          json['defaultPostProductionMovieBudgetCategoryName'] as String?,
      defaultPreProductionMovieBudgetCategoryCode:
          json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
      defaultProductionMovieBudgetCategoryCode:
          json['defaultProductionMovieBudgetCategoryCode'] as String?,
      defaultPostProductionMovieBudgetCategoryCode:
          json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
      predefinedContractAssignmentStatusTypeName:
          json['predefinedContractAssignmentStatusTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingMoviePropertyRates: (json['existingMoviePropertyRates']
                  as List<dynamic>?)
              ?.map((e) =>
                  MoviePropertyRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MoviePropertyModelToJson(MoviePropertyModel instance) =>
    <String, dynamic>{
      'moviePropertyId': instance.moviePropertyId,
      'moviePropertyCode': instance.moviePropertyCode,
      'propertyId': instance.propertyId,
      'propertyTypeId': instance.propertyTypeId,
      'parentMoviePropertyId': instance.parentMoviePropertyId,
      'moviePropertyName': instance.moviePropertyName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'predefinedPropertyOrEquipmentRequestedByTypeId':
          instance.predefinedPropertyOrEquipmentRequestedByTypeId,
      'requestedDateTime': instance.requestedDateTime?.toIso8601String(),
      'requestedMovieArtistId': instance.requestedMovieArtistId,
      'requestedMovieTechnicianId': instance.requestedMovieTechnicianId,
      'requestedMovieUserId': instance.requestedMovieUserId,
      'requestedNotes': instance.requestedNotes,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'predefinedPropertyForTypeId': instance.predefinedPropertyForTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'movieEquipmentId': instance.movieEquipmentId,
      'departmentId': instance.departmentId,
      'estimatedRate': instance.estimatedRate,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'departmentName': instance.departmentName,
      'propertyName': instance.propertyName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'propertyCode': instance.propertyCode,
      'contractName': instance.contractName,
      'propertyTypeName': instance.propertyTypeName,
      'parentMoviePropertyName': instance.parentMoviePropertyName,
      'notes': instance.notes,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMoviePropertyRates':
          instance.existingMoviePropertyRates?.map((e) => e.toJson()).toList(),
    };

MoviePropertyModelReturnListModel _$MoviePropertyModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MoviePropertyModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => MoviePropertyModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MoviePropertyModelReturnListModelToJson(
        MoviePropertyModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MoviePropertyModelReturnModel _$MoviePropertyModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MoviePropertyModelReturnModel(
      model: json['model'] == null
          ? null
          : MoviePropertyModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MoviePropertyModelReturnModelToJson(
        MoviePropertyModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MoviePropertyRateCreateModel _$MoviePropertyRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    MoviePropertyRateCreateModel(
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MoviePropertyRateCreateModelToJson(
        MoviePropertyRateCreateModel instance) =>
    <String, dynamic>{
      'moviePropertyId': instance.moviePropertyId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MoviePropertyRateModel _$MoviePropertyRateModelFromJson(
        Map<String, dynamic> json) =>
    MoviePropertyRateModel(
      moviePropertyRateId: (json['moviePropertyRateId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      moviePropertyName: json['moviePropertyName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      companyName: json['companyName'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MoviePropertyRateModelToJson(
        MoviePropertyRateModel instance) =>
    <String, dynamic>{
      'moviePropertyRateId': instance.moviePropertyRateId,
      'moviePropertyId': instance.moviePropertyId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'moviePropertyName': instance.moviePropertyName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'companyName': instance.companyName,
      'moviePropertyCode': instance.moviePropertyCode,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MoviePropertyRateModelReturnListModel
    _$MoviePropertyRateModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MoviePropertyRateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MoviePropertyRateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MoviePropertyRateModelReturnListModelToJson(
        MoviePropertyRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MoviePropertyRateModelReturnModel _$MoviePropertyRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MoviePropertyRateModelReturnModel(
      model: json['model'] == null
          ? null
          : MoviePropertyRateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MoviePropertyRateModelReturnModelToJson(
        MoviePropertyRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MoviePropertyRateUpdateModel _$MoviePropertyRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MoviePropertyRateUpdateModel(
      moviePropertyRateId: (json['moviePropertyRateId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MoviePropertyRateUpdateModelToJson(
        MoviePropertyRateUpdateModel instance) =>
    <String, dynamic>{
      'moviePropertyRateId': instance.moviePropertyRateId,
      'moviePropertyId': instance.moviePropertyId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MoviePropertyUpdateModel _$MoviePropertyUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MoviePropertyUpdateModel(
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      moviePropertyCode: json['moviePropertyCode'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      parentMoviePropertyId: (json['parentMoviePropertyId'] as num?)?.toInt(),
      moviePropertyName: json['moviePropertyName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      predefinedPropertyOrEquipmentRequestedByTypeId:
          (json['predefinedPropertyOrEquipmentRequestedByTypeId'] as num?)
              ?.toInt(),
      requestedDateTime: json['requestedDateTime'] == null
          ? null
          : DateTime.parse(json['requestedDateTime'] as String),
      requestedMovieArtistId: (json['requestedMovieArtistId'] as num?)?.toInt(),
      requestedMovieTechnicianId:
          (json['requestedMovieTechnicianId'] as num?)?.toInt(),
      requestedMovieUserId: (json['requestedMovieUserId'] as num?)?.toInt(),
      requestedNotes: json['requestedNotes'] as String?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      predefinedPropertyForTypeId:
          (json['predefinedPropertyForTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      existingMoviePropertyRates:
          (json['existingMoviePropertyRates'] as List<dynamic>?)
                  ?.map((e) => MoviePropertyRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newMoviePropertyRates: (json['newMoviePropertyRates'] as List<dynamic>?)
              ?.map((e) => MoviePropertyRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MoviePropertyUpdateModelToJson(
        MoviePropertyUpdateModel instance) =>
    <String, dynamic>{
      'moviePropertyId': instance.moviePropertyId,
      'moviePropertyCode': instance.moviePropertyCode,
      'propertyId': instance.propertyId,
      'propertyTypeId': instance.propertyTypeId,
      'parentMoviePropertyId': instance.parentMoviePropertyId,
      'moviePropertyName': instance.moviePropertyName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'predefinedPropertyOrEquipmentRequestedByTypeId':
          instance.predefinedPropertyOrEquipmentRequestedByTypeId,
      'requestedDateTime': instance.requestedDateTime?.toIso8601String(),
      'requestedMovieArtistId': instance.requestedMovieArtistId,
      'requestedMovieTechnicianId': instance.requestedMovieTechnicianId,
      'requestedMovieUserId': instance.requestedMovieUserId,
      'requestedNotes': instance.requestedNotes,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'predefinedPropertyForTypeId': instance.predefinedPropertyForTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'movieEquipmentId': instance.movieEquipmentId,
      'departmentId': instance.departmentId,
      'estimatedRate': instance.estimatedRate,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'useDefaultRates': instance.useDefaultRates,
      'existingMoviePropertyRates':
          instance.existingMoviePropertyRates?.map((e) => e.toJson()).toList(),
      'newMoviePropertyRates':
          instance.newMoviePropertyRates?.map((e) => e.toJson()).toList(),
    };

MoviePropertyWithCompanyPropertyCreateModel
    _$MoviePropertyWithCompanyPropertyCreateModelFromJson(
            Map<String, dynamic> json) =>
        MoviePropertyWithCompanyPropertyCreateModel(
          propertyCode: json['propertyCode'] as String?,
          propertyName: json['propertyName'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          specification: json['specification'] as String?,
          colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          isOwn: json['isOwn'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newPropertyRates: (json['newPropertyRates'] as List<dynamic>?)
                  ?.map((e) => PropertyRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          moviePropertyCode: json['moviePropertyCode'] as String?,
          propertyId: (json['propertyId'] as num?)?.toInt(),
          parentMoviePropertyId:
              (json['parentMoviePropertyId'] as num?)?.toInt(),
          moviePropertyName: json['moviePropertyName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MoviePropertyWithCompanyPropertyCreateModelToJson(
        MoviePropertyWithCompanyPropertyCreateModel instance) =>
    <String, dynamic>{
      'propertyCode': instance.propertyCode,
      'propertyName': instance.propertyName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'colorTypeId': instance.colorTypeId,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'propertyTypeId': instance.propertyTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newPropertyRates':
          instance.newPropertyRates?.map((e) => e.toJson()).toList(),
      'moviePropertyId': instance.moviePropertyId,
      'moviePropertyCode': instance.moviePropertyCode,
      'propertyId': instance.propertyId,
      'parentMoviePropertyId': instance.parentMoviePropertyId,
      'moviePropertyName': instance.moviePropertyName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'movieId': instance.movieId,
    };

MoviePropertyWithCompanyPropertyModel
    _$MoviePropertyWithCompanyPropertyModelFromJson(
            Map<String, dynamic> json) =>
        MoviePropertyWithCompanyPropertyModel(
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          moviePropertyCode: json['moviePropertyCode'] as String?,
          propertyId: (json['propertyId'] as num?)?.toInt(),
          propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
          parentMoviePropertyId:
              (json['parentMoviePropertyId'] as num?)?.toInt(),
          moviePropertyName: json['moviePropertyName'] as String?,
          requiredDays: (json['requiredDays'] as num?)?.toInt(),
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          predefinedPropertyOrEquipmentRequestedByTypeId:
              (json['predefinedPropertyOrEquipmentRequestedByTypeId'] as num?)
                  ?.toInt(),
          requestedDateTime: json['requestedDateTime'] == null
              ? null
              : DateTime.parse(json['requestedDateTime'] as String),
          requestedMovieArtistId:
              (json['requestedMovieArtistId'] as num?)?.toInt(),
          requestedMovieTechnicianId:
              (json['requestedMovieTechnicianId'] as num?)?.toInt(),
          requestedMovieUserId: (json['requestedMovieUserId'] as num?)?.toInt(),
          requestedNotes: json['requestedNotes'] as String?,
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          predefinedPropertyForTypeId:
              (json['predefinedPropertyForTypeId'] as num?)?.toInt(),
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['preProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['productionStatusTypeId'] as num?)?.toInt(),
          movieShootDayBudgetId:
              (json['movieShootDayBudgetId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          postProductionStatusTypeName:
              json['postProductionStatusTypeName'] as String?,
          preProductionStatusTypeName:
              json['preProductionStatusTypeName'] as String?,
          productionStatusTypeName: json['productionStatusTypeName'] as String?,
          predefinedContractStatusTypeId:
              (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
          predefinedContractStatusTypeName:
              json['predefinedContractStatusTypeName'] as String?,
          departmentName: json['departmentName'] as String?,
          propertyName: json['propertyName'] as String?,
          companyName: json['companyName'] as String?,
          companyCode: json['companyCode'] as String?,
          movieCode: json['movieCode'] as String?,
          movieTitle: json['movieTitle'] as String?,
          predefinedMovieStatusTypeName:
              json['predefinedMovieStatusTypeName'] as String?,
          predefinedMovieStageTypeName:
              json['predefinedMovieStageTypeName'] as String?,
          isMovieEnabled: json['isMovieEnabled'] as bool?,
          propertyCode: json['propertyCode'] as String?,
          contractName: json['contractName'] as String?,
          propertyTypeName: json['propertyTypeName'] as String?,
          parentMoviePropertyName: json['parentMoviePropertyName'] as String?,
          notes: json['notes'] as String?,
          canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
          defaultPreProductionMovieBudgetCategoryName:
              json['defaultPreProductionMovieBudgetCategoryName'] as String?,
          defaultProductionMovieBudgetCategoryName:
              json['defaultProductionMovieBudgetCategoryName'] as String?,
          defaultPostProductionMovieBudgetCategoryName:
              json['defaultPostProductionMovieBudgetCategoryName'] as String?,
          defaultPreProductionMovieBudgetCategoryCode:
              json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
          defaultProductionMovieBudgetCategoryCode:
              json['defaultProductionMovieBudgetCategoryCode'] as String?,
          defaultPostProductionMovieBudgetCategoryCode:
              json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
          predefinedContractAssignmentStatusTypeName:
              json['predefinedContractAssignmentStatusTypeName'] as String?,
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
          existingMoviePropertyRates:
              (json['existingMoviePropertyRates'] as List<dynamic>?)
                      ?.map((e) => MoviePropertyRateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          isNonMovieProperty: json['isNonMovieProperty'] as bool?,
        );

Map<String, dynamic> _$MoviePropertyWithCompanyPropertyModelToJson(
        MoviePropertyWithCompanyPropertyModel instance) =>
    <String, dynamic>{
      'moviePropertyId': instance.moviePropertyId,
      'moviePropertyCode': instance.moviePropertyCode,
      'propertyId': instance.propertyId,
      'propertyTypeId': instance.propertyTypeId,
      'parentMoviePropertyId': instance.parentMoviePropertyId,
      'moviePropertyName': instance.moviePropertyName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'predefinedPropertyOrEquipmentRequestedByTypeId':
          instance.predefinedPropertyOrEquipmentRequestedByTypeId,
      'requestedDateTime': instance.requestedDateTime?.toIso8601String(),
      'requestedMovieArtistId': instance.requestedMovieArtistId,
      'requestedMovieTechnicianId': instance.requestedMovieTechnicianId,
      'requestedMovieUserId': instance.requestedMovieUserId,
      'requestedNotes': instance.requestedNotes,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'predefinedPropertyForTypeId': instance.predefinedPropertyForTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'movieEquipmentId': instance.movieEquipmentId,
      'departmentId': instance.departmentId,
      'estimatedRate': instance.estimatedRate,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'departmentName': instance.departmentName,
      'propertyName': instance.propertyName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'propertyCode': instance.propertyCode,
      'contractName': instance.contractName,
      'propertyTypeName': instance.propertyTypeName,
      'parentMoviePropertyName': instance.parentMoviePropertyName,
      'notes': instance.notes,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMoviePropertyRates':
          instance.existingMoviePropertyRates?.map((e) => e.toJson()).toList(),
      'isNonMovieProperty': instance.isNonMovieProperty,
    };

MoviePropertyWithCompanyPropertyModelReturnListModel
    _$MoviePropertyWithCompanyPropertyModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MoviePropertyWithCompanyPropertyModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MoviePropertyWithCompanyPropertyModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MoviePropertyWithCompanyPropertyModelReturnListModelToJson(
            MoviePropertyWithCompanyPropertyModelReturnListModel instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieResourceBudgetExpenseSummaryModel
    _$MovieResourceBudgetExpenseSummaryModelFromJson(
            Map<String, dynamic> json) =>
        MovieResourceBudgetExpenseSummaryModel(
          departmentId: (json['departmentId'] as num?)?.toInt(),
          departmentName: json['departmentName'] as String?,
          movieResourceId: (json['movieResourceId'] as num?)?.toInt(),
          movieResourceName: json['movieResourceName'] as String?,
          budgetTotalAmount: (json['budgetTotalAmount'] as num?)?.toDouble(),
          expenseTotalAmount: (json['expenseTotalAmount'] as num?)?.toDouble(),
          paidTotalAmount: (json['paidTotalAmount'] as num?)?.toDouble(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieName: json['movieName'] as String?,
          predefinedBudgetOrExpenseTypeId:
              (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
          predefinedBudgetOrExpenseTypeName:
              json['predefinedBudgetOrExpenseTypeName'] as String?,
          predefinedBudgetDivisionTypeId:
              (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
          predefinedBudgetDivisionTypeName:
              json['predefinedBudgetDivisionTypeName'] as String?,
          companyId: (json['companyId'] as num?)?.toInt(),
          companyName: json['companyName'] as String?,
        );

Map<String, dynamic> _$MovieResourceBudgetExpenseSummaryModelToJson(
        MovieResourceBudgetExpenseSummaryModel instance) =>
    <String, dynamic>{
      'departmentId': instance.departmentId,
      'departmentName': instance.departmentName,
      'movieResourceId': instance.movieResourceId,
      'movieResourceName': instance.movieResourceName,
      'budgetTotalAmount': instance.budgetTotalAmount,
      'expenseTotalAmount': instance.expenseTotalAmount,
      'paidTotalAmount': instance.paidTotalAmount,
      'movieId': instance.movieId,
      'movieName': instance.movieName,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedBudgetOrExpenseTypeName':
          instance.predefinedBudgetOrExpenseTypeName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'predefinedBudgetDivisionTypeName':
          instance.predefinedBudgetDivisionTypeName,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
    };

MovieResourceBudgetExpenseSummaryModelReturnListModel
    _$MovieResourceBudgetExpenseSummaryModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieResourceBudgetExpenseSummaryModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieResourceBudgetExpenseSummaryModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieResourceBudgetExpenseSummaryModelReturnListModelToJson(
            MovieResourceBudgetExpenseSummaryModelReturnListModel instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieSceneArtistCreateModel _$MovieSceneArtistCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneArtistCreateModel(
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieSceneArtistName: json['movieSceneArtistName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieArtistOnTheFly: json['createMovieArtistOnTheFly'] as bool?,
      artistId: (json['artistId'] as num?)?.toInt(),
      characterName: json['characterName'] as String?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieSceneArtistCreateModelToJson(
        MovieSceneArtistCreateModel instance) =>
    <String, dynamic>{
      'movieSceneId': instance.movieSceneId,
      'movieArtistId': instance.movieArtistId,
      'movieSceneArtistName': instance.movieSceneArtistName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieArtistOnTheFly': instance.createMovieArtistOnTheFly,
      'artistId': instance.artistId,
      'characterName': instance.characterName,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieSceneArtistModel _$MovieSceneArtistModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneArtistModel(
      movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieSceneArtistName: json['movieSceneArtistName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      artistWorkPhone: json['artistWorkPhone'] as String?,
      artistCellPhone: json['artistCellPhone'] as String?,
      artistEmail: json['artistEmail'] as String?,
      artistAssistantName: json['artistAssistantName'] as String?,
      artistAssistantPhone: json['artistAssistantPhone'] as String?,
      artistAssistantEmail: json['artistAssistantEmail'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      movieSceneName: json['movieSceneName'] as String?,
      movieArtistName: json['movieArtistName'] as String?,
      movieArtistCharacterName: json['movieArtistCharacterName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieArtistCode: json['movieArtistCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieSceneArtistModelToJson(
        MovieSceneArtistModel instance) =>
    <String, dynamic>{
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneId': instance.movieSceneId,
      'movieArtistId': instance.movieArtistId,
      'movieSceneArtistName': instance.movieSceneArtistName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'position': instance.position,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'artistWorkPhone': instance.artistWorkPhone,
      'artistCellPhone': instance.artistCellPhone,
      'artistEmail': instance.artistEmail,
      'artistAssistantName': instance.artistAssistantName,
      'artistAssistantPhone': instance.artistAssistantPhone,
      'artistAssistantEmail': instance.artistAssistantEmail,
      'artistTypeName': instance.artistTypeName,
      'artistTypeId': instance.artistTypeId,
      'artistId': instance.artistId,
      'movieSceneName': instance.movieSceneName,
      'movieArtistName': instance.movieArtistName,
      'movieArtistCharacterName': instance.movieArtistCharacterName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieArtistCode': instance.movieArtistCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieSceneArtistModelReturnListModel
    _$MovieSceneArtistModelReturnListModelFromJson(Map<String, dynamic> json) =>
        MovieSceneArtistModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieSceneArtistModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieSceneArtistModelReturnListModelToJson(
        MovieSceneArtistModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneArtistModelReturnModel _$MovieSceneArtistModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneArtistModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieSceneArtistModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSceneArtistModelReturnModelToJson(
        MovieSceneArtistModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneArtistUpdateModel _$MovieSceneArtistUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneArtistUpdateModel(
      movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieSceneArtistName: json['movieSceneArtistName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieArtistOnTheFly: json['createMovieArtistOnTheFly'] as bool?,
      artistId: (json['artistId'] as num?)?.toInt(),
      characterName: json['characterName'] as String?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieSceneArtistUpdateModelToJson(
        MovieSceneArtistUpdateModel instance) =>
    <String, dynamic>{
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneId': instance.movieSceneId,
      'movieArtistId': instance.movieArtistId,
      'movieSceneArtistName': instance.movieSceneArtistName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieArtistOnTheFly': instance.createMovieArtistOnTheFly,
      'artistId': instance.artistId,
      'characterName': instance.characterName,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieSceneArtistWithMovieAndCompanyArtistCreateModel
    _$MovieSceneArtistWithMovieAndCompanyArtistCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieSceneArtistWithMovieAndCompanyArtistCreateModel(
          artistCode: json['artistCode'] as String?,
          artistFirstName: json['artistFirstName'] as String?,
          artistLastName: json['artistLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          departmentId: (json['departmentId'] as num?)?.toInt(),
          artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isPrimaryCast: json['isPrimaryCast'] as bool?,
          isDisabled: json['isDisabled'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newArtistRates: (json['newArtistRates'] as List<dynamic>?)
                  ?.map((e) =>
                      ArtistRateCreateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieArtistCode: json['movieArtistCode'] as String?,
          artistId: (json['artistId'] as num?)?.toInt(),
          artistCharacterName: json['artistCharacterName'] as String?,
          parentMovieArtistId: (json['parentMovieArtistId'] as num?)?.toInt(),
          movieArtistName: json['movieArtistName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieSceneArtistName: json['movieSceneArtistName'] as String?,
        );

Map<String, dynamic>
    _$MovieSceneArtistWithMovieAndCompanyArtistCreateModelToJson(
            MovieSceneArtistWithMovieAndCompanyArtistCreateModel instance) =>
        <String, dynamic>{
          'artistCode': instance.artistCode,
          'artistFirstName': instance.artistFirstName,
          'artistLastName': instance.artistLastName,
          'workPhone': instance.workPhone,
          'cellPhone': instance.cellPhone,
          'email': instance.email,
          'assistantName': instance.assistantName,
          'assistantPhone': instance.assistantPhone,
          'assistantEmail': instance.assistantEmail,
          'departmentId': instance.departmentId,
          'artistTypeId': instance.artistTypeId,
          'position': instance.position,
          'profileImageLocation': instance.profileImageLocation,
          'profileImageActualFileName': instance.profileImageActualFileName,
          'defaultPreProductionBudgetCategoryId':
              instance.defaultPreProductionBudgetCategoryId,
          'defaultProductionBudgetCategoryId':
              instance.defaultProductionBudgetCategoryId,
          'defaultPostProductionBudgetCategoryId':
              instance.defaultPostProductionBudgetCategoryId,
          'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
          'companyId': instance.companyId,
          'isPrimaryCast': instance.isPrimaryCast,
          'isDisabled': instance.isDisabled,
          'useDefaultRates': instance.useDefaultRates,
          'newArtistRates':
              instance.newArtistRates?.map((e) => e.toJson()).toList(),
          'movieArtistId': instance.movieArtistId,
          'movieArtistCode': instance.movieArtistCode,
          'artistId': instance.artistId,
          'artistCharacterName': instance.artistCharacterName,
          'parentMovieArtistId': instance.parentMovieArtistId,
          'movieArtistName': instance.movieArtistName,
          'predefinedContractAssignmentStatusTypeId':
              instance.predefinedContractAssignmentStatusTypeId,
          'contractId': instance.contractId,
          'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'isPartOfMajorCrew': instance.isPartOfMajorCrew,
          'defaultPreProductionMovieBudgetCategoryId':
              instance.defaultPreProductionMovieBudgetCategoryId,
          'defaultProductionMovieBudgetCategoryId':
              instance.defaultProductionMovieBudgetCategoryId,
          'defaultPostProductionMovieBudgetCategoryId':
              instance.defaultPostProductionMovieBudgetCategoryId,
          'movieId': instance.movieId,
          'movieSceneArtistId': instance.movieSceneArtistId,
          'movieSceneId': instance.movieSceneId,
          'movieSceneArtistName': instance.movieSceneArtistName,
        };

MovieSceneCreateModel _$MovieSceneCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneCreateModel(
      movieSceneCode: json['movieSceneCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieSceneName: json['movieSceneName'] as String?,
      predefinedMovieSceneStatusTypeId:
          (json['predefinedMovieSceneStatusTypeId'] as num?)?.toInt(),
      setup: json['setup'] as String?,
      description: json['description'] as String?,
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      defaultMovieUnitId: (json['defaultMovieUnitId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSceneCreateModelToJson(
        MovieSceneCreateModel instance) =>
    <String, dynamic>{
      'movieSceneCode': instance.movieSceneCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieSceneName': instance.movieSceneName,
      'predefinedMovieSceneStatusTypeId':
          instance.predefinedMovieSceneStatusTypeId,
      'setup': instance.setup,
      'description': instance.description,
      'movieLocationId': instance.movieLocationId,
      'defaultMovieUnitId': instance.defaultMovieUnitId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieSceneEquipmentCreateModel _$MovieSceneEquipmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneEquipmentCreateModel(
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieSceneEquipmentName: json['movieSceneEquipmentName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieEquipmentOnTheFly:
          json['createMovieEquipmentOnTheFly'] as bool?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieSceneEquipmentCreateModelToJson(
        MovieSceneEquipmentCreateModel instance) =>
    <String, dynamic>{
      'movieSceneId': instance.movieSceneId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieSceneEquipmentName': instance.movieSceneEquipmentName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieEquipmentOnTheFly': instance.createMovieEquipmentOnTheFly,
      'equipmentId': instance.equipmentId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieSceneEquipmentModel _$MovieSceneEquipmentModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneEquipmentModel(
      movieSceneEquipmentId: (json['movieSceneEquipmentId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieSceneEquipmentName: json['movieSceneEquipmentName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      equipmentTypeName: json['equipmentTypeName'] as String?,
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      movieSceneName: json['movieSceneName'] as String?,
      movieEquipmentName: json['movieEquipmentName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieSceneEquipmentModelToJson(
        MovieSceneEquipmentModel instance) =>
    <String, dynamic>{
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieSceneId': instance.movieSceneId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieSceneEquipmentName': instance.movieSceneEquipmentName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'position': instance.position,
      'equipmentTypeName': instance.equipmentTypeName,
      'equipmentTypeId': instance.equipmentTypeId,
      'equipmentId': instance.equipmentId,
      'movieSceneName': instance.movieSceneName,
      'movieEquipmentName': instance.movieEquipmentName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieSceneEquipmentModelReturnListModel
    _$MovieSceneEquipmentModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieSceneEquipmentModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieSceneEquipmentModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieSceneEquipmentModelReturnListModelToJson(
        MovieSceneEquipmentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneEquipmentModelReturnModel
    _$MovieSceneEquipmentModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieSceneEquipmentModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieSceneEquipmentModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieSceneEquipmentModelReturnModelToJson(
        MovieSceneEquipmentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneEquipmentUpdateModel _$MovieSceneEquipmentUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneEquipmentUpdateModel(
      movieSceneEquipmentId: (json['movieSceneEquipmentId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieSceneEquipmentName: json['movieSceneEquipmentName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieEquipmentOnTheFly:
          json['createMovieEquipmentOnTheFly'] as bool?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieSceneEquipmentUpdateModelToJson(
        MovieSceneEquipmentUpdateModel instance) =>
    <String, dynamic>{
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieSceneId': instance.movieSceneId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieSceneEquipmentName': instance.movieSceneEquipmentName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieEquipmentOnTheFly': instance.createMovieEquipmentOnTheFly,
      'equipmentId': instance.equipmentId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieSceneEquipmentWithMovieAndCompanyEquipmentCreateModel
    _$MovieSceneEquipmentWithMovieAndCompanyEquipmentCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieSceneEquipmentWithMovieAndCompanyEquipmentCreateModel(
          equipmentCode: json['equipmentCode'] as String?,
          equipmentName: json['equipmentName'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          specification: json['specification'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          position: (json['position'] as num?)?.toInt(),
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          isOwn: json['isOwn'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newEquipmentRates: (json['newEquipmentRates'] as List<dynamic>?)
                  ?.map((e) => EquipmentRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          movieEquipmentCode: json['movieEquipmentCode'] as String?,
          equipmentId: (json['equipmentId'] as num?)?.toInt(),
          parentMovieEquipmentId:
              (json['parentMovieEquipmentId'] as num?)?.toInt(),
          movieEquipmentName: json['movieEquipmentName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieSceneEquipmentId:
              (json['movieSceneEquipmentId'] as num?)?.toInt(),
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieSceneEquipmentName: json['movieSceneEquipmentName'] as String?,
        );

Map<String,
    dynamic> _$MovieSceneEquipmentWithMovieAndCompanyEquipmentCreateModelToJson(
        MovieSceneEquipmentWithMovieAndCompanyEquipmentCreateModel instance) =>
    <String, dynamic>{
      'equipmentCode': instance.equipmentCode,
      'equipmentName': instance.equipmentName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'equipmentTypeId': instance.equipmentTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'position': instance.position,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newEquipmentRates':
          instance.newEquipmentRates?.map((e) => e.toJson()).toList(),
      'movieEquipmentId': instance.movieEquipmentId,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'equipmentId': instance.equipmentId,
      'parentMovieEquipmentId': instance.parentMovieEquipmentId,
      'movieEquipmentName': instance.movieEquipmentName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'movieId': instance.movieId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneEquipmentName': instance.movieSceneEquipmentName,
    };

MovieSceneModel _$MovieSceneModelFromJson(Map<String, dynamic> json) =>
    MovieSceneModel(
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieSceneCode: json['movieSceneCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieSceneName: json['movieSceneName'] as String?,
      predefinedMovieSceneStatusTypeId:
          (json['predefinedMovieSceneStatusTypeId'] as num?)?.toInt(),
      setup: json['setup'] as String?,
      description: json['description'] as String?,
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      defaultMovieUnitId: (json['defaultMovieUnitId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      defaultMovieUnitName: json['defaultMovieUnitName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieUnitCode: json['movieUnitCode'] as String?,
      totalMovieShootDayAssociationCount:
          (json['totalMovieShootDayAssociationCount'] as num?)?.toInt(),
      predefinedMovieSceneStatusTypeName:
          json['predefinedMovieSceneStatusTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      associatedMovieShootDays: (json['associatedMovieShootDays']
                  as List<dynamic>?)
              ?.map(
                  (e) => MovieShootDayModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieSceneArtists: (json['movieSceneArtists'] as List<dynamic>?)
              ?.map((e) =>
                  MovieSceneArtistModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieSceneTechnicians: (json['movieSceneTechnicians'] as List<dynamic>?)
              ?.map((e) =>
                  MovieSceneTechnicianModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieSceneEquipments: (json['movieSceneEquipments'] as List<dynamic>?)
              ?.map((e) =>
                  MovieSceneEquipmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieSceneRequirements: (json['movieSceneRequirements'] as List<dynamic>?)
              ?.map((e) => MovieSceneRequirementModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      movieSceneNoteAttachments:
          (json['movieSceneNoteAttachments'] as List<dynamic>?)
                  ?.map((e) =>
                      NoteAttachmentModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieSceneModelToJson(MovieSceneModel instance) =>
    <String, dynamic>{
      'movieSceneId': instance.movieSceneId,
      'movieSceneCode': instance.movieSceneCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieSceneName': instance.movieSceneName,
      'predefinedMovieSceneStatusTypeId':
          instance.predefinedMovieSceneStatusTypeId,
      'setup': instance.setup,
      'description': instance.description,
      'movieLocationId': instance.movieLocationId,
      'defaultMovieUnitId': instance.defaultMovieUnitId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieLocationName': instance.movieLocationName,
      'defaultMovieUnitName': instance.defaultMovieUnitName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieUnitCode': instance.movieUnitCode,
      'totalMovieShootDayAssociationCount':
          instance.totalMovieShootDayAssociationCount,
      'predefinedMovieSceneStatusTypeName':
          instance.predefinedMovieSceneStatusTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'associatedMovieShootDays':
          instance.associatedMovieShootDays?.map((e) => e.toJson()).toList(),
      'movieSceneArtists':
          instance.movieSceneArtists?.map((e) => e.toJson()).toList(),
      'movieSceneTechnicians':
          instance.movieSceneTechnicians?.map((e) => e.toJson()).toList(),
      'movieSceneEquipments':
          instance.movieSceneEquipments?.map((e) => e.toJson()).toList(),
      'movieSceneRequirements':
          instance.movieSceneRequirements?.map((e) => e.toJson()).toList(),
      'movieSceneNoteAttachments':
          instance.movieSceneNoteAttachments?.map((e) => e.toJson()).toList(),
    };

MovieSceneModelReturnListModel _$MovieSceneModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MovieSceneModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSceneModelReturnListModelToJson(
        MovieSceneModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneModelReturnModel _$MovieSceneModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieSceneModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSceneModelReturnModelToJson(
        MovieSceneModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieScenePropertyCreateModel _$MovieScenePropertyCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieScenePropertyCreateModel(
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieScenePropertyName: json['movieScenePropertyName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMoviePropertyOnTheFly: json['createMoviePropertyOnTheFly'] as bool?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieScenePropertyCreateModelToJson(
        MovieScenePropertyCreateModel instance) =>
    <String, dynamic>{
      'movieSceneId': instance.movieSceneId,
      'moviePropertyId': instance.moviePropertyId,
      'movieScenePropertyName': instance.movieScenePropertyName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMoviePropertyOnTheFly': instance.createMoviePropertyOnTheFly,
      'propertyId': instance.propertyId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieScenePropertyModel _$MovieScenePropertyModelFromJson(
        Map<String, dynamic> json) =>
    MovieScenePropertyModel(
      movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieScenePropertyName: json['movieScenePropertyName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyTypeName: json['propertyTypeName'] as String?,
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      movieSceneName: json['movieSceneName'] as String?,
      moviePropertyName: json['moviePropertyName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieScenePropertyModelToJson(
        MovieScenePropertyModel instance) =>
    <String, dynamic>{
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneId': instance.movieSceneId,
      'moviePropertyId': instance.moviePropertyId,
      'movieScenePropertyName': instance.movieScenePropertyName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'position': instance.position,
      'propertyId': instance.propertyId,
      'propertyTypeName': instance.propertyTypeName,
      'propertyTypeId': instance.propertyTypeId,
      'movieSceneName': instance.movieSceneName,
      'moviePropertyName': instance.moviePropertyName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'moviePropertyCode': instance.moviePropertyCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieScenePropertyModelReturnListModel
    _$MovieScenePropertyModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieScenePropertyModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieScenePropertyModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieScenePropertyModelReturnListModelToJson(
        MovieScenePropertyModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieScenePropertyModelReturnModel _$MovieScenePropertyModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieScenePropertyModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieScenePropertyModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieScenePropertyModelReturnModelToJson(
        MovieScenePropertyModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieScenePropertyUpdateModel _$MovieScenePropertyUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieScenePropertyUpdateModel(
      movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieScenePropertyName: json['movieScenePropertyName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMoviePropertyOnTheFly: json['createMoviePropertyOnTheFly'] as bool?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieScenePropertyUpdateModelToJson(
        MovieScenePropertyUpdateModel instance) =>
    <String, dynamic>{
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneId': instance.movieSceneId,
      'moviePropertyId': instance.moviePropertyId,
      'movieScenePropertyName': instance.movieScenePropertyName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMoviePropertyOnTheFly': instance.createMoviePropertyOnTheFly,
      'propertyId': instance.propertyId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieScenePropertyWithMovieAndCompanyPropertyCreateModel
    _$MovieScenePropertyWithMovieAndCompanyPropertyCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieScenePropertyWithMovieAndCompanyPropertyCreateModel(
          propertyCode: json['propertyCode'] as String?,
          propertyName: json['propertyName'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          specification: json['specification'] as String?,
          colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          isOwn: json['isOwn'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newPropertyRates: (json['newPropertyRates'] as List<dynamic>?)
                  ?.map((e) => PropertyRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          moviePropertyCode: json['moviePropertyCode'] as String?,
          propertyId: (json['propertyId'] as num?)?.toInt(),
          parentMoviePropertyId:
              (json['parentMoviePropertyId'] as num?)?.toInt(),
          moviePropertyName: json['moviePropertyName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieScenePropertyName: json['movieScenePropertyName'] as String?,
        );

Map<String,
    dynamic> _$MovieScenePropertyWithMovieAndCompanyPropertyCreateModelToJson(
        MovieScenePropertyWithMovieAndCompanyPropertyCreateModel instance) =>
    <String, dynamic>{
      'propertyCode': instance.propertyCode,
      'propertyName': instance.propertyName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'colorTypeId': instance.colorTypeId,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'propertyTypeId': instance.propertyTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newPropertyRates':
          instance.newPropertyRates?.map((e) => e.toJson()).toList(),
      'moviePropertyId': instance.moviePropertyId,
      'moviePropertyCode': instance.moviePropertyCode,
      'propertyId': instance.propertyId,
      'parentMoviePropertyId': instance.parentMoviePropertyId,
      'moviePropertyName': instance.moviePropertyName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'movieId': instance.movieId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneId': instance.movieSceneId,
      'movieScenePropertyName': instance.movieScenePropertyName,
    };

MovieSceneRequirementCreateModel _$MovieSceneRequirementCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneRequirementCreateModel(
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      predefinedRequirementTypeId:
          (json['predefinedRequirementTypeId'] as num?)?.toInt(),
      requirementText: json['requirementText'] as String?,
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSceneRequirementCreateModelToJson(
        MovieSceneRequirementCreateModel instance) =>
    <String, dynamic>{
      'movieSceneId': instance.movieSceneId,
      'predefinedRequirementTypeId': instance.predefinedRequirementTypeId,
      'requirementText': instance.requirementText,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'artistTypeId': instance.artistTypeId,
      'technicianTypeId': instance.technicianTypeId,
      'equipmentTypeId': instance.equipmentTypeId,
      'vendorTypeId': instance.vendorTypeId,
      'propertyTypeId': instance.propertyTypeId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieSceneRequirementModel _$MovieSceneRequirementModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneRequirementModel(
      movieSceneRequirementId:
          (json['movieSceneRequirementId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      predefinedRequirementTypeId:
          (json['predefinedRequirementTypeId'] as num?)?.toInt(),
      requirementText: json['requirementText'] as String?,
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRequirementTypeName:
          json['predefinedRequirementTypeName'] as String?,
      movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
      movieBudgetCategoryCode: json['movieBudgetCategoryCode'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      vendorTypeName: json['vendorTypeName'] as String?,
      equipmentTypeName: json['equipmentTypeName'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      equipmentName: json['equipmentName'] as String?,
      vendorName: json['vendorName'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      technicianTypeName: json['technicianTypeName'] as String?,
      technicianId: (json['technicianId'] as num?)?.toInt(),
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      movieSceneName: json['movieSceneName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieArtistCode: json['movieArtistCode'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      propertyTypeName: json['propertyTypeName'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyName: json['propertyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieSceneRequirementModelToJson(
        MovieSceneRequirementModel instance) =>
    <String, dynamic>{
      'movieSceneRequirementId': instance.movieSceneRequirementId,
      'movieSceneId': instance.movieSceneId,
      'predefinedRequirementTypeId': instance.predefinedRequirementTypeId,
      'requirementText': instance.requirementText,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'artistTypeId': instance.artistTypeId,
      'technicianTypeId': instance.technicianTypeId,
      'equipmentTypeId': instance.equipmentTypeId,
      'vendorTypeId': instance.vendorTypeId,
      'propertyTypeId': instance.propertyTypeId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRequirementTypeName': instance.predefinedRequirementTypeName,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'movieBudgetCategoryCode': instance.movieBudgetCategoryCode,
      'movieVendorName': instance.movieVendorName,
      'vendorTypeName': instance.vendorTypeName,
      'equipmentTypeName': instance.equipmentTypeName,
      'equipmentId': instance.equipmentId,
      'equipmentName': instance.equipmentName,
      'vendorName': instance.vendorName,
      'artistTypeName': instance.artistTypeName,
      'artistId': instance.artistId,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'technicianTypeName': instance.technicianTypeName,
      'technicianId': instance.technicianId,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'movieSceneName': instance.movieSceneName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieArtistCode': instance.movieArtistCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieVendorCode': instance.movieVendorCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'propertyTypeName': instance.propertyTypeName,
      'propertyId': instance.propertyId,
      'propertyName': instance.propertyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieSceneRequirementModelReturnListModel
    _$MovieSceneRequirementModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieSceneRequirementModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieSceneRequirementModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieSceneRequirementModelReturnListModelToJson(
        MovieSceneRequirementModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneRequirementModelReturnModel
    _$MovieSceneRequirementModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieSceneRequirementModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieSceneRequirementModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieSceneRequirementModelReturnModelToJson(
        MovieSceneRequirementModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneRequirementUpdateModel _$MovieSceneRequirementUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneRequirementUpdateModel(
      movieSceneRequirementId:
          (json['movieSceneRequirementId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      predefinedRequirementTypeId:
          (json['predefinedRequirementTypeId'] as num?)?.toInt(),
      requirementText: json['requirementText'] as String?,
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSceneRequirementUpdateModelToJson(
        MovieSceneRequirementUpdateModel instance) =>
    <String, dynamic>{
      'movieSceneRequirementId': instance.movieSceneRequirementId,
      'movieSceneId': instance.movieSceneId,
      'predefinedRequirementTypeId': instance.predefinedRequirementTypeId,
      'requirementText': instance.requirementText,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'artistTypeId': instance.artistTypeId,
      'technicianTypeId': instance.technicianTypeId,
      'equipmentTypeId': instance.equipmentTypeId,
      'vendorTypeId': instance.vendorTypeId,
      'propertyTypeId': instance.propertyTypeId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieSceneTechnicianCreateModel _$MovieSceneTechnicianCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneTechnicianCreateModel(
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieSceneTechnicianName: json['movieSceneTechnicianName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieTechnicianOnTheFly:
          json['createMovieTechnicianOnTheFly'] as bool?,
      technicianId: (json['technicianId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieSceneTechnicianCreateModelToJson(
        MovieSceneTechnicianCreateModel instance) =>
    <String, dynamic>{
      'movieSceneId': instance.movieSceneId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieSceneTechnicianName': instance.movieSceneTechnicianName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieTechnicianOnTheFly': instance.createMovieTechnicianOnTheFly,
      'technicianId': instance.technicianId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieSceneTechnicianModel _$MovieSceneTechnicianModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneTechnicianModel(
      movieSceneTechnicianId: (json['movieSceneTechnicianId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieSceneTechnicianName: json['movieSceneTechnicianName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      technicianTypeName: json['technicianTypeName'] as String?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      technicianWorkPhone: json['technicianWorkPhone'] as String?,
      technicianCellPhone: json['technicianCellPhone'] as String?,
      technicianEmail: json['technicianEmail'] as String?,
      technicianAssistantName: json['technicianAssistantName'] as String?,
      technicianAssistantPhone: json['technicianAssistantPhone'] as String?,
      technicianAssistantEmail: json['technicianAssistantEmail'] as String?,
      movieSceneName: json['movieSceneName'] as String?,
      movieTechnicianName: json['movieTechnicianName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieSceneTechnicianModelToJson(
        MovieSceneTechnicianModel instance) =>
    <String, dynamic>{
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieSceneId': instance.movieSceneId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieSceneTechnicianName': instance.movieSceneTechnicianName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'position': instance.position,
      'technicianId': instance.technicianId,
      'technicianTypeId': instance.technicianTypeId,
      'technicianTypeName': instance.technicianTypeName,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'technicianWorkPhone': instance.technicianWorkPhone,
      'technicianCellPhone': instance.technicianCellPhone,
      'technicianEmail': instance.technicianEmail,
      'technicianAssistantName': instance.technicianAssistantName,
      'technicianAssistantPhone': instance.technicianAssistantPhone,
      'technicianAssistantEmail': instance.technicianAssistantEmail,
      'movieSceneName': instance.movieSceneName,
      'movieTechnicianName': instance.movieTechnicianName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieSceneTechnicianModelReturnListModel
    _$MovieSceneTechnicianModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieSceneTechnicianModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieSceneTechnicianModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieSceneTechnicianModelReturnListModelToJson(
        MovieSceneTechnicianModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneTechnicianModelReturnModel
    _$MovieSceneTechnicianModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieSceneTechnicianModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieSceneTechnicianModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieSceneTechnicianModelReturnModelToJson(
        MovieSceneTechnicianModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneTechnicianUpdateModel _$MovieSceneTechnicianUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneTechnicianUpdateModel(
      movieSceneTechnicianId: (json['movieSceneTechnicianId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieSceneTechnicianName: json['movieSceneTechnicianName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieTechnicianOnTheFly:
          json['createMovieTechnicianOnTheFly'] as bool?,
      technicianId: (json['technicianId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieSceneTechnicianUpdateModelToJson(
        MovieSceneTechnicianUpdateModel instance) =>
    <String, dynamic>{
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieSceneId': instance.movieSceneId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieSceneTechnicianName': instance.movieSceneTechnicianName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieTechnicianOnTheFly': instance.createMovieTechnicianOnTheFly,
      'technicianId': instance.technicianId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieSceneTechnicianWithMovieAndCompanyTechnicianCreateModel
    _$MovieSceneTechnicianWithMovieAndCompanyTechnicianCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieSceneTechnicianWithMovieAndCompanyTechnicianCreateModel(
          technicianCode: json['technicianCode'] as String?,
          technicianFirstName: json['technicianFirstName'] as String?,
          technicianLastName: json['technicianLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newTechnicianRates: (json['newTechnicianRates'] as List<dynamic>?)
                  ?.map((e) => TechnicianRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieTechnicianCode: json['movieTechnicianCode'] as String?,
          technicianId: (json['technicianId'] as num?)?.toInt(),
          parentMovieTechnicianId:
              (json['parentMovieTechnicianId'] as num?)?.toInt(),
          movieTechnicianName: json['movieTechnicianName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieSceneTechnicianId:
              (json['movieSceneTechnicianId'] as num?)?.toInt(),
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieSceneTechnicianName: json['movieSceneTechnicianName'] as String?,
        );

Map<String, dynamic>
    _$MovieSceneTechnicianWithMovieAndCompanyTechnicianCreateModelToJson(
            MovieSceneTechnicianWithMovieAndCompanyTechnicianCreateModel
                instance) =>
        <String, dynamic>{
          'technicianCode': instance.technicianCode,
          'technicianFirstName': instance.technicianFirstName,
          'technicianLastName': instance.technicianLastName,
          'workPhone': instance.workPhone,
          'cellPhone': instance.cellPhone,
          'email': instance.email,
          'assistantName': instance.assistantName,
          'assistantPhone': instance.assistantPhone,
          'assistantEmail': instance.assistantEmail,
          'technicianTypeId': instance.technicianTypeId,
          'profileImageLocation': instance.profileImageLocation,
          'profileImageActualFileName': instance.profileImageActualFileName,
          'defaultPreProductionBudgetCategoryId':
              instance.defaultPreProductionBudgetCategoryId,
          'defaultProductionBudgetCategoryId':
              instance.defaultProductionBudgetCategoryId,
          'defaultPostProductionBudgetCategoryId':
              instance.defaultPostProductionBudgetCategoryId,
          'departmentId': instance.departmentId,
          'position': instance.position,
          'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
          'companyId': instance.companyId,
          'isDisabled': instance.isDisabled,
          'useDefaultRates': instance.useDefaultRates,
          'newTechnicianRates':
              instance.newTechnicianRates?.map((e) => e.toJson()).toList(),
          'movieTechnicianId': instance.movieTechnicianId,
          'movieTechnicianCode': instance.movieTechnicianCode,
          'technicianId': instance.technicianId,
          'parentMovieTechnicianId': instance.parentMovieTechnicianId,
          'movieTechnicianName': instance.movieTechnicianName,
          'predefinedContractAssignmentStatusTypeId':
              instance.predefinedContractAssignmentStatusTypeId,
          'contractId': instance.contractId,
          'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'isPartOfMajorCrew': instance.isPartOfMajorCrew,
          'defaultPreProductionMovieBudgetCategoryId':
              instance.defaultPreProductionMovieBudgetCategoryId,
          'defaultProductionMovieBudgetCategoryId':
              instance.defaultProductionMovieBudgetCategoryId,
          'defaultPostProductionMovieBudgetCategoryId':
              instance.defaultPostProductionMovieBudgetCategoryId,
          'movieId': instance.movieId,
          'movieSceneTechnicianId': instance.movieSceneTechnicianId,
          'movieSceneId': instance.movieSceneId,
          'movieSceneTechnicianName': instance.movieSceneTechnicianName,
        };

MovieSceneUpdateModel _$MovieSceneUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneUpdateModel(
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieSceneCode: json['movieSceneCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieSceneName: json['movieSceneName'] as String?,
      predefinedMovieSceneStatusTypeId:
          (json['predefinedMovieSceneStatusTypeId'] as num?)?.toInt(),
      setup: json['setup'] as String?,
      description: json['description'] as String?,
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      defaultMovieUnitId: (json['defaultMovieUnitId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSceneUpdateModelToJson(
        MovieSceneUpdateModel instance) =>
    <String, dynamic>{
      'movieSceneId': instance.movieSceneId,
      'movieSceneCode': instance.movieSceneCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieSceneName': instance.movieSceneName,
      'predefinedMovieSceneStatusTypeId':
          instance.predefinedMovieSceneStatusTypeId,
      'setup': instance.setup,
      'description': instance.description,
      'movieLocationId': instance.movieLocationId,
      'defaultMovieUnitId': instance.defaultMovieUnitId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieSceneVendorCreateModel _$MovieSceneVendorCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneVendorCreateModel(
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieSceneVendorName: json['movieSceneVendorName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieVendorOnTheFly: json['createMovieVendorOnTheFly'] as bool?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieSceneVendorCreateModelToJson(
        MovieSceneVendorCreateModel instance) =>
    <String, dynamic>{
      'movieSceneId': instance.movieSceneId,
      'movieVendorId': instance.movieVendorId,
      'movieSceneVendorName': instance.movieSceneVendorName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieVendorOnTheFly': instance.createMovieVendorOnTheFly,
      'vendorId': instance.vendorId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieSceneVendorModel _$MovieSceneVendorModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneVendorModel(
      movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieSceneVendorName: json['movieSceneVendorName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      vendorTypeName: json['vendorTypeName'] as String?,
      movieSceneName: json['movieSceneName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieSceneVendorModelToJson(
        MovieSceneVendorModel instance) =>
    <String, dynamic>{
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneId': instance.movieSceneId,
      'movieVendorId': instance.movieVendorId,
      'movieSceneVendorName': instance.movieSceneVendorName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'position': instance.position,
      'vendorId': instance.vendorId,
      'vendorTypeId': instance.vendorTypeId,
      'vendorTypeName': instance.vendorTypeName,
      'movieSceneName': instance.movieSceneName,
      'movieVendorName': instance.movieVendorName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieVendorCode': instance.movieVendorCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieSceneVendorModelReturnListModel
    _$MovieSceneVendorModelReturnListModelFromJson(Map<String, dynamic> json) =>
        MovieSceneVendorModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieSceneVendorModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieSceneVendorModelReturnListModelToJson(
        MovieSceneVendorModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneVendorModelReturnModel _$MovieSceneVendorModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneVendorModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieSceneVendorModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSceneVendorModelReturnModelToJson(
        MovieSceneVendorModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSceneVendorUpdateModel _$MovieSceneVendorUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSceneVendorUpdateModel(
      movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieSceneVendorName: json['movieSceneVendorName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieVendorOnTheFly: json['createMovieVendorOnTheFly'] as bool?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieSceneVendorUpdateModelToJson(
        MovieSceneVendorUpdateModel instance) =>
    <String, dynamic>{
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneId': instance.movieSceneId,
      'movieVendorId': instance.movieVendorId,
      'movieSceneVendorName': instance.movieSceneVendorName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieVendorOnTheFly': instance.createMovieVendorOnTheFly,
      'vendorId': instance.vendorId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieSceneVendorWithMovieAndCompanyVendorCreateModel
    _$MovieSceneVendorWithMovieAndCompanyVendorCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieSceneVendorWithMovieAndCompanyVendorCreateModel(
          vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
          vendorCode: json['vendorCode'] as String?,
          vendorName: json['vendorName'] as String?,
          contactFirstName: json['contactFirstName'] as String?,
          contactLastName: json['contactLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          address1: json['address1'] as String?,
          address2: json['address2'] as String?,
          city: json['city'] as String?,
          state: json['state'] as String?,
          country: json['country'] as String?,
          position: (json['position'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          isDisabled: json['isDisabled'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          useDefaultRates: json['useDefaultRates'] as bool?,
          newVendorRates: (json['newVendorRates'] as List<dynamic>?)
                  ?.map((e) =>
                      VendorRateCreateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          movieVendorCode: json['movieVendorCode'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          parentMovieVendorId: (json['parentMovieVendorId'] as num?)?.toInt(),
          movieVendorName: json['movieVendorName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieSceneVendorName: json['movieSceneVendorName'] as String?,
        );

Map<String, dynamic>
    _$MovieSceneVendorWithMovieAndCompanyVendorCreateModelToJson(
            MovieSceneVendorWithMovieAndCompanyVendorCreateModel instance) =>
        <String, dynamic>{
          'vendorTypeId': instance.vendorTypeId,
          'vendorCode': instance.vendorCode,
          'vendorName': instance.vendorName,
          'contactFirstName': instance.contactFirstName,
          'contactLastName': instance.contactLastName,
          'workPhone': instance.workPhone,
          'cellPhone': instance.cellPhone,
          'email': instance.email,
          'address1': instance.address1,
          'address2': instance.address2,
          'city': instance.city,
          'state': instance.state,
          'country': instance.country,
          'position': instance.position,
          'profileImageLocation': instance.profileImageLocation,
          'profileImageActualFileName': instance.profileImageActualFileName,
          'defaultPreProductionBudgetCategoryId':
              instance.defaultPreProductionBudgetCategoryId,
          'defaultProductionBudgetCategoryId':
              instance.defaultProductionBudgetCategoryId,
          'defaultPostProductionBudgetCategoryId':
              instance.defaultPostProductionBudgetCategoryId,
          'departmentId': instance.departmentId,
          'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
          'isDisabled': instance.isDisabled,
          'companyId': instance.companyId,
          'useDefaultRates': instance.useDefaultRates,
          'newVendorRates':
              instance.newVendorRates?.map((e) => e.toJson()).toList(),
          'movieVendorId': instance.movieVendorId,
          'movieVendorCode': instance.movieVendorCode,
          'vendorId': instance.vendorId,
          'parentMovieVendorId': instance.parentMovieVendorId,
          'movieVendorName': instance.movieVendorName,
          'predefinedContractAssignmentStatusTypeId':
              instance.predefinedContractAssignmentStatusTypeId,
          'contractId': instance.contractId,
          'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'isPartOfMajorCrew': instance.isPartOfMajorCrew,
          'defaultPreProductionMovieBudgetCategoryId':
              instance.defaultPreProductionMovieBudgetCategoryId,
          'defaultProductionMovieBudgetCategoryId':
              instance.defaultProductionMovieBudgetCategoryId,
          'defaultPostProductionMovieBudgetCategoryId':
              instance.defaultPostProductionMovieBudgetCategoryId,
          'movieId': instance.movieId,
          'movieSceneVendorId': instance.movieSceneVendorId,
          'movieSceneId': instance.movieSceneId,
          'movieSceneVendorName': instance.movieSceneVendorName,
        };

MovieScheduleReportModel _$MovieScheduleReportModelFromJson(
        Map<String, dynamic> json) =>
    MovieScheduleReportModel(
      completedMovieShootDayCount:
          (json['completedMovieShootDayCount'] as num?)?.toInt(),
      notCompletedMovieShootDayCount:
          (json['notCompletedMovieShootDayCount'] as num?)?.toInt(),
      completedMovieSceneCount:
          (json['completedMovieSceneCount'] as num?)?.toInt(),
      notCompletedMovieSceneCount:
          (json['notCompletedMovieSceneCount'] as num?)?.toInt(),
      totalPaidAmount: (json['totalPaidAmount'] as num?)?.toDouble(),
      totalBudgetAmount: (json['totalBudgetAmount'] as num?)?.toDouble(),
      totalExpenseAmount: (json['totalExpenseAmount'] as num?)?.toDouble(),
      outstandingMovieScenes: (json['outstandingMovieScenes'] as List<dynamic>?)
              ?.map((e) => MovieSceneModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      outstandingPreProductionMovieShootDays:
          (json['outstandingPreProductionMovieShootDays'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieShootDayModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
      outstandingProductionMovieShootDays:
          (json['outstandingProductionMovieShootDays'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieShootDayModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
      outstandingPostProductionMovieShootDays:
          (json['outstandingPostProductionMovieShootDays'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieShootDayModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
      outstandingOtherProductionMovieShootDays:
          (json['outstandingOtherProductionMovieShootDays'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieShootDayModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieScheduleReportModelToJson(
        MovieScheduleReportModel instance) =>
    <String, dynamic>{
      'completedMovieShootDayCount': instance.completedMovieShootDayCount,
      'notCompletedMovieShootDayCount': instance.notCompletedMovieShootDayCount,
      'completedMovieSceneCount': instance.completedMovieSceneCount,
      'notCompletedMovieSceneCount': instance.notCompletedMovieSceneCount,
      'totalPaidAmount': instance.totalPaidAmount,
      'totalBudgetAmount': instance.totalBudgetAmount,
      'totalExpenseAmount': instance.totalExpenseAmount,
      'outstandingMovieScenes':
          instance.outstandingMovieScenes?.map((e) => e.toJson()).toList(),
      'outstandingPreProductionMovieShootDays': instance
          .outstandingPreProductionMovieShootDays
          ?.map((e) => e.toJson())
          .toList(),
      'outstandingProductionMovieShootDays': instance
          .outstandingProductionMovieShootDays
          ?.map((e) => e.toJson())
          .toList(),
      'outstandingPostProductionMovieShootDays': instance
          .outstandingPostProductionMovieShootDays
          ?.map((e) => e.toJson())
          .toList(),
      'outstandingOtherProductionMovieShootDays': instance
          .outstandingOtherProductionMovieShootDays
          ?.map((e) => e.toJson())
          .toList(),
    };

MovieScheduleReportModelReturnModel
    _$MovieScheduleReportModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieScheduleReportModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieScheduleReportModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieScheduleReportModelReturnModelToJson(
        MovieScheduleReportModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieScriptFileModel _$MovieScriptFileModelFromJson(
        Map<String, dynamic> json) =>
    MovieScriptFileModel(
      movieScriptFileId: (json['movieScriptFileId'] as num?)?.toInt(),
      movieScriptFileCode: json['movieScriptFileCode'] as String?,
      predefinedMovieScriptFileTypeId:
          (json['predefinedMovieScriptFileTypeId'] as num?)?.toInt(),
      scriptFileLocation: json['scriptFileLocation'] as String?,
      scriptFileActualFileName: json['scriptFileActualFileName'] as String?,
      isScriptFilePreviewAvailable:
          json['isScriptFilePreviewAvailable'] as bool?,
      scriptFilePreviewLocation: json['scriptFilePreviewLocation'] as String?,
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedMovieScriptFileTypeName:
          json['predefinedMovieScriptFileTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieScriptFileModelToJson(
        MovieScriptFileModel instance) =>
    <String, dynamic>{
      'movieScriptFileId': instance.movieScriptFileId,
      'movieScriptFileCode': instance.movieScriptFileCode,
      'predefinedMovieScriptFileTypeId':
          instance.predefinedMovieScriptFileTypeId,
      'scriptFileLocation': instance.scriptFileLocation,
      'scriptFileActualFileName': instance.scriptFileActualFileName,
      'isScriptFilePreviewAvailable': instance.isScriptFilePreviewAvailable,
      'scriptFilePreviewLocation': instance.scriptFilePreviewLocation,
      'description': instance.description,
      'movieId': instance.movieId,
      'movieSceneId': instance.movieSceneId,
      'movieShootDayId': instance.movieShootDayId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedMovieScriptFileTypeName':
          instance.predefinedMovieScriptFileTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieScriptFileModelReturnListModel
    _$MovieScriptFileModelReturnListModelFromJson(Map<String, dynamic> json) =>
        MovieScriptFileModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieScriptFileModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieScriptFileModelReturnListModelToJson(
        MovieScriptFileModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieScriptFileModelReturnModel _$MovieScriptFileModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieScriptFileModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieScriptFileModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieScriptFileModelReturnModelToJson(
        MovieScriptFileModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSettingCreateModel _$MovieSettingCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieSettingCreateModel(
      defaultPreCallTimeForHmuw:
          (json['defaultPreCallTimeForHmuw'] as num?)?.toInt(),
      defaultCrewCallTime: (json['defaultCrewCallTime'] as num?)?.toInt(),
      defaultShootCallTime: (json['defaultShootCallTime'] as num?)?.toInt(),
      defaultShiftStart: (json['defaultShiftStart'] as num?)?.toInt(),
      defaultShiftEnd: (json['defaultShiftEnd'] as num?)?.toInt(),
      defaultTextInLeft: json['defaultTextInLeft'] as String?,
      defaultTextInRight: json['defaultTextInRight'] as String?,
      defaultHarassmentInfoText: json['defaultHarassmentInfoText'] as String?,
      defaultRadioChannelText: json['defaultRadioChannelText'] as String?,
      lockOnApproval: json['lockOnApproval'] as bool?,
      numberOfMinimumApproversForCallSheet:
          (json['numberOfMinimumApproversForCallSheet'] as num?)?.toInt(),
      numberOfMinimumApproversForBudget:
          (json['numberOfMinimumApproversForBudget'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSettingCreateModelToJson(
        MovieSettingCreateModel instance) =>
    <String, dynamic>{
      'defaultPreCallTimeForHmuw': instance.defaultPreCallTimeForHmuw,
      'defaultCrewCallTime': instance.defaultCrewCallTime,
      'defaultShootCallTime': instance.defaultShootCallTime,
      'defaultShiftStart': instance.defaultShiftStart,
      'defaultShiftEnd': instance.defaultShiftEnd,
      'defaultTextInLeft': instance.defaultTextInLeft,
      'defaultTextInRight': instance.defaultTextInRight,
      'defaultHarassmentInfoText': instance.defaultHarassmentInfoText,
      'defaultRadioChannelText': instance.defaultRadioChannelText,
      'lockOnApproval': instance.lockOnApproval,
      'numberOfMinimumApproversForCallSheet':
          instance.numberOfMinimumApproversForCallSheet,
      'numberOfMinimumApproversForBudget':
          instance.numberOfMinimumApproversForBudget,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieSettingModel _$MovieSettingModelFromJson(Map<String, dynamic> json) =>
    MovieSettingModel(
      movieSettingId: (json['movieSettingId'] as num?)?.toInt(),
      defaultPreCallTimeForHmuw:
          (json['defaultPreCallTimeForHmuw'] as num?)?.toInt(),
      defaultCrewCallTime: (json['defaultCrewCallTime'] as num?)?.toInt(),
      defaultShootCallTime: (json['defaultShootCallTime'] as num?)?.toInt(),
      defaultShiftStart: (json['defaultShiftStart'] as num?)?.toInt(),
      defaultShiftEnd: (json['defaultShiftEnd'] as num?)?.toInt(),
      defaultTextInLeft: json['defaultTextInLeft'] as String?,
      defaultTextInRight: json['defaultTextInRight'] as String?,
      defaultHarassmentInfoText: json['defaultHarassmentInfoText'] as String?,
      defaultRadioChannelText: json['defaultRadioChannelText'] as String?,
      lockOnApproval: json['lockOnApproval'] as bool?,
      numberOfMinimumApproversForCallSheet:
          (json['numberOfMinimumApproversForCallSheet'] as num?)?.toInt(),
      numberOfMinimumApproversForBudget:
          (json['numberOfMinimumApproversForBudget'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieSettingModelToJson(MovieSettingModel instance) =>
    <String, dynamic>{
      'movieSettingId': instance.movieSettingId,
      'defaultPreCallTimeForHmuw': instance.defaultPreCallTimeForHmuw,
      'defaultCrewCallTime': instance.defaultCrewCallTime,
      'defaultShootCallTime': instance.defaultShootCallTime,
      'defaultShiftStart': instance.defaultShiftStart,
      'defaultShiftEnd': instance.defaultShiftEnd,
      'defaultTextInLeft': instance.defaultTextInLeft,
      'defaultTextInRight': instance.defaultTextInRight,
      'defaultHarassmentInfoText': instance.defaultHarassmentInfoText,
      'defaultRadioChannelText': instance.defaultRadioChannelText,
      'lockOnApproval': instance.lockOnApproval,
      'numberOfMinimumApproversForCallSheet':
          instance.numberOfMinimumApproversForCallSheet,
      'numberOfMinimumApproversForBudget':
          instance.numberOfMinimumApproversForBudget,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieSettingModelReturnListModel _$MovieSettingModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieSettingModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => MovieSettingModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSettingModelReturnListModelToJson(
        MovieSettingModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieSettingModelReturnModel _$MovieSettingModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieSettingModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieSettingModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSettingModelReturnModelToJson(
        MovieSettingModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayApprovalCreateModel _$MovieShootDayApprovalCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayApprovalCreateModel(
      predefinedMovieShootDayApprovalTypeId:
          (json['predefinedMovieShootDayApprovalTypeId'] as num?)?.toInt(),
      predefinedMovieApprovalStatusTypeId:
          (json['predefinedMovieApprovalStatusTypeId'] as num?)?.toInt(),
      approvedByUserId: (json['approvedByUserId'] as num?)?.toInt(),
      approvedDateTime: json['approvedDateTime'] == null
          ? null
          : DateTime.parse(json['approvedDateTime'] as String),
      approvalNotes: json['approvalNotes'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayApprovalCreateModelToJson(
        MovieShootDayApprovalCreateModel instance) =>
    <String, dynamic>{
      'predefinedMovieShootDayApprovalTypeId':
          instance.predefinedMovieShootDayApprovalTypeId,
      'predefinedMovieApprovalStatusTypeId':
          instance.predefinedMovieApprovalStatusTypeId,
      'approvedByUserId': instance.approvedByUserId,
      'approvedDateTime': instance.approvedDateTime?.toIso8601String(),
      'approvalNotes': instance.approvalNotes,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieShootDayApprovalModel _$MovieShootDayApprovalModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayApprovalModel(
      movieShootDayApprovalId:
          (json['movieShootDayApprovalId'] as num?)?.toInt(),
      predefinedMovieShootDayApprovalTypeId:
          (json['predefinedMovieShootDayApprovalTypeId'] as num?)?.toInt(),
      predefinedMovieApprovalStatusTypeId:
          (json['predefinedMovieApprovalStatusTypeId'] as num?)?.toInt(),
      approvedByUserId: (json['approvedByUserId'] as num?)?.toInt(),
      approvedDateTime: json['approvedDateTime'] == null
          ? null
          : DateTime.parse(json['approvedDateTime'] as String),
      approvalNotes: json['approvalNotes'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedMovieShootDayApprovalTypeName:
          json['predefinedMovieShootDayApprovalTypeName'] as String?,
      predefinedMovieApprovalStatusTypeName:
          json['predefinedMovieApprovalStatusTypeName'] as String?,
      approvedByUserName: json['approvedByUserName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayApprovalModelToJson(
        MovieShootDayApprovalModel instance) =>
    <String, dynamic>{
      'movieShootDayApprovalId': instance.movieShootDayApprovalId,
      'predefinedMovieShootDayApprovalTypeId':
          instance.predefinedMovieShootDayApprovalTypeId,
      'predefinedMovieApprovalStatusTypeId':
          instance.predefinedMovieApprovalStatusTypeId,
      'approvedByUserId': instance.approvedByUserId,
      'approvedDateTime': instance.approvedDateTime?.toIso8601String(),
      'approvalNotes': instance.approvalNotes,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedMovieShootDayApprovalTypeName':
          instance.predefinedMovieShootDayApprovalTypeName,
      'predefinedMovieApprovalStatusTypeName':
          instance.predefinedMovieApprovalStatusTypeName,
      'approvedByUserName': instance.approvedByUserName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayApprovalModelReturnListModel
    _$MovieShootDayApprovalModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayApprovalModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayApprovalModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayApprovalModelReturnListModelToJson(
        MovieShootDayApprovalModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayApprovalModelReturnModel
    _$MovieShootDayApprovalModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayApprovalModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayApprovalModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayApprovalModelReturnModelToJson(
        MovieShootDayApprovalModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayApprovalUpdateModel _$MovieShootDayApprovalUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayApprovalUpdateModel(
      movieShootDayApprovalId:
          (json['movieShootDayApprovalId'] as num?)?.toInt(),
      predefinedMovieShootDayApprovalTypeId:
          (json['predefinedMovieShootDayApprovalTypeId'] as num?)?.toInt(),
      predefinedMovieApprovalStatusTypeId:
          (json['predefinedMovieApprovalStatusTypeId'] as num?)?.toInt(),
      approvedByUserId: (json['approvedByUserId'] as num?)?.toInt(),
      approvedDateTime: json['approvedDateTime'] == null
          ? null
          : DateTime.parse(json['approvedDateTime'] as String),
      approvalNotes: json['approvalNotes'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayApprovalUpdateModelToJson(
        MovieShootDayApprovalUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayApprovalId': instance.movieShootDayApprovalId,
      'predefinedMovieShootDayApprovalTypeId':
          instance.predefinedMovieShootDayApprovalTypeId,
      'predefinedMovieApprovalStatusTypeId':
          instance.predefinedMovieApprovalStatusTypeId,
      'approvedByUserId': instance.approvedByUserId,
      'approvedDateTime': instance.approvedDateTime?.toIso8601String(),
      'approvalNotes': instance.approvalNotes,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieShootDayArtistCreateModel _$MovieShootDayArtistCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayArtistCreateModel(
      movieShootDayArtistCode: json['movieShootDayArtistCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieShootDayArtistName: json['movieShootDayArtistName'] as String?,
      productionUnitTime: (json['productionUnitTime'] as num?)?.toInt(),
      hairAndMakeupUnitTime: (json['hairAndMakeupUnitTime'] as num?)?.toInt(),
      wardrobeUnitTime: (json['wardrobeUnitTime'] as num?)?.toInt(),
      onSetTime: (json['onSetTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      characterName: json['characterName'] as String?,
      createMovieArtistOnTheFly: json['createMovieArtistOnTheFly'] as bool?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayArtistCreateModelToJson(
        MovieShootDayArtistCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayArtistCode': instance.movieShootDayArtistCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieArtistId': instance.movieArtistId,
      'movieShootDayArtistName': instance.movieShootDayArtistName,
      'productionUnitTime': instance.productionUnitTime,
      'hairAndMakeupUnitTime': instance.hairAndMakeupUnitTime,
      'wardrobeUnitTime': instance.wardrobeUnitTime,
      'onSetTime': instance.onSetTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'notes': instance.notes,
      'artistId': instance.artistId,
      'characterName': instance.characterName,
      'createMovieArtistOnTheFly': instance.createMovieArtistOnTheFly,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayArtistModel _$MovieShootDayArtistModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayArtistModel(
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayArtistCode: json['movieShootDayArtistCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieShootDayArtistName: json['movieShootDayArtistName'] as String?,
      productionUnitTime: (json['productionUnitTime'] as num?)?.toInt(),
      hairAndMakeupUnitTime: (json['hairAndMakeupUnitTime'] as num?)?.toInt(),
      wardrobeUnitTime: (json['wardrobeUnitTime'] as num?)?.toInt(),
      onSetTime: (json['onSetTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeName:
          json['predefinedPhoneCallNotificationStatusTypeName'] as String?,
      predefinedEmailNotificationStatusTypeName:
          json['predefinedEmailNotificationStatusTypeName'] as String?,
      predefinedPushNotificationStatusTypeName:
          json['predefinedPushNotificationStatusTypeName'] as String?,
      predefinedSmsNotificationStatusTypeName:
          json['predefinedSmsNotificationStatusTypeName'] as String?,
      predefinedWhatsAppNotificationStatusTypeName:
          json['predefinedWhatsAppNotificationStatusTypeName'] as String?,
      predefinedPaymentStatusTypeName:
          json['predefinedPaymentStatusTypeName'] as String?,
      notes: json['notes'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      predefinedArtistTypeName: json['predefinedArtistTypeName'] as String?,
      predefinedArtistTypeId: (json['predefinedArtistTypeId'] as num?)?.toInt(),
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      artistGroupTypeId: (json['artistGroupTypeId'] as num?)?.toInt(),
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      artistGroupTypeName: json['artistGroupTypeName'] as String?,
      artistGroupTypePosition:
          (json['artistGroupTypePosition'] as num?)?.toInt(),
      predefinedArtistGroupTypeId:
          (json['predefinedArtistGroupTypeId'] as num?)?.toInt(),
      predefinedArtistGroupTypeName:
          json['predefinedArtistGroupTypeName'] as String?,
      artistCharacterName: json['artistCharacterName'] as String?,
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      artistWorkPhone: json['artistWorkPhone'] as String?,
      artistCellPhone: json['artistCellPhone'] as String?,
      artistEmail: json['artistEmail'] as String?,
      artistAssistantName: json['artistAssistantName'] as String?,
      artistAssistantPhone: json['artistAssistantPhone'] as String?,
      artistAssistantEmail: json['artistAssistantEmail'] as String?,
      movieArtistName: json['movieArtistName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieArtistCode: json['movieArtistCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayArtistModelToJson(
        MovieShootDayArtistModel instance) =>
    <String, dynamic>{
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayArtistCode': instance.movieShootDayArtistCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieArtistId': instance.movieArtistId,
      'movieShootDayArtistName': instance.movieShootDayArtistName,
      'productionUnitTime': instance.productionUnitTime,
      'hairAndMakeupUnitTime': instance.hairAndMakeupUnitTime,
      'wardrobeUnitTime': instance.wardrobeUnitTime,
      'onSetTime': instance.onSetTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedPhoneCallNotificationStatusTypeName':
          instance.predefinedPhoneCallNotificationStatusTypeName,
      'predefinedEmailNotificationStatusTypeName':
          instance.predefinedEmailNotificationStatusTypeName,
      'predefinedPushNotificationStatusTypeName':
          instance.predefinedPushNotificationStatusTypeName,
      'predefinedSmsNotificationStatusTypeName':
          instance.predefinedSmsNotificationStatusTypeName,
      'predefinedWhatsAppNotificationStatusTypeName':
          instance.predefinedWhatsAppNotificationStatusTypeName,
      'predefinedPaymentStatusTypeName':
          instance.predefinedPaymentStatusTypeName,
      'notes': instance.notes,
      'artistTypeName': instance.artistTypeName,
      'artistTypeId': instance.artistTypeId,
      'artistId': instance.artistId,
      'predefinedArtistTypeName': instance.predefinedArtistTypeName,
      'predefinedArtistTypeId': instance.predefinedArtistTypeId,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'artistGroupTypeId': instance.artistGroupTypeId,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'artistGroupTypeName': instance.artistGroupTypeName,
      'artistGroupTypePosition': instance.artistGroupTypePosition,
      'predefinedArtistGroupTypeId': instance.predefinedArtistGroupTypeId,
      'predefinedArtistGroupTypeName': instance.predefinedArtistGroupTypeName,
      'artistCharacterName': instance.artistCharacterName,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'artistWorkPhone': instance.artistWorkPhone,
      'artistCellPhone': instance.artistCellPhone,
      'artistEmail': instance.artistEmail,
      'artistAssistantName': instance.artistAssistantName,
      'artistAssistantPhone': instance.artistAssistantPhone,
      'artistAssistantEmail': instance.artistAssistantEmail,
      'movieArtistName': instance.movieArtistName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieArtistCode': instance.movieArtistCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayArtistModelReturnListModel
    _$MovieShootDayArtistModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayArtistModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayArtistModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayArtistModelReturnListModelToJson(
        MovieShootDayArtistModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayArtistModelReturnModel
    _$MovieShootDayArtistModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieShootDayArtistModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayArtistModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayArtistModelReturnModelToJson(
        MovieShootDayArtistModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayArtistUpdateModel _$MovieShootDayArtistUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayArtistUpdateModel(
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayArtistCode: json['movieShootDayArtistCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieShootDayArtistName: json['movieShootDayArtistName'] as String?,
      productionUnitTime: (json['productionUnitTime'] as num?)?.toInt(),
      hairAndMakeupUnitTime: (json['hairAndMakeupUnitTime'] as num?)?.toInt(),
      wardrobeUnitTime: (json['wardrobeUnitTime'] as num?)?.toInt(),
      onSetTime: (json['onSetTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      characterName: json['characterName'] as String?,
      createMovieArtistOnTheFly: json['createMovieArtistOnTheFly'] as bool?,
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayArtistUpdateModelToJson(
        MovieShootDayArtistUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayArtistCode': instance.movieShootDayArtistCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieArtistId': instance.movieArtistId,
      'movieShootDayArtistName': instance.movieShootDayArtistName,
      'productionUnitTime': instance.productionUnitTime,
      'hairAndMakeupUnitTime': instance.hairAndMakeupUnitTime,
      'wardrobeUnitTime': instance.wardrobeUnitTime,
      'onSetTime': instance.onSetTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'notes': instance.notes,
      'artistId': instance.artistId,
      'characterName': instance.characterName,
      'createMovieArtistOnTheFly': instance.createMovieArtistOnTheFly,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayArtistWithCompanyOrMovieArtistCreateModel
    _$MovieShootDayArtistWithCompanyOrMovieArtistCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayArtistWithCompanyOrMovieArtistCreateModel(
          artistCode: json['artistCode'] as String?,
          artistFirstName: json['artistFirstName'] as String?,
          artistLastName: json['artistLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isPrimaryCast: json['isPrimaryCast'] as bool?,
          isDisabled: json['isDisabled'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newArtistRates: (json['newArtistRates'] as List<dynamic>?)
                  ?.map((e) =>
                      ArtistRateCreateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieArtistCode: json['movieArtistCode'] as String?,
          artistId: (json['artistId'] as num?)?.toInt(),
          artistCharacterName: json['artistCharacterName'] as String?,
          parentMovieArtistId: (json['parentMovieArtistId'] as num?)?.toInt(),
          movieArtistName: json['movieArtistName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieShootDayArtistCode: json['movieShootDayArtistCode'] as String?,
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieShootDayArtistName: json['movieShootDayArtistName'] as String?,
          productionUnitTime: (json['productionUnitTime'] as num?)?.toInt(),
          hairAndMakeupUnitTime:
              (json['hairAndMakeupUnitTime'] as num?)?.toInt(),
          wardrobeUnitTime: (json['wardrobeUnitTime'] as num?)?.toInt(),
          onSetTime: (json['onSetTime'] as num?)?.toInt(),
          additionalCount: (json['additionalCount'] as num?)?.toInt(),
          predefinedPhoneCallNotificationStatusTypeId:
              (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          phoneCallNotificationStartedDateTime:
              json['phoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationStartedDateTime'] as String),
          phoneCallNotificationCompletedDateTime:
              json['phoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationCompletedDateTime'] as String),
          predefinedEmailNotificationStatusTypeId:
              (json['predefinedEmailNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          emailNotificationStartedDateTime:
              json['emailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationStartedDateTime'] as String),
          emailNotificationCompletedDateTime:
              json['emailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationCompletedDateTime'] as String),
          predefinedSmsNotificationStatusTypeId:
              (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
          smsNotificationStartedDateTime:
              json['smsNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationStartedDateTime'] as String),
          smsNotificationCompletedDateTime:
              json['smsNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationCompletedDateTime'] as String),
          predefinedPushNotificationStatusTypeId:
              (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
          pushNotificationStartedDateTime:
              json['pushNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationStartedDateTime'] as String),
          pushNotificationCompletedDateTime:
              json['pushNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationCompletedDateTime'] as String),
          predefinedWhatsAppNotificationStatusTypeId:
              (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          whatsAppNotificationStartedDateTime:
              json['whatsAppNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationStartedDateTime'] as String),
          whatsAppNotificationCompletedDateTime:
              json['whatsAppNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationCompletedDateTime'] as String),
          inTime: (json['inTime'] as num?)?.toInt(),
          outTime: (json['outTime'] as num?)?.toInt(),
          notes: json['notes'] as String?,
          isAbsent: json['isAbsent'] as bool?,
          estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['preProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['productionStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieShootDayArtistWithCompanyOrMovieArtistCreateModelToJson(
            MovieShootDayArtistWithCompanyOrMovieArtistCreateModel instance) =>
        <String, dynamic>{
          'artistCode': instance.artistCode,
          'artistFirstName': instance.artistFirstName,
          'artistLastName': instance.artistLastName,
          'workPhone': instance.workPhone,
          'cellPhone': instance.cellPhone,
          'email': instance.email,
          'assistantName': instance.assistantName,
          'assistantPhone': instance.assistantPhone,
          'assistantEmail': instance.assistantEmail,
          'artistTypeId': instance.artistTypeId,
          'position': instance.position,
          'profileImageLocation': instance.profileImageLocation,
          'profileImageActualFileName': instance.profileImageActualFileName,
          'defaultPreProductionBudgetCategoryId':
              instance.defaultPreProductionBudgetCategoryId,
          'defaultProductionBudgetCategoryId':
              instance.defaultProductionBudgetCategoryId,
          'defaultPostProductionBudgetCategoryId':
              instance.defaultPostProductionBudgetCategoryId,
          'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
          'companyId': instance.companyId,
          'isPrimaryCast': instance.isPrimaryCast,
          'isDisabled': instance.isDisabled,
          'useDefaultRates': instance.useDefaultRates,
          'newArtistRates':
              instance.newArtistRates?.map((e) => e.toJson()).toList(),
          'movieArtistId': instance.movieArtistId,
          'movieArtistCode': instance.movieArtistCode,
          'artistId': instance.artistId,
          'artistCharacterName': instance.artistCharacterName,
          'parentMovieArtistId': instance.parentMovieArtistId,
          'movieArtistName': instance.movieArtistName,
          'predefinedContractAssignmentStatusTypeId':
              instance.predefinedContractAssignmentStatusTypeId,
          'contractId': instance.contractId,
          'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'isPartOfMajorCrew': instance.isPartOfMajorCrew,
          'defaultPreProductionMovieBudgetCategoryId':
              instance.defaultPreProductionMovieBudgetCategoryId,
          'defaultProductionMovieBudgetCategoryId':
              instance.defaultProductionMovieBudgetCategoryId,
          'defaultPostProductionMovieBudgetCategoryId':
              instance.defaultPostProductionMovieBudgetCategoryId,
          'movieId': instance.movieId,
          'movieShootDayArtistCode': instance.movieShootDayArtistCode,
          'movieShootDayId': instance.movieShootDayId,
          'movieShootDayArtistName': instance.movieShootDayArtistName,
          'productionUnitTime': instance.productionUnitTime,
          'hairAndMakeupUnitTime': instance.hairAndMakeupUnitTime,
          'wardrobeUnitTime': instance.wardrobeUnitTime,
          'onSetTime': instance.onSetTime,
          'additionalCount': instance.additionalCount,
          'predefinedPhoneCallNotificationStatusTypeId':
              instance.predefinedPhoneCallNotificationStatusTypeId,
          'phoneCallNotificationStartedDateTime':
              instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
          'phoneCallNotificationCompletedDateTime': instance
              .phoneCallNotificationCompletedDateTime
              ?.toIso8601String(),
          'predefinedEmailNotificationStatusTypeId':
              instance.predefinedEmailNotificationStatusTypeId,
          'emailNotificationStartedDateTime':
              instance.emailNotificationStartedDateTime?.toIso8601String(),
          'emailNotificationCompletedDateTime':
              instance.emailNotificationCompletedDateTime?.toIso8601String(),
          'predefinedSmsNotificationStatusTypeId':
              instance.predefinedSmsNotificationStatusTypeId,
          'smsNotificationStartedDateTime':
              instance.smsNotificationStartedDateTime?.toIso8601String(),
          'smsNotificationCompletedDateTime':
              instance.smsNotificationCompletedDateTime?.toIso8601String(),
          'predefinedPushNotificationStatusTypeId':
              instance.predefinedPushNotificationStatusTypeId,
          'pushNotificationStartedDateTime':
              instance.pushNotificationStartedDateTime?.toIso8601String(),
          'pushNotificationCompletedDateTime':
              instance.pushNotificationCompletedDateTime?.toIso8601String(),
          'predefinedWhatsAppNotificationStatusTypeId':
              instance.predefinedWhatsAppNotificationStatusTypeId,
          'whatsAppNotificationStartedDateTime':
              instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
          'whatsAppNotificationCompletedDateTime':
              instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
          'inTime': instance.inTime,
          'outTime': instance.outTime,
          'notes': instance.notes,
          'isAbsent': instance.isAbsent,
          'estimatedRate': instance.estimatedRate,
          'departmentId': instance.departmentId,
          'postProductionStatusTypeId': instance.postProductionStatusTypeId,
          'preProductionStatusTypeId': instance.preProductionStatusTypeId,
          'productionStatusTypeId': instance.productionStatusTypeId,
        };

MovieShootDayAttendanceStatusModel _$MovieShootDayAttendanceStatusModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayAttendanceStatusModel(
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      predefinedContractForTypeId:
          (json['predefinedContractForTypeId'] as num?)?.toInt(),
      predefinedContractForTypeName:
          json['predefinedContractForTypeName'] as String?,
      movieArtistFirstName: json['movieArtistFirstName'] as String?,
      movieArtistLastName: json['movieArtistLastName'] as String?,
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayArtistName: json['movieShootDayArtistName'] as String?,
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieArtistAdditionalCount:
          (json['movieArtistAdditionalCount'] as num?)?.toInt(),
      movieTechnicianFirstName: json['movieTechnicianFirstName'] as String?,
      movieTechnicianLastName: json['movieTechnicianLastName'] as String?,
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieShootDayTechnicianName:
          json['movieShootDayTechnicianName'] as String?,
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieTechnicianAdditionalCount:
          (json['movieTechnicianAdditionalCount'] as num?)?.toInt(),
      movieEquipmentName: json['movieEquipmentName'] as String?,
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayEquipmentName: json['movieShootDayEquipmentName'] as String?,
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieEquipmentAdditionalCount:
          (json['movieEquipmentAdditionalCount'] as num?)?.toInt(),
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDayVendorName: json['movieShootDayVendorName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieVendorAdditionalCount:
          (json['movieVendorAdditionalCount'] as num?)?.toInt(),
      moviePropertyName: json['moviePropertyName'] as String?,
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayPropertyName: json['movieShootDayPropertyName'] as String?,
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      moviePropertyAdditionalCount:
          (json['moviePropertyAdditionalCount'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      notes: json['notes'] as String?,
    );

Map<String, dynamic> _$MovieShootDayAttendanceStatusModelToJson(
        MovieShootDayAttendanceStatusModel instance) =>
    <String, dynamic>{
      'createdDate': instance.createdDate?.toIso8601String(),
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'movieShootDayId': instance.movieShootDayId,
      'movieId': instance.movieId,
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'equipmentId': instance.equipmentId,
      'vendorId': instance.vendorId,
      'propertyId': instance.propertyId,
      'predefinedContractForTypeId': instance.predefinedContractForTypeId,
      'predefinedContractForTypeName': instance.predefinedContractForTypeName,
      'movieArtistFirstName': instance.movieArtistFirstName,
      'movieArtistLastName': instance.movieArtistLastName,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayArtistName': instance.movieShootDayArtistName,
      'movieArtistId': instance.movieArtistId,
      'movieArtistAdditionalCount': instance.movieArtistAdditionalCount,
      'movieTechnicianFirstName': instance.movieTechnicianFirstName,
      'movieTechnicianLastName': instance.movieTechnicianLastName,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieShootDayTechnicianName': instance.movieShootDayTechnicianName,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieTechnicianAdditionalCount': instance.movieTechnicianAdditionalCount,
      'movieEquipmentName': instance.movieEquipmentName,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayEquipmentName': instance.movieShootDayEquipmentName,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieEquipmentAdditionalCount': instance.movieEquipmentAdditionalCount,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDayVendorName': instance.movieShootDayVendorName,
      'movieVendorName': instance.movieVendorName,
      'movieVendorId': instance.movieVendorId,
      'movieVendorAdditionalCount': instance.movieVendorAdditionalCount,
      'moviePropertyName': instance.moviePropertyName,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayPropertyName': instance.movieShootDayPropertyName,
      'moviePropertyId': instance.moviePropertyId,
      'moviePropertyAdditionalCount': instance.moviePropertyAdditionalCount,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'notes': instance.notes,
    };

MovieShootDayAttendanceStatusModelReturnListModel
    _$MovieShootDayAttendanceStatusModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayAttendanceStatusModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayAttendanceStatusModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayAttendanceStatusModelReturnListModelToJson(
        MovieShootDayAttendanceStatusModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayBudgetCreateModel _$MovieShootDayBudgetCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayBudgetCreateModel(
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetOrExpenseTypeId:
          (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      budgetEntryName: json['budgetEntryName'] as String?,
      description: json['description'] as String?,
      quantity: (json['quantity'] as num?)?.toDouble(),
      amount: (json['amount'] as num?)?.toDouble(),
      totalAmount: (json['totalAmount'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieShootDayOnTheFly: json['createMovieShootDayOnTheFly'] as bool?,
      movieShootDayNumber: (json['movieShootDayNumber'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      movieShootDaySummary: json['movieShootDaySummary'] as String?,
      createMovieResourceOnTheFly: json['createMovieResourceOnTheFly'] as bool?,
      characterName: json['characterName'] as String?,
      resourceId: (json['resourceId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayBudgetCreateModelToJson(
        MovieShootDayBudgetCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieVendorId': instance.movieVendorId,
      'movieLocationId': instance.movieLocationId,
      'budgetEntryName': instance.budgetEntryName,
      'description': instance.description,
      'quantity': instance.quantity,
      'amount': instance.amount,
      'totalAmount': instance.totalAmount,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieShootDayOnTheFly': instance.createMovieShootDayOnTheFly,
      'movieShootDayNumber': instance.movieShootDayNumber,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'movieShootDaySummary': instance.movieShootDaySummary,
      'createMovieResourceOnTheFly': instance.createMovieResourceOnTheFly,
      'characterName': instance.characterName,
      'resourceId': instance.resourceId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModel
    _$MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModel(
          postProductionTotalBudgetAmount:
              (json['postProductionTotalBudgetAmount'] as num?)?.toDouble(),
          postProductionTotalExpenseAmount:
              (json['postProductionTotalExpenseAmount'] as num?)?.toDouble(),
          postProductionTotalPaidAmount:
              (json['postProductionTotalPaidAmount'] as num?)?.toDouble(),
          productionTotalBudgetAmount:
              (json['productionTotalBudgetAmount'] as num?)?.toDouble(),
          productionTotalExpenseAmount:
              (json['productionTotalExpenseAmount'] as num?)?.toDouble(),
          productionTotalPaidAmount:
              (json['productionTotalPaidAmount'] as num?)?.toDouble(),
          preProductionTotalBudgetAmount:
              (json['preProductionTotalBudgetAmount'] as num?)?.toDouble(),
          preProductionTotalExpenseAmount:
              (json['preProductionTotalExpenseAmount'] as num?)?.toDouble(),
          preProductionTotalPaidAmount:
              (json['preProductionTotalPaidAmount'] as num?)?.toDouble(),
          otherTotalBudgetAmount:
              (json['otherTotalBudgetAmount'] as num?)?.toDouble(),
          otherTotalExpenseAmount:
              (json['otherTotalExpenseAmount'] as num?)?.toDouble(),
          otherTotalPaidAmount:
              (json['otherTotalPaidAmount'] as num?)?.toDouble(),
        );

Map<String, dynamic>
    _$MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModelToJson(
            MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModel
                instance) =>
        <String, dynamic>{
          'postProductionTotalBudgetAmount':
              instance.postProductionTotalBudgetAmount,
          'postProductionTotalExpenseAmount':
              instance.postProductionTotalExpenseAmount,
          'postProductionTotalPaidAmount':
              instance.postProductionTotalPaidAmount,
          'productionTotalBudgetAmount': instance.productionTotalBudgetAmount,
          'productionTotalExpenseAmount': instance.productionTotalExpenseAmount,
          'productionTotalPaidAmount': instance.productionTotalPaidAmount,
          'preProductionTotalBudgetAmount':
              instance.preProductionTotalBudgetAmount,
          'preProductionTotalExpenseAmount':
              instance.preProductionTotalExpenseAmount,
          'preProductionTotalPaidAmount': instance.preProductionTotalPaidAmount,
          'otherTotalBudgetAmount': instance.otherTotalBudgetAmount,
          'otherTotalExpenseAmount': instance.otherTotalExpenseAmount,
          'otherTotalPaidAmount': instance.otherTotalPaidAmount,
        };

MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModelReturnModel
    _$MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModel
                  .fromJson(json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModelReturnModelToJson(
            MovieShootDayBudgetExpenseSummaryForAllBudgetDivisionTypeModelReturnModel
                instance) =>
        <String, dynamic>{
          'model': instance.model?.toJson(),
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieShootDayBudgetModel _$MovieShootDayBudgetModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayBudgetModel(
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetOrExpenseTypeId:
          (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      budgetEntryName: json['budgetEntryName'] as String?,
      description: json['description'] as String?,
      quantity: (json['quantity'] as num?)?.toDouble(),
      amount: (json['amount'] as num?)?.toDouble(),
      totalAmount: (json['totalAmount'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      shootDayNumber: (json['shootDayNumber'] as num?)?.toInt(),
      shootDayDateOfShoot: json['shootDayDateOfShoot'] == null
          ? null
          : DateTime.parse(json['shootDayDateOfShoot'] as String),
      predefinedBudgetOrExpenseTypeName:
          json['predefinedBudgetOrExpenseTypeName'] as String?,
      accountNumber: json['accountNumber'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      parentAccountNumber: json['parentAccountNumber'] as String?,
      parentMovieBudgetCategoryId:
          (json['parentMovieBudgetCategoryId'] as num?)?.toInt(),
      parentMovieBudgetCategoryName:
          json['parentMovieBudgetCategoryName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
      movieArtistName: json['movieArtistName'] as String?,
      movieTechnicianName: json['movieTechnicianName'] as String?,
      movieEquipmentName: json['movieEquipmentName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      movieCode: json['movieCode'] as String?,
      movieArtistCode: json['movieArtistCode'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieBudgetCategoryCode: json['movieBudgetCategoryCode'] as String?,
      companyName: json['companyName'] as String?,
      moviePropertyName: json['moviePropertyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      fileAttachments: (json['fileAttachments'] as List<dynamic>?)
              ?.map((e) =>
                  FileAttachmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieShootDayBudgetModelToJson(
        MovieShootDayBudgetModel instance) =>
    <String, dynamic>{
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieVendorId': instance.movieVendorId,
      'movieLocationId': instance.movieLocationId,
      'budgetEntryName': instance.budgetEntryName,
      'description': instance.description,
      'quantity': instance.quantity,
      'amount': instance.amount,
      'totalAmount': instance.totalAmount,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieLocationName': instance.movieLocationName,
      'shootDayNumber': instance.shootDayNumber,
      'shootDayDateOfShoot': instance.shootDayDateOfShoot?.toIso8601String(),
      'predefinedBudgetOrExpenseTypeName':
          instance.predefinedBudgetOrExpenseTypeName,
      'accountNumber': instance.accountNumber,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'parentAccountNumber': instance.parentAccountNumber,
      'parentMovieBudgetCategoryId': instance.parentMovieBudgetCategoryId,
      'parentMovieBudgetCategoryName': instance.parentMovieBudgetCategoryName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'movieArtistName': instance.movieArtistName,
      'movieTechnicianName': instance.movieTechnicianName,
      'movieEquipmentName': instance.movieEquipmentName,
      'movieVendorName': instance.movieVendorName,
      'movieCode': instance.movieCode,
      'movieArtistCode': instance.movieArtistCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieVendorCode': instance.movieVendorCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieBudgetCategoryCode': instance.movieBudgetCategoryCode,
      'companyName': instance.companyName,
      'moviePropertyName': instance.moviePropertyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'fileAttachments':
          instance.fileAttachments?.map((e) => e.toJson()).toList(),
    };

MovieShootDayBudgetModelReturnListModel
    _$MovieShootDayBudgetModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayBudgetModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayBudgetModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayBudgetModelReturnListModelToJson(
        MovieShootDayBudgetModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayBudgetModelReturnModel
    _$MovieShootDayBudgetModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieShootDayBudgetModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayBudgetModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayBudgetModelReturnModelToJson(
        MovieShootDayBudgetModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayBudgetUpdateModel _$MovieShootDayBudgetUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayBudgetUpdateModel(
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetOrExpenseTypeId:
          (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      budgetEntryName: json['budgetEntryName'] as String?,
      description: json['description'] as String?,
      quantity: (json['quantity'] as num?)?.toDouble(),
      amount: (json['amount'] as num?)?.toDouble(),
      totalAmount: (json['totalAmount'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieShootDayOnTheFly: json['createMovieShootDayOnTheFly'] as bool?,
      movieShootDayNumber: (json['movieShootDayNumber'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      movieShootDaySummary: json['movieShootDaySummary'] as String?,
      createMovieResourceOnTheFly: json['createMovieResourceOnTheFly'] as bool?,
      characterName: json['characterName'] as String?,
      resourceId: (json['resourceId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayBudgetUpdateModelToJson(
        MovieShootDayBudgetUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieVendorId': instance.movieVendorId,
      'movieLocationId': instance.movieLocationId,
      'budgetEntryName': instance.budgetEntryName,
      'description': instance.description,
      'quantity': instance.quantity,
      'amount': instance.amount,
      'totalAmount': instance.totalAmount,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieShootDayOnTheFly': instance.createMovieShootDayOnTheFly,
      'movieShootDayNumber': instance.movieShootDayNumber,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'movieShootDaySummary': instance.movieShootDaySummary,
      'createMovieResourceOnTheFly': instance.createMovieResourceOnTheFly,
      'characterName': instance.characterName,
      'resourceId': instance.resourceId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayCallNotificationStatusModel
    _$MovieShootDayCallNotificationStatusModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayCallNotificationStatusModel(
          predefinedContractForTypeId:
              (json['predefinedContractForTypeId'] as num?)?.toInt(),
          predefinedContractForTypeName:
              json['predefinedContractForTypeName'] as String?,
          movieArtistFirstName: json['movieArtistFirstName'] as String?,
          movieArtistLastName: json['movieArtistLastName'] as String?,
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieArtistProductionUnitTime:
              (json['movieArtistProductionUnitTime'] as num?)?.toInt(),
          movieArtistHairAndMakeupUnitTime:
              (json['movieArtistHairAndMakeupUnitTime'] as num?)?.toInt(),
          movieArtistWardrobeUnitTime:
              (json['movieArtistWardrobeUnitTime'] as num?)?.toInt(),
          movieArtistOnSetTime: (json['movieArtistOnSetTime'] as num?)?.toInt(),
          movieArtistAdditionalCount:
              (json['movieArtistAdditionalCount'] as num?)?.toInt(),
          movieTechnicianFirstName: json['movieTechnicianFirstName'] as String?,
          movieTechnicianLastName: json['movieTechnicianLastName'] as String?,
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieTechnicianCallTime:
              (json['movieTechnicianCallTime'] as num?)?.toInt(),
          movieTechnicianAdditionalCount:
              (json['movieTechnicianAdditionalCount'] as num?)?.toInt(),
          movieEquipmentName: json['movieEquipmentName'] as String?,
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          movieEquipmentCallTime:
              (json['movieEquipmentCallTime'] as num?)?.toInt(),
          movieEquipmentAdditionalCount:
              (json['movieEquipmentAdditionalCount'] as num?)?.toInt(),
          movieVendorName: json['movieVendorName'] as String?,
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          movieVendorCallTime: (json['movieVendorCallTime'] as num?)?.toInt(),
          movieVendorAdditionalCount:
              (json['movieVendorAdditionalCount'] as num?)?.toInt(),
          artistPredefinedPhoneCallNotificationTypeName:
              json['artistPredefinedPhoneCallNotificationTypeName'] as String?,
          artistPredefinedPhoneCallNotificationTypeId:
              (json['artistPredefinedPhoneCallNotificationTypeId'] as num?)
                  ?.toInt(),
          artistPhoneCallNotificationStartedDateTime:
              json['artistPhoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['artistPhoneCallNotificationStartedDateTime']
                          as String),
          artistPhoneCallNotificationCompletedDateTime:
              json['artistPhoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['artistPhoneCallNotificationCompletedDateTime']
                          as String),
          artistPredefinedEmailNotificationTypeName:
              json['artistPredefinedEmailNotificationTypeName'] as String?,
          artistPredefinedEmailNotificationTypeId:
              (json['artistPredefinedEmailNotificationTypeId'] as num?)
                  ?.toInt(),
          artistEmailNotificationStartedDateTime:
              json['artistEmailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['artistEmailNotificationStartedDateTime'] as String),
          artistEmailNotificationCompletedDateTime:
              json['artistEmailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['artistEmailNotificationCompletedDateTime']
                          as String),
          technicianPredefinedPhoneCallNotificationTypeName:
              json['technicianPredefinedPhoneCallNotificationTypeName']
                  as String?,
          technicianPredefinedPhoneCallNotificationTypeId:
              (json['technicianPredefinedPhoneCallNotificationTypeId'] as num?)
                  ?.toInt(),
          technicianPhoneCallNotificationStartedDateTime:
              json['technicianPhoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['technicianPhoneCallNotificationStartedDateTime']
                          as String),
          technicianPhoneCallNotificationCompletedDateTime:
              json['technicianPhoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['technicianPhoneCallNotificationCompletedDateTime']
                          as String),
          technicianPredefinedEmailNotificationTypeName:
              json['technicianPredefinedEmailNotificationTypeName'] as String?,
          technicianPredefinedEmailNotificationTypeId:
              (json['technicianPredefinedEmailNotificationTypeId'] as num?)
                  ?.toInt(),
          technicianEmailNotificationStartedDateTime:
              json['technicianEmailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['technicianEmailNotificationStartedDateTime']
                          as String),
          technicianEmailNotificationCompletedDateTime:
              json['technicianEmailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['technicianEmailNotificationCompletedDateTime']
                          as String),
          vendorPredefinedPhoneCallNotificationTypeName:
              json['vendorPredefinedPhoneCallNotificationTypeName'] as String?,
          vendorPredefinedPhoneCallNotificationTypeId:
              (json['vendorPredefinedPhoneCallNotificationTypeId'] as num?)
                  ?.toInt(),
          vendorPhoneCallNotificationStartedDateTime:
              json['vendorPhoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['vendorPhoneCallNotificationStartedDateTime']
                          as String),
          vendorPhoneCallNotificationCompletedDateTime:
              json['vendorPhoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['vendorPhoneCallNotificationCompletedDateTime']
                          as String),
          vendorPredefinedEmailNotificationTypeName:
              json['vendorPredefinedEmailNotificationTypeName'] as String?,
          vendorPredefinedEmailNotificationTypeId:
              (json['vendorPredefinedEmailNotificationTypeId'] as num?)
                  ?.toInt(),
          vendorEmailNotificationStartedDateTime:
              json['vendorEmailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['vendorEmailNotificationStartedDateTime'] as String),
          vendorEmailNotificationCompletedDateTime:
              json['vendorEmailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['vendorEmailNotificationCompletedDateTime']
                          as String),
          equipmentPredefinedPhoneCallNotificationTypeName:
              json['equipmentPredefinedPhoneCallNotificationTypeName']
                  as String?,
          equipmentPredefinedPhoneCallNotificationTypeId:
              (json['equipmentPredefinedPhoneCallNotificationTypeId'] as num?)
                  ?.toInt(),
          equipmentPhoneCallNotificationStartedDateTime:
              json['equipmentPhoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['equipmentPhoneCallNotificationStartedDateTime']
                          as String),
          equipmentPhoneCallNotificationCompletedDateTime:
              json['equipmentPhoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['equipmentPhoneCallNotificationCompletedDateTime']
                          as String),
          equipmentPredefinedEmailNotificationTypeName:
              json['equipmentPredefinedEmailNotificationTypeName'] as String?,
          equipmentPredefinedEmailNotificationTypeId:
              (json['equipmentPredefinedEmailNotificationTypeId'] as num?)
                  ?.toInt(),
          equipmentEmailNotificationStartedDateTime:
              json['equipmentEmailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['equipmentEmailNotificationStartedDateTime']
                          as String),
          equipmentEmailNotificationCompletedDateTime:
              json['equipmentEmailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['equipmentEmailNotificationCompletedDateTime']
                          as String),
        );

Map<String, dynamic> _$MovieShootDayCallNotificationStatusModelToJson(
        MovieShootDayCallNotificationStatusModel instance) =>
    <String, dynamic>{
      'predefinedContractForTypeId': instance.predefinedContractForTypeId,
      'predefinedContractForTypeName': instance.predefinedContractForTypeName,
      'movieArtistFirstName': instance.movieArtistFirstName,
      'movieArtistLastName': instance.movieArtistLastName,
      'movieArtistId': instance.movieArtistId,
      'movieArtistProductionUnitTime': instance.movieArtistProductionUnitTime,
      'movieArtistHairAndMakeupUnitTime':
          instance.movieArtistHairAndMakeupUnitTime,
      'movieArtistWardrobeUnitTime': instance.movieArtistWardrobeUnitTime,
      'movieArtistOnSetTime': instance.movieArtistOnSetTime,
      'movieArtistAdditionalCount': instance.movieArtistAdditionalCount,
      'movieTechnicianFirstName': instance.movieTechnicianFirstName,
      'movieTechnicianLastName': instance.movieTechnicianLastName,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieTechnicianCallTime': instance.movieTechnicianCallTime,
      'movieTechnicianAdditionalCount': instance.movieTechnicianAdditionalCount,
      'movieEquipmentName': instance.movieEquipmentName,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieEquipmentCallTime': instance.movieEquipmentCallTime,
      'movieEquipmentAdditionalCount': instance.movieEquipmentAdditionalCount,
      'movieVendorName': instance.movieVendorName,
      'movieVendorId': instance.movieVendorId,
      'movieVendorCallTime': instance.movieVendorCallTime,
      'movieVendorAdditionalCount': instance.movieVendorAdditionalCount,
      'artistPredefinedPhoneCallNotificationTypeName':
          instance.artistPredefinedPhoneCallNotificationTypeName,
      'artistPredefinedPhoneCallNotificationTypeId':
          instance.artistPredefinedPhoneCallNotificationTypeId,
      'artistPhoneCallNotificationStartedDateTime': instance
          .artistPhoneCallNotificationStartedDateTime
          ?.toIso8601String(),
      'artistPhoneCallNotificationCompletedDateTime': instance
          .artistPhoneCallNotificationCompletedDateTime
          ?.toIso8601String(),
      'artistPredefinedEmailNotificationTypeName':
          instance.artistPredefinedEmailNotificationTypeName,
      'artistPredefinedEmailNotificationTypeId':
          instance.artistPredefinedEmailNotificationTypeId,
      'artistEmailNotificationStartedDateTime':
          instance.artistEmailNotificationStartedDateTime?.toIso8601String(),
      'artistEmailNotificationCompletedDateTime':
          instance.artistEmailNotificationCompletedDateTime?.toIso8601String(),
      'technicianPredefinedPhoneCallNotificationTypeName':
          instance.technicianPredefinedPhoneCallNotificationTypeName,
      'technicianPredefinedPhoneCallNotificationTypeId':
          instance.technicianPredefinedPhoneCallNotificationTypeId,
      'technicianPhoneCallNotificationStartedDateTime': instance
          .technicianPhoneCallNotificationStartedDateTime
          ?.toIso8601String(),
      'technicianPhoneCallNotificationCompletedDateTime': instance
          .technicianPhoneCallNotificationCompletedDateTime
          ?.toIso8601String(),
      'technicianPredefinedEmailNotificationTypeName':
          instance.technicianPredefinedEmailNotificationTypeName,
      'technicianPredefinedEmailNotificationTypeId':
          instance.technicianPredefinedEmailNotificationTypeId,
      'technicianEmailNotificationStartedDateTime': instance
          .technicianEmailNotificationStartedDateTime
          ?.toIso8601String(),
      'technicianEmailNotificationCompletedDateTime': instance
          .technicianEmailNotificationCompletedDateTime
          ?.toIso8601String(),
      'vendorPredefinedPhoneCallNotificationTypeName':
          instance.vendorPredefinedPhoneCallNotificationTypeName,
      'vendorPredefinedPhoneCallNotificationTypeId':
          instance.vendorPredefinedPhoneCallNotificationTypeId,
      'vendorPhoneCallNotificationStartedDateTime': instance
          .vendorPhoneCallNotificationStartedDateTime
          ?.toIso8601String(),
      'vendorPhoneCallNotificationCompletedDateTime': instance
          .vendorPhoneCallNotificationCompletedDateTime
          ?.toIso8601String(),
      'vendorPredefinedEmailNotificationTypeName':
          instance.vendorPredefinedEmailNotificationTypeName,
      'vendorPredefinedEmailNotificationTypeId':
          instance.vendorPredefinedEmailNotificationTypeId,
      'vendorEmailNotificationStartedDateTime':
          instance.vendorEmailNotificationStartedDateTime?.toIso8601String(),
      'vendorEmailNotificationCompletedDateTime':
          instance.vendorEmailNotificationCompletedDateTime?.toIso8601String(),
      'equipmentPredefinedPhoneCallNotificationTypeName':
          instance.equipmentPredefinedPhoneCallNotificationTypeName,
      'equipmentPredefinedPhoneCallNotificationTypeId':
          instance.equipmentPredefinedPhoneCallNotificationTypeId,
      'equipmentPhoneCallNotificationStartedDateTime': instance
          .equipmentPhoneCallNotificationStartedDateTime
          ?.toIso8601String(),
      'equipmentPhoneCallNotificationCompletedDateTime': instance
          .equipmentPhoneCallNotificationCompletedDateTime
          ?.toIso8601String(),
      'equipmentPredefinedEmailNotificationTypeName':
          instance.equipmentPredefinedEmailNotificationTypeName,
      'equipmentPredefinedEmailNotificationTypeId':
          instance.equipmentPredefinedEmailNotificationTypeId,
      'equipmentEmailNotificationStartedDateTime':
          instance.equipmentEmailNotificationStartedDateTime?.toIso8601String(),
      'equipmentEmailNotificationCompletedDateTime': instance
          .equipmentEmailNotificationCompletedDateTime
          ?.toIso8601String(),
    };

MovieShootDayCallNotificationStatusModelReturnListModel
    _$MovieShootDayCallNotificationStatusModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayCallNotificationStatusModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieShootDayCallNotificationStatusModel.fromJson(
                          e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieShootDayCallNotificationStatusModelReturnListModelToJson(
            MovieShootDayCallNotificationStatusModelReturnListModel instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieShootDayCastAndCrewCountSummaryModel
    _$MovieShootDayCastAndCrewCountSummaryModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayCastAndCrewCountSummaryModel(
          movieShootDayCastAndCrewTypeName:
              json['movieShootDayCastAndCrewTypeName'] as String?,
          movieShootDayCastAndCrewTypeId:
              (json['movieShootDayCastAndCrewTypeId'] as num?)?.toInt(),
          movieShootDayCastAndCrewTotalCount:
              (json['movieShootDayCastAndCrewTotalCount'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          predefinedBudgetDivisionTypeId:
              (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
          predefinedMovieShootDayResourceTypeId:
              (json['predefinedMovieShootDayResourceTypeId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayCastAndCrewCountSummaryModelToJson(
        MovieShootDayCastAndCrewCountSummaryModel instance) =>
    <String, dynamic>{
      'movieShootDayCastAndCrewTypeName':
          instance.movieShootDayCastAndCrewTypeName,
      'movieShootDayCastAndCrewTypeId': instance.movieShootDayCastAndCrewTypeId,
      'movieShootDayCastAndCrewTotalCount':
          instance.movieShootDayCastAndCrewTotalCount,
      'movieId': instance.movieId,
      'movieShootDayId': instance.movieShootDayId,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'predefinedMovieShootDayResourceTypeId':
          instance.predefinedMovieShootDayResourceTypeId,
      'companyId': instance.companyId,
    };

MovieShootDayCastAndCrewCountSummaryModelReturnListModel
    _$MovieShootDayCastAndCrewCountSummaryModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayCastAndCrewCountSummaryModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieShootDayCastAndCrewCountSummaryModel.fromJson(
                          e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String,
    dynamic> _$MovieShootDayCastAndCrewCountSummaryModelReturnListModelToJson(
        MovieShootDayCastAndCrewCountSummaryModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayCreateModel _$MovieShootDayCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayCreateModel(
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      predefinedMovieShootDayTypeId:
          (json['predefinedMovieShootDayTypeId'] as num?)?.toInt(),
      predefinedMovieShootDayStatusTypeId:
          (json['predefinedMovieShootDayStatusTypeId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      dayNumber: (json['dayNumber'] as num?)?.toInt(),
      dateOfShoot: json['dateOfShoot'] == null
          ? null
          : DateTime.parse(json['dateOfShoot'] as String),
      preCallForHairAndMakupTime:
          (json['preCallForHairAndMakupTime'] as num?)?.toInt(),
      crewCallTime: (json['crewCallTime'] as num?)?.toInt(),
      shootCallTime: (json['shootCallTime'] as num?)?.toInt(),
      shiftStartTime: (json['shiftStartTime'] as num?)?.toInt(),
      shiftEndTime: (json['shiftEndTime'] as num?)?.toInt(),
      useDefaultTextInLeft: json['useDefaultTextInLeft'] as bool?,
      useDefaultTextInRight: json['useDefaultTextInRight'] as bool?,
      useDefaultHarassmentInfoText:
          json['useDefaultHarassmentInfoText'] as bool?,
      useDefaultRadioChannelText: json['useDefaultRadioChannelText'] as bool?,
      textInLeft: json['textInLeft'] as String?,
      textInRight: json['textInRight'] as String?,
      harassmentInfoText: json['harassmentInfoText'] as String?,
      radioChannelText: json['radioChannelText'] as String?,
      weatherTemperatureMinInCelsius:
          (json['weatherTemperatureMinInCelsius'] as num?)?.toDouble(),
      weatherTemperatureMaxCelsius:
          (json['weatherTemperatureMaxCelsius'] as num?)?.toDouble(),
      weatherForecast: json['weatherForecast'] as String?,
      sunriseTime: (json['sunriseTime'] as num?)?.toInt(),
      sunsetTime: (json['sunsetTime'] as num?)?.toInt(),
      goldenHourMorningStartTime:
          (json['goldenHourMorningStartTime'] as num?)?.toInt(),
      goldenHourEveningStartTime:
          (json['goldenHourEveningStartTime'] as num?)?.toInt(),
      goldenHourMorningEndTime:
          (json['goldenHourMorningEndTime'] as num?)?.toInt(),
      goldenHourEveningEndTime:
          (json['goldenHourEveningEndTime'] as num?)?.toInt(),
      shootSummary: json['shootSummary'] as String?,
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      budget: (json['budget'] as num?)?.toDouble(),
      actual: (json['actual'] as num?)?.toDouble(),
      isBudgetLocked: json['isBudgetLocked'] as bool?,
      isCallSheetLocked: json['isCallSheetLocked'] as bool?,
      predefinedMovieApprovalStatusForCallsheetTypeId:
          (json['predefinedMovieApprovalStatusForCallsheetTypeId'] as num?)
              ?.toInt(),
      predefinedMovieApprovalStatusForBudgetTypeId:
          (json['predefinedMovieApprovalStatusForBudgetTypeId'] as num?)
              ?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayCreateModelToJson(
        MovieShootDayCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayCode': instance.movieShootDayCode,
      'movieId': instance.movieId,
      'predefinedMovieShootDayTypeId': instance.predefinedMovieShootDayTypeId,
      'predefinedMovieShootDayStatusTypeId':
          instance.predefinedMovieShootDayStatusTypeId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'dayNumber': instance.dayNumber,
      'dateOfShoot': instance.dateOfShoot?.toIso8601String(),
      'preCallForHairAndMakupTime': instance.preCallForHairAndMakupTime,
      'crewCallTime': instance.crewCallTime,
      'shootCallTime': instance.shootCallTime,
      'shiftStartTime': instance.shiftStartTime,
      'shiftEndTime': instance.shiftEndTime,
      'useDefaultTextInLeft': instance.useDefaultTextInLeft,
      'useDefaultTextInRight': instance.useDefaultTextInRight,
      'useDefaultHarassmentInfoText': instance.useDefaultHarassmentInfoText,
      'useDefaultRadioChannelText': instance.useDefaultRadioChannelText,
      'textInLeft': instance.textInLeft,
      'textInRight': instance.textInRight,
      'harassmentInfoText': instance.harassmentInfoText,
      'radioChannelText': instance.radioChannelText,
      'weatherTemperatureMinInCelsius': instance.weatherTemperatureMinInCelsius,
      'weatherTemperatureMaxCelsius': instance.weatherTemperatureMaxCelsius,
      'weatherForecast': instance.weatherForecast,
      'sunriseTime': instance.sunriseTime,
      'sunsetTime': instance.sunsetTime,
      'goldenHourMorningStartTime': instance.goldenHourMorningStartTime,
      'goldenHourEveningStartTime': instance.goldenHourEveningStartTime,
      'goldenHourMorningEndTime': instance.goldenHourMorningEndTime,
      'goldenHourEveningEndTime': instance.goldenHourEveningEndTime,
      'shootSummary': instance.shootSummary,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'budget': instance.budget,
      'actual': instance.actual,
      'isBudgetLocked': instance.isBudgetLocked,
      'isCallSheetLocked': instance.isCallSheetLocked,
      'predefinedMovieApprovalStatusForCallsheetTypeId':
          instance.predefinedMovieApprovalStatusForCallsheetTypeId,
      'predefinedMovieApprovalStatusForBudgetTypeId':
          instance.predefinedMovieApprovalStatusForBudgetTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

MovieShootDayEquipmentCreateModel _$MovieShootDayEquipmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayEquipmentCreateModel(
      movieShootDayEquipmentCode: json['movieShootDayEquipmentCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieShootDayEquipmentName: json['movieShootDayEquipmentName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      notes: json['notes'] as String?,
      createMovieEquipmentOnTheFly:
          json['createMovieEquipmentOnTheFly'] as bool?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayEquipmentCreateModelToJson(
        MovieShootDayEquipmentCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayEquipmentCode': instance.movieShootDayEquipmentCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieShootDayEquipmentName': instance.movieShootDayEquipmentName,
      'callTime': instance.callTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'notes': instance.notes,
      'createMovieEquipmentOnTheFly': instance.createMovieEquipmentOnTheFly,
      'equipmentId': instance.equipmentId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayEquipmentModel _$MovieShootDayEquipmentModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayEquipmentModel(
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayEquipmentCode: json['movieShootDayEquipmentCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieShootDayEquipmentName: json['movieShootDayEquipmentName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeName:
          json['predefinedPhoneCallNotificationStatusTypeName'] as String?,
      predefinedEmailNotificationStatusTypeName:
          json['predefinedEmailNotificationStatusTypeName'] as String?,
      predefinedPushNotificationStatusTypeName:
          json['predefinedPushNotificationStatusTypeName'] as String?,
      predefinedSmsNotificationStatusTypeName:
          json['predefinedSmsNotificationStatusTypeName'] as String?,
      predefinedWhatsAppNotificationStatusTypeName:
          json['predefinedWhatsAppNotificationStatusTypeName'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      equipmentName: json['equipmentName'] as String?,
      equipmentCode: json['equipmentCode'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      predefinedCallTimeValueTypeName:
          json['predefinedCallTimeValueTypeName'] as String?,
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      equipmentTypeName: json['equipmentTypeName'] as String?,
      equipmentWorkPhone: json['equipmentWorkPhone'] as String?,
      equipmentCellPhone: json['equipmentCellPhone'] as String?,
      equipmentEmail: json['equipmentEmail'] as String?,
      predefinedPaymentStatusTypeName:
          json['predefinedPaymentStatusTypeName'] as String?,
      notes: json['notes'] as String?,
      technicianGroupTypePosition:
          (json['technicianGroupTypePosition'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayEquipmentModelToJson(
        MovieShootDayEquipmentModel instance) =>
    <String, dynamic>{
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayEquipmentCode': instance.movieShootDayEquipmentCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieShootDayEquipmentName': instance.movieShootDayEquipmentName,
      'callTime': instance.callTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedPhoneCallNotificationStatusTypeName':
          instance.predefinedPhoneCallNotificationStatusTypeName,
      'predefinedEmailNotificationStatusTypeName':
          instance.predefinedEmailNotificationStatusTypeName,
      'predefinedPushNotificationStatusTypeName':
          instance.predefinedPushNotificationStatusTypeName,
      'predefinedSmsNotificationStatusTypeName':
          instance.predefinedSmsNotificationStatusTypeName,
      'predefinedWhatsAppNotificationStatusTypeName':
          instance.predefinedWhatsAppNotificationStatusTypeName,
      'equipmentId': instance.equipmentId,
      'equipmentName': instance.equipmentName,
      'equipmentCode': instance.equipmentCode,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'predefinedCallTimeValueTypeName':
          instance.predefinedCallTimeValueTypeName,
      'equipmentTypeId': instance.equipmentTypeId,
      'equipmentTypeName': instance.equipmentTypeName,
      'equipmentWorkPhone': instance.equipmentWorkPhone,
      'equipmentCellPhone': instance.equipmentCellPhone,
      'equipmentEmail': instance.equipmentEmail,
      'predefinedPaymentStatusTypeName':
          instance.predefinedPaymentStatusTypeName,
      'notes': instance.notes,
      'technicianGroupTypePosition': instance.technicianGroupTypePosition,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayEquipmentModelReturnListModel
    _$MovieShootDayEquipmentModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayEquipmentModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayEquipmentModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayEquipmentModelReturnListModelToJson(
        MovieShootDayEquipmentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayEquipmentModelReturnModel
    _$MovieShootDayEquipmentModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayEquipmentModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayEquipmentModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayEquipmentModelReturnModelToJson(
        MovieShootDayEquipmentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayEquipmentUpdateModel _$MovieShootDayEquipmentUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayEquipmentUpdateModel(
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayEquipmentCode: json['movieShootDayEquipmentCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieShootDayEquipmentName: json['movieShootDayEquipmentName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      notes: json['notes'] as String?,
      createMovieEquipmentOnTheFly:
          json['createMovieEquipmentOnTheFly'] as bool?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayEquipmentUpdateModelToJson(
        MovieShootDayEquipmentUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayEquipmentCode': instance.movieShootDayEquipmentCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieShootDayEquipmentName': instance.movieShootDayEquipmentName,
      'callTime': instance.callTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'notes': instance.notes,
      'createMovieEquipmentOnTheFly': instance.createMovieEquipmentOnTheFly,
      'equipmentId': instance.equipmentId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayEquipmentWithCompanyOrMovieEquipmentCreateModel
    _$MovieShootDayEquipmentWithCompanyOrMovieEquipmentCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayEquipmentWithCompanyOrMovieEquipmentCreateModel(
          equipmentCode: json['equipmentCode'] as String?,
          equipmentName: json['equipmentName'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          specification: json['specification'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          position: (json['position'] as num?)?.toInt(),
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          isOwn: json['isOwn'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newEquipmentRates: (json['newEquipmentRates'] as List<dynamic>?)
                  ?.map((e) => EquipmentRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          movieEquipmentCode: json['movieEquipmentCode'] as String?,
          equipmentId: (json['equipmentId'] as num?)?.toInt(),
          parentMovieEquipmentId:
              (json['parentMovieEquipmentId'] as num?)?.toInt(),
          movieEquipmentName: json['movieEquipmentName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieShootDayEquipmentCode:
              json['movieShootDayEquipmentCode'] as String?,
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieShootDayEquipmentName:
              json['movieShootDayEquipmentName'] as String?,
          callTime: (json['callTime'] as num?)?.toInt(),
          predefinedCallTimeValueTypeId:
              (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
          additionalCount: (json['additionalCount'] as num?)?.toInt(),
          predefinedPhoneCallNotificationStatusTypeId:
              (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          phoneCallNotificationStartedDateTime:
              json['phoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationStartedDateTime'] as String),
          phoneCallNotificationCompletedDateTime:
              json['phoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationCompletedDateTime'] as String),
          predefinedEmailNotificationStatusTypeId:
              (json['predefinedEmailNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          emailNotificationStartedDateTime:
              json['emailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationStartedDateTime'] as String),
          emailNotificationCompletedDateTime:
              json['emailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationCompletedDateTime'] as String),
          predefinedSmsNotificationStatusTypeId:
              (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
          smsNotificationStartedDateTime:
              json['smsNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationStartedDateTime'] as String),
          smsNotificationCompletedDateTime:
              json['smsNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationCompletedDateTime'] as String),
          predefinedPushNotificationStatusTypeId:
              (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
          pushNotificationStartedDateTime:
              json['pushNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationStartedDateTime'] as String),
          pushNotificationCompletedDateTime:
              json['pushNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationCompletedDateTime'] as String),
          predefinedWhatsAppNotificationStatusTypeId:
              (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          whatsAppNotificationStartedDateTime:
              json['whatsAppNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationStartedDateTime'] as String),
          whatsAppNotificationCompletedDateTime:
              json['whatsAppNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationCompletedDateTime'] as String),
          inTime: (json['inTime'] as num?)?.toInt(),
          outTime: (json['outTime'] as num?)?.toInt(),
          notes: json['notes'] as String?,
          isAbsent: json['isAbsent'] as bool?,
          estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['preProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['productionStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieShootDayEquipmentWithCompanyOrMovieEquipmentCreateModelToJson(
            MovieShootDayEquipmentWithCompanyOrMovieEquipmentCreateModel
                instance) =>
        <String, dynamic>{
          'equipmentCode': instance.equipmentCode,
          'equipmentName': instance.equipmentName,
          'vendorId': instance.vendorId,
          'workPhone': instance.workPhone,
          'cellPhone': instance.cellPhone,
          'email': instance.email,
          'specification': instance.specification,
          'assistantName': instance.assistantName,
          'assistantPhone': instance.assistantPhone,
          'assistantEmail': instance.assistantEmail,
          'equipmentTypeId': instance.equipmentTypeId,
          'profileImageLocation': instance.profileImageLocation,
          'profileImageActualFileName': instance.profileImageActualFileName,
          'position': instance.position,
          'defaultPreProductionBudgetCategoryId':
              instance.defaultPreProductionBudgetCategoryId,
          'defaultProductionBudgetCategoryId':
              instance.defaultProductionBudgetCategoryId,
          'defaultPostProductionBudgetCategoryId':
              instance.defaultPostProductionBudgetCategoryId,
          'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
          'companyId': instance.companyId,
          'isDisabled': instance.isDisabled,
          'isOwn': instance.isOwn,
          'useDefaultRates': instance.useDefaultRates,
          'newEquipmentRates':
              instance.newEquipmentRates?.map((e) => e.toJson()).toList(),
          'movieEquipmentId': instance.movieEquipmentId,
          'movieEquipmentCode': instance.movieEquipmentCode,
          'equipmentId': instance.equipmentId,
          'parentMovieEquipmentId': instance.parentMovieEquipmentId,
          'movieEquipmentName': instance.movieEquipmentName,
          'predefinedContractAssignmentStatusTypeId':
              instance.predefinedContractAssignmentStatusTypeId,
          'contractId': instance.contractId,
          'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'isPartOfMajorCrew': instance.isPartOfMajorCrew,
          'defaultPreProductionMovieBudgetCategoryId':
              instance.defaultPreProductionMovieBudgetCategoryId,
          'defaultProductionMovieBudgetCategoryId':
              instance.defaultProductionMovieBudgetCategoryId,
          'defaultPostProductionMovieBudgetCategoryId':
              instance.defaultPostProductionMovieBudgetCategoryId,
          'movieId': instance.movieId,
          'movieShootDayEquipmentCode': instance.movieShootDayEquipmentCode,
          'movieShootDayId': instance.movieShootDayId,
          'movieShootDayEquipmentName': instance.movieShootDayEquipmentName,
          'callTime': instance.callTime,
          'predefinedCallTimeValueTypeId':
              instance.predefinedCallTimeValueTypeId,
          'additionalCount': instance.additionalCount,
          'predefinedPhoneCallNotificationStatusTypeId':
              instance.predefinedPhoneCallNotificationStatusTypeId,
          'phoneCallNotificationStartedDateTime':
              instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
          'phoneCallNotificationCompletedDateTime': instance
              .phoneCallNotificationCompletedDateTime
              ?.toIso8601String(),
          'predefinedEmailNotificationStatusTypeId':
              instance.predefinedEmailNotificationStatusTypeId,
          'emailNotificationStartedDateTime':
              instance.emailNotificationStartedDateTime?.toIso8601String(),
          'emailNotificationCompletedDateTime':
              instance.emailNotificationCompletedDateTime?.toIso8601String(),
          'predefinedSmsNotificationStatusTypeId':
              instance.predefinedSmsNotificationStatusTypeId,
          'smsNotificationStartedDateTime':
              instance.smsNotificationStartedDateTime?.toIso8601String(),
          'smsNotificationCompletedDateTime':
              instance.smsNotificationCompletedDateTime?.toIso8601String(),
          'predefinedPushNotificationStatusTypeId':
              instance.predefinedPushNotificationStatusTypeId,
          'pushNotificationStartedDateTime':
              instance.pushNotificationStartedDateTime?.toIso8601String(),
          'pushNotificationCompletedDateTime':
              instance.pushNotificationCompletedDateTime?.toIso8601String(),
          'predefinedWhatsAppNotificationStatusTypeId':
              instance.predefinedWhatsAppNotificationStatusTypeId,
          'whatsAppNotificationStartedDateTime':
              instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
          'whatsAppNotificationCompletedDateTime':
              instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
          'inTime': instance.inTime,
          'outTime': instance.outTime,
          'notes': instance.notes,
          'isAbsent': instance.isAbsent,
          'estimatedRate': instance.estimatedRate,
          'departmentId': instance.departmentId,
          'postProductionStatusTypeId': instance.postProductionStatusTypeId,
          'preProductionStatusTypeId': instance.preProductionStatusTypeId,
          'productionStatusTypeId': instance.productionStatusTypeId,
        };

MovieShootDayExpenseCreateModel _$MovieShootDayExpenseCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayExpenseCreateModel(
      movieShootDayExpenseCode: json['movieShootDayExpenseCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetOrExpenseTypeId:
          (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
      predefinedExpensePaymentStatusTypeId:
          (json['predefinedExpensePaymentStatusTypeId'] as num?)?.toInt(),
      predefinedExpensePaymentTypeId:
          (json['predefinedExpensePaymentTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      expenseEntryName: json['expenseEntryName'] as String?,
      description: json['description'] as String?,
      chequeNumber: json['chequeNumber'] as String?,
      chequeIssuedByBankName: json['chequeIssuedByBankName'] as String?,
      chequeIssuedByBankBranchName:
          json['chequeIssuedByBankBranchName'] as String?,
      bankTransferFromBankName: json['bankTransferFromBankName'] as String?,
      bankTransferFromBankBranchName:
          json['bankTransferFromBankBranchName'] as String?,
      bankTransferToBankName: json['bankTransferToBankName'] as String?,
      bankTransferToBankBranchName:
          json['bankTransferToBankBranchName'] as String?,
      bankTransferFromAccountNumber:
          json['bankTransferFromAccountNumber'] as String?,
      bankTransferToAccountNumber:
          json['bankTransferToAccountNumber'] as String?,
      amountIssuedDate: json['amountIssuedDate'] == null
          ? null
          : DateTime.parse(json['amountIssuedDate'] as String),
      quantity: (json['quantity'] as num?)?.toDouble(),
      amount: (json['amount'] as num?)?.toDouble(),
      totalAmount: (json['totalAmount'] as num?)?.toDouble(),
      ledgerTypeId: (json['ledgerTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieShootDayOnTheFly: json['createMovieShootDayOnTheFly'] as bool?,
      movieShootDayNumber: (json['movieShootDayNumber'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      movieShootDaySummary: json['movieShootDaySummary'] as String?,
      notes: json['notes'] as String?,
    );

Map<String, dynamic> _$MovieShootDayExpenseCreateModelToJson(
        MovieShootDayExpenseCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayExpenseCode': instance.movieShootDayExpenseCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedExpensePaymentStatusTypeId':
          instance.predefinedExpensePaymentStatusTypeId,
      'predefinedExpensePaymentTypeId': instance.predefinedExpensePaymentTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieVendorId': instance.movieVendorId,
      'movieLocationId': instance.movieLocationId,
      'expenseEntryName': instance.expenseEntryName,
      'description': instance.description,
      'chequeNumber': instance.chequeNumber,
      'chequeIssuedByBankName': instance.chequeIssuedByBankName,
      'chequeIssuedByBankBranchName': instance.chequeIssuedByBankBranchName,
      'bankTransferFromBankName': instance.bankTransferFromBankName,
      'bankTransferFromBankBranchName': instance.bankTransferFromBankBranchName,
      'bankTransferToBankName': instance.bankTransferToBankName,
      'bankTransferToBankBranchName': instance.bankTransferToBankBranchName,
      'bankTransferFromAccountNumber': instance.bankTransferFromAccountNumber,
      'bankTransferToAccountNumber': instance.bankTransferToAccountNumber,
      'amountIssuedDate': instance.amountIssuedDate?.toIso8601String(),
      'quantity': instance.quantity,
      'amount': instance.amount,
      'totalAmount': instance.totalAmount,
      'ledgerTypeId': instance.ledgerTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieShootDayOnTheFly': instance.createMovieShootDayOnTheFly,
      'movieShootDayNumber': instance.movieShootDayNumber,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'movieShootDaySummary': instance.movieShootDaySummary,
      'notes': instance.notes,
    };

MovieShootDayExpenseModel _$MovieShootDayExpenseModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayExpenseModel(
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieShootDayExpenseCode: json['movieShootDayExpenseCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetOrExpenseTypeId:
          (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
      predefinedExpensePaymentStatusTypeId:
          (json['predefinedExpensePaymentStatusTypeId'] as num?)?.toInt(),
      predefinedExpensePaymentTypeId:
          (json['predefinedExpensePaymentTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      expenseEntryName: json['expenseEntryName'] as String?,
      description: json['description'] as String?,
      chequeNumber: json['chequeNumber'] as String?,
      chequeIssuedByBankName: json['chequeIssuedByBankName'] as String?,
      chequeIssuedByBankBranchName:
          json['chequeIssuedByBankBranchName'] as String?,
      bankTransferFromBankName: json['bankTransferFromBankName'] as String?,
      bankTransferFromBankBranchName:
          json['bankTransferFromBankBranchName'] as String?,
      bankTransferToBankName: json['bankTransferToBankName'] as String?,
      bankTransferToBankBranchName:
          json['bankTransferToBankBranchName'] as String?,
      bankTransferFromAccountNumber:
          json['bankTransferFromAccountNumber'] as String?,
      bankTransferToAccountNumber:
          json['bankTransferToAccountNumber'] as String?,
      amountIssuedDate: json['amountIssuedDate'] == null
          ? null
          : DateTime.parse(json['amountIssuedDate'] as String),
      quantity: (json['quantity'] as num?)?.toDouble(),
      amount: (json['amount'] as num?)?.toDouble(),
      totalAmount: (json['totalAmount'] as num?)?.toDouble(),
      ledgerTypeId: (json['ledgerTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      shootDayNumber: (json['shootDayNumber'] as num?)?.toInt(),
      shootDayDateOfShoot: json['shootDayDateOfShoot'] == null
          ? null
          : DateTime.parse(json['shootDayDateOfShoot'] as String),
      predefinedBudgetOrExpenseTypeName:
          json['predefinedBudgetOrExpenseTypeName'] as String?,
      accountNumber: json['accountNumber'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      parentMovieBudgetCategoryId:
          (json['parentMovieBudgetCategoryId'] as num?)?.toInt(),
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedExpensePaymentTypeName:
          json['predefinedExpensePaymentTypeName'] as String?,
      predefinedExpensePaymentStatusTypeName:
          json['predefinedExpensePaymentStatusTypeName'] as String?,
      movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
      movieArtistName: json['movieArtistName'] as String?,
      movieTechnicianName: json['movieTechnicianName'] as String?,
      movieEquipmentName: json['movieEquipmentName'] as String?,
      moviePropertyName: json['moviePropertyName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      movieArtistCharacterName: json['movieArtistCharacterName'] as String?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      equipmentName: json['equipmentName'] as String?,
      propertyName: json['propertyName'] as String?,
      vendorName: json['vendorName'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTitle: json['movieTitle'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      isMovieEnabled: json['isMovieEnabled'] as bool?,
      movieArtistCode: json['movieArtistCode'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieBudgetCategoryCode: json['movieBudgetCategoryCode'] as String?,
      companyName: json['companyName'] as String?,
      ledgerTypeName: json['ledgerTypeName'] as String?,
      notes: json['notes'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      fileAttachments: (json['fileAttachments'] as List<dynamic>?)
              ?.map((e) =>
                  FileAttachmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieShootDayExpenseModelToJson(
        MovieShootDayExpenseModel instance) =>
    <String, dynamic>{
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayExpenseCode': instance.movieShootDayExpenseCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedExpensePaymentStatusTypeId':
          instance.predefinedExpensePaymentStatusTypeId,
      'predefinedExpensePaymentTypeId': instance.predefinedExpensePaymentTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieVendorId': instance.movieVendorId,
      'movieLocationId': instance.movieLocationId,
      'expenseEntryName': instance.expenseEntryName,
      'description': instance.description,
      'chequeNumber': instance.chequeNumber,
      'chequeIssuedByBankName': instance.chequeIssuedByBankName,
      'chequeIssuedByBankBranchName': instance.chequeIssuedByBankBranchName,
      'bankTransferFromBankName': instance.bankTransferFromBankName,
      'bankTransferFromBankBranchName': instance.bankTransferFromBankBranchName,
      'bankTransferToBankName': instance.bankTransferToBankName,
      'bankTransferToBankBranchName': instance.bankTransferToBankBranchName,
      'bankTransferFromAccountNumber': instance.bankTransferFromAccountNumber,
      'bankTransferToAccountNumber': instance.bankTransferToAccountNumber,
      'amountIssuedDate': instance.amountIssuedDate?.toIso8601String(),
      'quantity': instance.quantity,
      'amount': instance.amount,
      'totalAmount': instance.totalAmount,
      'ledgerTypeId': instance.ledgerTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieLocationName': instance.movieLocationName,
      'shootDayNumber': instance.shootDayNumber,
      'shootDayDateOfShoot': instance.shootDayDateOfShoot?.toIso8601String(),
      'predefinedBudgetOrExpenseTypeName':
          instance.predefinedBudgetOrExpenseTypeName,
      'accountNumber': instance.accountNumber,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'parentMovieBudgetCategoryId': instance.parentMovieBudgetCategoryId,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedExpensePaymentTypeName':
          instance.predefinedExpensePaymentTypeName,
      'predefinedExpensePaymentStatusTypeName':
          instance.predefinedExpensePaymentStatusTypeName,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'movieArtistName': instance.movieArtistName,
      'movieTechnicianName': instance.movieTechnicianName,
      'movieEquipmentName': instance.movieEquipmentName,
      'moviePropertyName': instance.moviePropertyName,
      'movieVendorName': instance.movieVendorName,
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'movieArtistCharacterName': instance.movieArtistCharacterName,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'equipmentName': instance.equipmentName,
      'propertyName': instance.propertyName,
      'vendorName': instance.vendorName,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'movieArtistCode': instance.movieArtistCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieVendorCode': instance.movieVendorCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieBudgetCategoryCode': instance.movieBudgetCategoryCode,
      'companyName': instance.companyName,
      'ledgerTypeName': instance.ledgerTypeName,
      'notes': instance.notes,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'fileAttachments':
          instance.fileAttachments?.map((e) => e.toJson()).toList(),
    };

MovieShootDayExpenseModelReturnListModel
    _$MovieShootDayExpenseModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayExpenseModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayExpenseModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayExpenseModelReturnListModelToJson(
        MovieShootDayExpenseModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayExpenseModelReturnModel
    _$MovieShootDayExpenseModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieShootDayExpenseModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayExpenseModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayExpenseModelReturnModelToJson(
        MovieShootDayExpenseModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayExpenseNoteAttachmentModel
    _$MovieShootDayExpenseNoteAttachmentModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayExpenseNoteAttachmentModel(
          noteAttachmentId: (json['noteAttachmentId'] as num?)?.toInt(),
          title: json['title'] as String?,
          description: json['description'] as String?,
          movieId: (json['movieId'] as num?)?.toInt(),
          userId: (json['userId'] as num?)?.toInt(),
          artistId: (json['artistId'] as num?)?.toInt(),
          vendorId: (json['vendorId'] as num?)?.toInt(),
          equipmentId: (json['equipmentId'] as num?)?.toInt(),
          propertyId: (json['propertyId'] as num?)?.toInt(),
          technicianId: (json['technicianId'] as num?)?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
          movieLocationCandidateId:
              (json['movieLocationCandidateId'] as num?)?.toInt(),
          movieCommitmentTaskId:
              (json['movieCommitmentTaskId'] as num?)?.toInt(),
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
          movieSceneEquipmentId:
              (json['movieSceneEquipmentId'] as num?)?.toInt(),
          movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
          movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
          movieSceneTechnicianId:
              (json['movieSceneTechnicianId'] as num?)?.toInt(),
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieShootDayArtistId:
              (json['movieShootDayArtistId'] as num?)?.toInt(),
          movieShootDayBudgetId:
              (json['movieShootDayBudgetId'] as num?)?.toInt(),
          movieShootDayEquipmentId:
              (json['movieShootDayEquipmentId'] as num?)?.toInt(),
          movieShootDayPropertyId:
              (json['movieShootDayPropertyId'] as num?)?.toInt(),
          movieShootDayExpenseId:
              (json['movieShootDayExpenseId'] as num?)?.toInt(),
          movieShootDayRequirementId:
              (json['movieShootDayRequirementId'] as num?)?.toInt(),
          movieShootDayVendorId:
              (json['movieShootDayVendorId'] as num?)?.toInt(),
          movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
          movieShootDayTechnicianId:
              (json['movieShootDayTechnicianId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['movieBudgetCategoryId'] as num?)?.toInt(),
          movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
          movieUserId: (json['movieUserId'] as num?)?.toInt(),
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          companyName: json['companyName'] as String?,
          userName: json['userName'] as String?,
          movieCode: json['movieCode'] as String?,
          artistCode: json['artistCode'] as String?,
          technicianCode: json['technicianCode'] as String?,
          equipmentCode: json['equipmentCode'] as String?,
          vendorCode: json['vendorCode'] as String?,
          propertyCode: json['propertyCode'] as String?,
          movieArtistCode: json['movieArtistCode'] as String?,
          movieTechnicianCode: json['movieTechnicianCode'] as String?,
          movieEquipmentCode: json['movieEquipmentCode'] as String?,
          movieLocationCode: json['movieLocationCode'] as String?,
          movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
          movieVendorCode: json['movieVendorCode'] as String?,
          moviePropertyCode: json['moviePropertyCode'] as String?,
          movieSceneArtistName: json['movieSceneArtistName'] as String?,
          movieSceneTechnicianName: json['movieSceneTechnicianName'] as String?,
          movieSceneEquipmentName: json['movieSceneEquipmentName'] as String?,
          movieSceneVendorName: json['movieSceneVendorName'] as String?,
          movieScenePropertyName: json['movieScenePropertyName'] as String?,
          movieSceneCode: json['movieSceneCode'] as String?,
          movieSceneArtistCode: json['movieSceneArtistCode'] as String?,
          movieSceneTechnicianCode: json['movieSceneTechnicianCode'] as String?,
          movieSceneEquipmentCode: json['movieSceneEquipmentCode'] as String?,
          movieSceneVendorCode: json['movieSceneVendorCode'] as String?,
          movieScenePropertyCode: json['movieScenePropertyCode'] as String?,
          movieShootDayCode: json['movieShootDayCode'] as String?,
          movieShootDayArtistCode: json['movieShootDayArtistCode'] as String?,
          movieShootDayTechnicianCode:
              json['movieShootDayTechnicianCode'] as String?,
          movieShootDayEquipmentCode:
              json['movieShootDayEquipmentCode'] as String?,
          movieShootDayVendorCode: json['movieShootDayVendorCode'] as String?,
          movieShootDayPropertyCode:
              json['movieShootDayPropertyCode'] as String?,
          movieShootDayExpenseCode: json['movieShootDayExpenseCode'] as String?,
          isExpenseDeleted: json['isExpenseDeleted'] as bool?,
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
          predefinedBudgetOrExpenseTypeId:
              (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
          predefinedBudgetOrExpenseTypeName:
              json['predefinedBudgetOrExpenseTypeName'] as String?,
          movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
          expenseEntryName: json['expenseEntryName'] as String?,
          movieArtistName: json['movieArtistName'] as String?,
          movieTechnicianName: json['movieTechnicianName'] as String?,
          movieEquipmentName: json['movieEquipmentName'] as String?,
          movieVendorName: json['movieVendorName'] as String?,
          moviePropertyName: json['moviePropertyName'] as String?,
          movieLocationName: json['movieLocationName'] as String?,
        );

Map<String, dynamic> _$MovieShootDayExpenseNoteAttachmentModelToJson(
        MovieShootDayExpenseNoteAttachmentModel instance) =>
    <String, dynamic>{
      'noteAttachmentId': instance.noteAttachmentId,
      'title': instance.title,
      'description': instance.description,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'artistId': instance.artistId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'technicianId': instance.technicianId,
      'contractId': instance.contractId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieUnitId': instance.movieUnitId,
      'movieUserId': instance.movieUserId,
      'movieVendorId': instance.movieVendorId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'userName': instance.userName,
      'movieCode': instance.movieCode,
      'artistCode': instance.artistCode,
      'technicianCode': instance.technicianCode,
      'equipmentCode': instance.equipmentCode,
      'vendorCode': instance.vendorCode,
      'propertyCode': instance.propertyCode,
      'movieArtistCode': instance.movieArtistCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieLocationCode': instance.movieLocationCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieVendorCode': instance.movieVendorCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'movieSceneArtistName': instance.movieSceneArtistName,
      'movieSceneTechnicianName': instance.movieSceneTechnicianName,
      'movieSceneEquipmentName': instance.movieSceneEquipmentName,
      'movieSceneVendorName': instance.movieSceneVendorName,
      'movieScenePropertyName': instance.movieScenePropertyName,
      'movieSceneCode': instance.movieSceneCode,
      'movieSceneArtistCode': instance.movieSceneArtistCode,
      'movieSceneTechnicianCode': instance.movieSceneTechnicianCode,
      'movieSceneEquipmentCode': instance.movieSceneEquipmentCode,
      'movieSceneVendorCode': instance.movieSceneVendorCode,
      'movieScenePropertyCode': instance.movieScenePropertyCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieShootDayArtistCode': instance.movieShootDayArtistCode,
      'movieShootDayTechnicianCode': instance.movieShootDayTechnicianCode,
      'movieShootDayEquipmentCode': instance.movieShootDayEquipmentCode,
      'movieShootDayVendorCode': instance.movieShootDayVendorCode,
      'movieShootDayPropertyCode': instance.movieShootDayPropertyCode,
      'movieShootDayExpenseCode': instance.movieShootDayExpenseCode,
      'isExpenseDeleted': instance.isExpenseDeleted,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedBudgetOrExpenseTypeName':
          instance.predefinedBudgetOrExpenseTypeName,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'expenseEntryName': instance.expenseEntryName,
      'movieArtistName': instance.movieArtistName,
      'movieTechnicianName': instance.movieTechnicianName,
      'movieEquipmentName': instance.movieEquipmentName,
      'movieVendorName': instance.movieVendorName,
      'moviePropertyName': instance.moviePropertyName,
      'movieLocationName': instance.movieLocationName,
    };

MovieShootDayExpenseUpdateModel _$MovieShootDayExpenseUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayExpenseUpdateModel(
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieShootDayExpenseCode: json['movieShootDayExpenseCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      predefinedBudgetOrExpenseTypeId:
          (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
      predefinedExpensePaymentStatusTypeId:
          (json['predefinedExpensePaymentStatusTypeId'] as num?)?.toInt(),
      predefinedExpensePaymentTypeId:
          (json['predefinedExpensePaymentTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      expenseEntryName: json['expenseEntryName'] as String?,
      description: json['description'] as String?,
      chequeNumber: json['chequeNumber'] as String?,
      chequeIssuedByBankName: json['chequeIssuedByBankName'] as String?,
      chequeIssuedByBankBranchName:
          json['chequeIssuedByBankBranchName'] as String?,
      bankTransferFromBankName: json['bankTransferFromBankName'] as String?,
      bankTransferFromBankBranchName:
          json['bankTransferFromBankBranchName'] as String?,
      bankTransferToBankName: json['bankTransferToBankName'] as String?,
      bankTransferToBankBranchName:
          json['bankTransferToBankBranchName'] as String?,
      bankTransferFromAccountNumber:
          json['bankTransferFromAccountNumber'] as String?,
      bankTransferToAccountNumber:
          json['bankTransferToAccountNumber'] as String?,
      amountIssuedDate: json['amountIssuedDate'] == null
          ? null
          : DateTime.parse(json['amountIssuedDate'] as String),
      quantity: (json['quantity'] as num?)?.toDouble(),
      amount: (json['amount'] as num?)?.toDouble(),
      totalAmount: (json['totalAmount'] as num?)?.toDouble(),
      ledgerTypeId: (json['ledgerTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      createMovieShootDayOnTheFly: json['createMovieShootDayOnTheFly'] as bool?,
      movieShootDayNumber: (json['movieShootDayNumber'] as num?)?.toInt(),
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      movieShootDaySummary: json['movieShootDaySummary'] as String?,
      notes: json['notes'] as String?,
    );

Map<String, dynamic> _$MovieShootDayExpenseUpdateModelToJson(
        MovieShootDayExpenseUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayExpenseCode': instance.movieShootDayExpenseCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedExpensePaymentStatusTypeId':
          instance.predefinedExpensePaymentStatusTypeId,
      'predefinedExpensePaymentTypeId': instance.predefinedExpensePaymentTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieVendorId': instance.movieVendorId,
      'movieLocationId': instance.movieLocationId,
      'expenseEntryName': instance.expenseEntryName,
      'description': instance.description,
      'chequeNumber': instance.chequeNumber,
      'chequeIssuedByBankName': instance.chequeIssuedByBankName,
      'chequeIssuedByBankBranchName': instance.chequeIssuedByBankBranchName,
      'bankTransferFromBankName': instance.bankTransferFromBankName,
      'bankTransferFromBankBranchName': instance.bankTransferFromBankBranchName,
      'bankTransferToBankName': instance.bankTransferToBankName,
      'bankTransferToBankBranchName': instance.bankTransferToBankBranchName,
      'bankTransferFromAccountNumber': instance.bankTransferFromAccountNumber,
      'bankTransferToAccountNumber': instance.bankTransferToAccountNumber,
      'amountIssuedDate': instance.amountIssuedDate?.toIso8601String(),
      'quantity': instance.quantity,
      'amount': instance.amount,
      'totalAmount': instance.totalAmount,
      'ledgerTypeId': instance.ledgerTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'createMovieShootDayOnTheFly': instance.createMovieShootDayOnTheFly,
      'movieShootDayNumber': instance.movieShootDayNumber,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'movieShootDaySummary': instance.movieShootDaySummary,
      'notes': instance.notes,
    };

MovieShootDayForCallSheetModel _$MovieShootDayForCallSheetModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayForCallSheetModel(
      movieShootDay: json['movieShootDay'] == null
          ? null
          : MovieShootDayModel.fromJson(
              json['movieShootDay'] as Map<String, dynamic>),
      artists: (json['artists'] as List<dynamic>?)
              ?.map((e) =>
                  MovieShootDayArtistModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      technicians: (json['technicians'] as List<dynamic>?)
              ?.map((e) => MovieShootDayTechnicianModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      equipments: (json['equipments'] as List<dynamic>?)
              ?.map((e) => MovieShootDayEquipmentModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      requirements: (json['requirements'] as List<dynamic>?)
              ?.map((e) => MovieShootDayRequirementModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      scenes: (json['scenes'] as List<dynamic>?)
              ?.map((e) => MovieShootDaySceneForCallSheetModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      sceneLocations: (json['sceneLocations'] as List<dynamic>?)
              ?.map(
                  (e) => MovieLocationModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieSetting: json['movieSetting'] == null
          ? null
          : MovieSettingModel.fromJson(
              json['movieSetting'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$MovieShootDayForCallSheetModelToJson(
        MovieShootDayForCallSheetModel instance) =>
    <String, dynamic>{
      'movieShootDay': instance.movieShootDay?.toJson(),
      'artists': instance.artists?.map((e) => e.toJson()).toList(),
      'technicians': instance.technicians?.map((e) => e.toJson()).toList(),
      'equipments': instance.equipments?.map((e) => e.toJson()).toList(),
      'requirements': instance.requirements?.map((e) => e.toJson()).toList(),
      'scenes': instance.scenes?.map((e) => e.toJson()).toList(),
      'sceneLocations':
          instance.sceneLocations?.map((e) => e.toJson()).toList(),
      'movieSetting': instance.movieSetting?.toJson(),
    };

MovieShootDayForCallSheetModelReturnModel
    _$MovieShootDayForCallSheetModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayForCallSheetModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayForCallSheetModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayForCallSheetModelReturnModelToJson(
        MovieShootDayForCallSheetModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayImportWithAllDetailsModel
    _$MovieShootDayImportWithAllDetailsModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayImportWithAllDetailsModel(
          movieShootDay: json['movieShootDay'] == null
              ? null
              : MovieShootDayCreateModel.fromJson(
                  json['movieShootDay'] as Map<String, dynamic>),
          movieShootDayArtists: (json['movieShootDayArtists'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayArtistCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieShootDayTechnicians:
              (json['movieShootDayTechnicians'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayTechnicianCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          movieShootDayEquipments:
              (json['movieShootDayEquipments'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayEquipmentCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          movieShootDayProperties:
              (json['movieShootDayProperties'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayPropertyCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          movieShootDayVendors: (json['movieShootDayVendors'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayVendorCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieShootDayRequirements:
              (json['movieShootDayRequirements'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayRequirementCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          movieShootDayScenes: (json['movieShootDayScenes'] as List<dynamic>?)
                  ?.map((e) => MovieShootDaySceneCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieShootDayBudgets: (json['movieShootDayBudgets'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayBudgetCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieShootDayExpenses:
              (json['movieShootDayExpenses'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayExpenseCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          noteAttachments: (json['noteAttachments'] as List<dynamic>?)
                  ?.map((e) => NoteAttachmentCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
        );

Map<String, dynamic> _$MovieShootDayImportWithAllDetailsModelToJson(
        MovieShootDayImportWithAllDetailsModel instance) =>
    <String, dynamic>{
      'movieShootDay': instance.movieShootDay?.toJson(),
      'movieShootDayArtists':
          instance.movieShootDayArtists?.map((e) => e.toJson()).toList(),
      'movieShootDayTechnicians':
          instance.movieShootDayTechnicians?.map((e) => e.toJson()).toList(),
      'movieShootDayEquipments':
          instance.movieShootDayEquipments?.map((e) => e.toJson()).toList(),
      'movieShootDayProperties':
          instance.movieShootDayProperties?.map((e) => e.toJson()).toList(),
      'movieShootDayVendors':
          instance.movieShootDayVendors?.map((e) => e.toJson()).toList(),
      'movieShootDayRequirements':
          instance.movieShootDayRequirements?.map((e) => e.toJson()).toList(),
      'movieShootDayScenes':
          instance.movieShootDayScenes?.map((e) => e.toJson()).toList(),
      'movieShootDayBudgets':
          instance.movieShootDayBudgets?.map((e) => e.toJson()).toList(),
      'movieShootDayExpenses':
          instance.movieShootDayExpenses?.map((e) => e.toJson()).toList(),
      'noteAttachments':
          instance.noteAttachments?.map((e) => e.toJson()).toList(),
    };

MovieShootDayModel _$MovieShootDayModelFromJson(Map<String, dynamic> json) =>
    MovieShootDayModel(
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      predefinedMovieShootDayTypeId:
          (json['predefinedMovieShootDayTypeId'] as num?)?.toInt(),
      predefinedMovieShootDayStatusTypeId:
          (json['predefinedMovieShootDayStatusTypeId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      dayNumber: (json['dayNumber'] as num?)?.toInt(),
      dateOfShoot: json['dateOfShoot'] == null
          ? null
          : DateTime.parse(json['dateOfShoot'] as String),
      preCallForHairAndMakupTime:
          (json['preCallForHairAndMakupTime'] as num?)?.toInt(),
      crewCallTime: (json['crewCallTime'] as num?)?.toInt(),
      shootCallTime: (json['shootCallTime'] as num?)?.toInt(),
      shiftStartTime: (json['shiftStartTime'] as num?)?.toInt(),
      shiftEndTime: (json['shiftEndTime'] as num?)?.toInt(),
      useDefaultTextInLeft: json['useDefaultTextInLeft'] as bool?,
      useDefaultTextInRight: json['useDefaultTextInRight'] as bool?,
      useDefaultHarassmentInfoText:
          json['useDefaultHarassmentInfoText'] as bool?,
      useDefaultRadioChannelText: json['useDefaultRadioChannelText'] as bool?,
      textInLeft: json['textInLeft'] as String?,
      textInRight: json['textInRight'] as String?,
      harassmentInfoText: json['harassmentInfoText'] as String?,
      radioChannelText: json['radioChannelText'] as String?,
      weatherTemperatureMinInCelsius:
          (json['weatherTemperatureMinInCelsius'] as num?)?.toDouble(),
      weatherTemperatureMaxCelsius:
          (json['weatherTemperatureMaxCelsius'] as num?)?.toDouble(),
      weatherForecast: json['weatherForecast'] as String?,
      sunriseTime: (json['sunriseTime'] as num?)?.toInt(),
      sunsetTime: (json['sunsetTime'] as num?)?.toInt(),
      goldenHourMorningStartTime:
          (json['goldenHourMorningStartTime'] as num?)?.toInt(),
      goldenHourEveningStartTime:
          (json['goldenHourEveningStartTime'] as num?)?.toInt(),
      goldenHourMorningEndTime:
          (json['goldenHourMorningEndTime'] as num?)?.toInt(),
      goldenHourEveningEndTime:
          (json['goldenHourEveningEndTime'] as num?)?.toInt(),
      shootSummary: json['shootSummary'] as String?,
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      budget: (json['budget'] as num?)?.toDouble(),
      actual: (json['actual'] as num?)?.toDouble(),
      isBudgetLocked: json['isBudgetLocked'] as bool?,
      isCallSheetLocked: json['isCallSheetLocked'] as bool?,
      predefinedMovieApprovalStatusForCallsheetTypeId:
          (json['predefinedMovieApprovalStatusForCallsheetTypeId'] as num?)
              ?.toInt(),
      predefinedMovieApprovalStatusForBudgetTypeId:
          (json['predefinedMovieApprovalStatusForBudgetTypeId'] as num?)
              ?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      predefinedMovieApprovalStatusForCallsheetTypeName:
          json['predefinedMovieApprovalStatusForCallsheetTypeName'] as String?,
      predefinedMovieApprovalStatusForBudgetTypeName:
          json['predefinedMovieApprovalStatusForBudgetTypeName'] as String?,
      predefinedMovieShootDayStatusTypeName:
          json['predefinedMovieShootDayStatusTypeName'] as String?,
      movieBudgetDivisionName: json['movieBudgetDivisionName'] as String?,
      predefinedMovieShootDayTypeName:
          json['predefinedMovieShootDayTypeName'] as String?,
      predefinedLocationTypeName: json['predefinedLocationTypeName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      predefinedLocationTypeId:
          (json['predefinedLocationTypeId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieBudgetDivisionCode: json['movieBudgetDivisionCode'] as String?,
      movieLocationCode: json['movieLocationCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayModelToJson(MovieShootDayModel instance) =>
    <String, dynamic>{
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieId': instance.movieId,
      'predefinedMovieShootDayTypeId': instance.predefinedMovieShootDayTypeId,
      'predefinedMovieShootDayStatusTypeId':
          instance.predefinedMovieShootDayStatusTypeId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'dayNumber': instance.dayNumber,
      'dateOfShoot': instance.dateOfShoot?.toIso8601String(),
      'preCallForHairAndMakupTime': instance.preCallForHairAndMakupTime,
      'crewCallTime': instance.crewCallTime,
      'shootCallTime': instance.shootCallTime,
      'shiftStartTime': instance.shiftStartTime,
      'shiftEndTime': instance.shiftEndTime,
      'useDefaultTextInLeft': instance.useDefaultTextInLeft,
      'useDefaultTextInRight': instance.useDefaultTextInRight,
      'useDefaultHarassmentInfoText': instance.useDefaultHarassmentInfoText,
      'useDefaultRadioChannelText': instance.useDefaultRadioChannelText,
      'textInLeft': instance.textInLeft,
      'textInRight': instance.textInRight,
      'harassmentInfoText': instance.harassmentInfoText,
      'radioChannelText': instance.radioChannelText,
      'weatherTemperatureMinInCelsius': instance.weatherTemperatureMinInCelsius,
      'weatherTemperatureMaxCelsius': instance.weatherTemperatureMaxCelsius,
      'weatherForecast': instance.weatherForecast,
      'sunriseTime': instance.sunriseTime,
      'sunsetTime': instance.sunsetTime,
      'goldenHourMorningStartTime': instance.goldenHourMorningStartTime,
      'goldenHourEveningStartTime': instance.goldenHourEveningStartTime,
      'goldenHourMorningEndTime': instance.goldenHourMorningEndTime,
      'goldenHourEveningEndTime': instance.goldenHourEveningEndTime,
      'shootSummary': instance.shootSummary,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'budget': instance.budget,
      'actual': instance.actual,
      'isBudgetLocked': instance.isBudgetLocked,
      'isCallSheetLocked': instance.isCallSheetLocked,
      'predefinedMovieApprovalStatusForCallsheetTypeId':
          instance.predefinedMovieApprovalStatusForCallsheetTypeId,
      'predefinedMovieApprovalStatusForBudgetTypeId':
          instance.predefinedMovieApprovalStatusForBudgetTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'predefinedMovieApprovalStatusForCallsheetTypeName':
          instance.predefinedMovieApprovalStatusForCallsheetTypeName,
      'predefinedMovieApprovalStatusForBudgetTypeName':
          instance.predefinedMovieApprovalStatusForBudgetTypeName,
      'predefinedMovieShootDayStatusTypeName':
          instance.predefinedMovieShootDayStatusTypeName,
      'movieBudgetDivisionName': instance.movieBudgetDivisionName,
      'predefinedMovieShootDayTypeName':
          instance.predefinedMovieShootDayTypeName,
      'predefinedLocationTypeName': instance.predefinedLocationTypeName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'predefinedLocationTypeId': instance.predefinedLocationTypeId,
      'movieLocationName': instance.movieLocationName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieBudgetDivisionCode': instance.movieBudgetDivisionCode,
      'movieLocationCode': instance.movieLocationCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayModelReturnListModel _$MovieShootDayModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => MovieShootDayModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayModelReturnListModelToJson(
        MovieShootDayModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayModelReturnModel _$MovieShootDayModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieShootDayModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayModelReturnModelToJson(
        MovieShootDayModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayPaymentStatusModel _$MovieShootDayPaymentStatusModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayPaymentStatusModel(
      movieId: (json['movieId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      dayNumber: (json['dayNumber'] as num?)?.toInt(),
      predefinedContractForTypeId:
          (json['predefinedContractForTypeId'] as num?)?.toInt(),
      predefinedContractForTypeName:
          json['predefinedContractForTypeName'] as String?,
      movieArtistFirstName: json['movieArtistFirstName'] as String?,
      movieArtistLastName: json['movieArtistLastName'] as String?,
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayArtistName: json['movieShootDayArtistName'] as String?,
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieArtistAdditionalCount:
          (json['movieArtistAdditionalCount'] as num?)?.toInt(),
      movieTechnicianFirstName: json['movieTechnicianFirstName'] as String?,
      movieTechnicianLastName: json['movieTechnicianLastName'] as String?,
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieShootDayTechnicianName:
          json['movieShootDayTechnicianName'] as String?,
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieTechnicianAdditionalCount:
          (json['movieTechnicianAdditionalCount'] as num?)?.toInt(),
      movieEquipmentName: json['movieEquipmentName'] as String?,
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayEquipmentName: json['movieShootDayEquipmentName'] as String?,
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieEquipmentAdditionalCount:
          (json['movieEquipmentAdditionalCount'] as num?)?.toInt(),
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDayVendorName: json['movieShootDayVendorName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieVendorAdditionalCount:
          (json['movieVendorAdditionalCount'] as num?)?.toInt(),
      moviePropertyName: json['moviePropertyName'] as String?,
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayPropertyName: json['movieShootDayPropertyName'] as String?,
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      moviePropertyAdditionalCount:
          (json['moviePropertyAdditionalCount'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeName:
          json['predefinedPaymentStatusTypeName'] as String?,
    );

Map<String, dynamic> _$MovieShootDayPaymentStatusModelToJson(
        MovieShootDayPaymentStatusModel instance) =>
    <String, dynamic>{
      'movieId': instance.movieId,
      'movieShootDayId': instance.movieShootDayId,
      'dayNumber': instance.dayNumber,
      'predefinedContractForTypeId': instance.predefinedContractForTypeId,
      'predefinedContractForTypeName': instance.predefinedContractForTypeName,
      'movieArtistFirstName': instance.movieArtistFirstName,
      'movieArtistLastName': instance.movieArtistLastName,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayArtistName': instance.movieShootDayArtistName,
      'movieArtistId': instance.movieArtistId,
      'movieArtistAdditionalCount': instance.movieArtistAdditionalCount,
      'movieTechnicianFirstName': instance.movieTechnicianFirstName,
      'movieTechnicianLastName': instance.movieTechnicianLastName,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieShootDayTechnicianName': instance.movieShootDayTechnicianName,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieTechnicianAdditionalCount': instance.movieTechnicianAdditionalCount,
      'movieEquipmentName': instance.movieEquipmentName,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayEquipmentName': instance.movieShootDayEquipmentName,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieEquipmentAdditionalCount': instance.movieEquipmentAdditionalCount,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDayVendorName': instance.movieShootDayVendorName,
      'movieVendorName': instance.movieVendorName,
      'movieVendorId': instance.movieVendorId,
      'movieVendorAdditionalCount': instance.movieVendorAdditionalCount,
      'moviePropertyName': instance.moviePropertyName,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayPropertyName': instance.movieShootDayPropertyName,
      'moviePropertyId': instance.moviePropertyId,
      'moviePropertyAdditionalCount': instance.moviePropertyAdditionalCount,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'predefinedPaymentStatusTypeName':
          instance.predefinedPaymentStatusTypeName,
    };

MovieShootDayPaymentStatusModelReturnListModel
    _$MovieShootDayPaymentStatusModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayPaymentStatusModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayPaymentStatusModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayPaymentStatusModelReturnListModelToJson(
        MovieShootDayPaymentStatusModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayPropertyCreateModel _$MovieShootDayPropertyCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayPropertyCreateModel(
      movieShootDayPropertyCode: json['movieShootDayPropertyCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieShootDayPropertyName: json['movieShootDayPropertyName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      isAbsent: json['isAbsent'] as bool?,
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      createMoviePropertyOnTheFly: json['createMoviePropertyOnTheFly'] as bool?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayPropertyCreateModelToJson(
        MovieShootDayPropertyCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayPropertyCode': instance.movieShootDayPropertyCode,
      'movieShootDayId': instance.movieShootDayId,
      'moviePropertyId': instance.moviePropertyId,
      'movieShootDayPropertyName': instance.movieShootDayPropertyName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'isAbsent': instance.isAbsent,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'notes': instance.notes,
      'createMoviePropertyOnTheFly': instance.createMoviePropertyOnTheFly,
      'propertyId': instance.propertyId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayPropertyModel _$MovieShootDayPropertyModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayPropertyModel(
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayPropertyCode: json['movieShootDayPropertyCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieShootDayPropertyName: json['movieShootDayPropertyName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      isAbsent: json['isAbsent'] as bool?,
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeName:
          json['predefinedPhoneCallNotificationStatusTypeName'] as String?,
      predefinedEmailNotificationStatusTypeName:
          json['predefinedEmailNotificationStatusTypeName'] as String?,
      predefinedPushNotificationStatusTypeName:
          json['predefinedPushNotificationStatusTypeName'] as String?,
      predefinedSmsNotificationStatusTypeName:
          json['predefinedSmsNotificationStatusTypeName'] as String?,
      predefinedWhatsAppNotificationStatusTypeName:
          json['predefinedWhatsAppNotificationStatusTypeName'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyName: json['propertyName'] as String?,
      propertyCode: json['propertyCode'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      predefinedCallTimeValueTypeName:
          json['predefinedCallTimeValueTypeName'] as String?,
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      propertyTypeName: json['propertyTypeName'] as String?,
      propertyWorkPhone: json['propertyWorkPhone'] as String?,
      propertyCellPhone: json['propertyCellPhone'] as String?,
      propertyEmail: json['propertyEmail'] as String?,
      predefinedPaymentStatusTypeName:
          json['predefinedPaymentStatusTypeName'] as String?,
      notes: json['notes'] as String?,
      propertyGroupTypePosition:
          (json['propertyGroupTypePosition'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayPropertyModelToJson(
        MovieShootDayPropertyModel instance) =>
    <String, dynamic>{
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayPropertyCode': instance.movieShootDayPropertyCode,
      'movieShootDayId': instance.movieShootDayId,
      'moviePropertyId': instance.moviePropertyId,
      'movieShootDayPropertyName': instance.movieShootDayPropertyName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'isAbsent': instance.isAbsent,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedPhoneCallNotificationStatusTypeName':
          instance.predefinedPhoneCallNotificationStatusTypeName,
      'predefinedEmailNotificationStatusTypeName':
          instance.predefinedEmailNotificationStatusTypeName,
      'predefinedPushNotificationStatusTypeName':
          instance.predefinedPushNotificationStatusTypeName,
      'predefinedSmsNotificationStatusTypeName':
          instance.predefinedSmsNotificationStatusTypeName,
      'predefinedWhatsAppNotificationStatusTypeName':
          instance.predefinedWhatsAppNotificationStatusTypeName,
      'propertyId': instance.propertyId,
      'propertyName': instance.propertyName,
      'propertyCode': instance.propertyCode,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'predefinedCallTimeValueTypeName':
          instance.predefinedCallTimeValueTypeName,
      'propertyTypeId': instance.propertyTypeId,
      'propertyTypeName': instance.propertyTypeName,
      'propertyWorkPhone': instance.propertyWorkPhone,
      'propertyCellPhone': instance.propertyCellPhone,
      'propertyEmail': instance.propertyEmail,
      'predefinedPaymentStatusTypeName':
          instance.predefinedPaymentStatusTypeName,
      'notes': instance.notes,
      'propertyGroupTypePosition': instance.propertyGroupTypePosition,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayPropertyModelReturnListModel
    _$MovieShootDayPropertyModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayPropertyModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayPropertyModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayPropertyModelReturnListModelToJson(
        MovieShootDayPropertyModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayPropertyModelReturnModel
    _$MovieShootDayPropertyModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayPropertyModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayPropertyModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayPropertyModelReturnModelToJson(
        MovieShootDayPropertyModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayPropertyUpdateModel _$MovieShootDayPropertyUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayPropertyUpdateModel(
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayPropertyCode: json['movieShootDayPropertyCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieShootDayPropertyName: json['movieShootDayPropertyName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      isAbsent: json['isAbsent'] as bool?,
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      createMoviePropertyOnTheFly: json['createMoviePropertyOnTheFly'] as bool?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayPropertyUpdateModelToJson(
        MovieShootDayPropertyUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayPropertyCode': instance.movieShootDayPropertyCode,
      'movieShootDayId': instance.movieShootDayId,
      'moviePropertyId': instance.moviePropertyId,
      'movieShootDayPropertyName': instance.movieShootDayPropertyName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'isAbsent': instance.isAbsent,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'notes': instance.notes,
      'createMoviePropertyOnTheFly': instance.createMoviePropertyOnTheFly,
      'propertyId': instance.propertyId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayPropertyWithCompanyOrMoviePropertyCreateModel
    _$MovieShootDayPropertyWithCompanyOrMoviePropertyCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayPropertyWithCompanyOrMoviePropertyCreateModel(
          propertyCode: json['propertyCode'] as String?,
          propertyName: json['propertyName'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          specification: json['specification'] as String?,
          colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          isOwn: json['isOwn'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newPropertyRates: (json['newPropertyRates'] as List<dynamic>?)
                  ?.map((e) => PropertyRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          moviePropertyCode: json['moviePropertyCode'] as String?,
          propertyId: (json['propertyId'] as num?)?.toInt(),
          parentMoviePropertyId:
              (json['parentMoviePropertyId'] as num?)?.toInt(),
          moviePropertyName: json['moviePropertyName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieShootDayPropertyCode:
              json['movieShootDayPropertyCode'] as String?,
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieShootDayPropertyName:
              json['movieShootDayPropertyName'] as String?,
          callTime: (json['callTime'] as num?)?.toInt(),
          predefinedCallTimeValueTypeId:
              (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
          additionalCount: (json['additionalCount'] as num?)?.toInt(),
          predefinedPhoneCallNotificationStatusTypeId:
              (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          phoneCallNotificationStartedDateTime:
              json['phoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationStartedDateTime'] as String),
          phoneCallNotificationCompletedDateTime:
              json['phoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationCompletedDateTime'] as String),
          predefinedEmailNotificationStatusTypeId:
              (json['predefinedEmailNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          emailNotificationStartedDateTime:
              json['emailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationStartedDateTime'] as String),
          emailNotificationCompletedDateTime:
              json['emailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationCompletedDateTime'] as String),
          predefinedSmsNotificationStatusTypeId:
              (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
          smsNotificationStartedDateTime:
              json['smsNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationStartedDateTime'] as String),
          smsNotificationCompletedDateTime:
              json['smsNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationCompletedDateTime'] as String),
          predefinedPushNotificationStatusTypeId:
              (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
          pushNotificationStartedDateTime:
              json['pushNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationStartedDateTime'] as String),
          pushNotificationCompletedDateTime:
              json['pushNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationCompletedDateTime'] as String),
          predefinedWhatsAppNotificationStatusTypeId:
              (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          whatsAppNotificationStartedDateTime:
              json['whatsAppNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationStartedDateTime'] as String),
          whatsAppNotificationCompletedDateTime:
              json['whatsAppNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationCompletedDateTime'] as String),
          inTime: (json['inTime'] as num?)?.toInt(),
          outTime: (json['outTime'] as num?)?.toInt(),
          notes: json['notes'] as String?,
          isAbsent: json['isAbsent'] as bool?,
          estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['preProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['productionStatusTypeId'] as num?)?.toInt(),
        );

Map<String,
    dynamic> _$MovieShootDayPropertyWithCompanyOrMoviePropertyCreateModelToJson(
        MovieShootDayPropertyWithCompanyOrMoviePropertyCreateModel instance) =>
    <String, dynamic>{
      'propertyCode': instance.propertyCode,
      'propertyName': instance.propertyName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'colorTypeId': instance.colorTypeId,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'propertyTypeId': instance.propertyTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newPropertyRates':
          instance.newPropertyRates?.map((e) => e.toJson()).toList(),
      'moviePropertyId': instance.moviePropertyId,
      'moviePropertyCode': instance.moviePropertyCode,
      'propertyId': instance.propertyId,
      'parentMoviePropertyId': instance.parentMoviePropertyId,
      'moviePropertyName': instance.moviePropertyName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'movieId': instance.movieId,
      'movieShootDayPropertyCode': instance.movieShootDayPropertyCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayPropertyName': instance.movieShootDayPropertyName,
      'callTime': instance.callTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'notes': instance.notes,
      'isAbsent': instance.isAbsent,
      'estimatedRate': instance.estimatedRate,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
    };

MovieShootDayRequirementCreateModel
    _$MovieShootDayRequirementCreateModelFromJson(Map<String, dynamic> json) =>
        MovieShootDayRequirementCreateModel(
          movieShootDayRequirementCode:
              json['movieShootDayRequirementCode'] as String?,
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          predefinedRequirementTypeId:
              (json['predefinedRequirementTypeId'] as num?)?.toInt(),
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
          technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
          equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
          vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
          propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['movieBudgetCategoryId'] as num?)?.toInt(),
          requirementText: json['requirementText'] as String?,
          copiedFromMovieSceneId:
              (json['copiedFromMovieSceneId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayRequirementCreateModelToJson(
        MovieShootDayRequirementCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayRequirementCode': instance.movieShootDayRequirementCode,
      'movieShootDayId': instance.movieShootDayId,
      'predefinedRequirementTypeId': instance.predefinedRequirementTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'artistTypeId': instance.artistTypeId,
      'technicianTypeId': instance.technicianTypeId,
      'equipmentTypeId': instance.equipmentTypeId,
      'vendorTypeId': instance.vendorTypeId,
      'propertyTypeId': instance.propertyTypeId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'requirementText': instance.requirementText,
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieShootDayRequirementModel _$MovieShootDayRequirementModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayRequirementModel(
      movieShootDayRequirementId:
          (json['movieShootDayRequirementId'] as num?)?.toInt(),
      movieShootDayRequirementCode:
          json['movieShootDayRequirementCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      predefinedRequirementTypeId:
          (json['predefinedRequirementTypeId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      requirementText: json['requirementText'] as String?,
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRequirementTypeName:
          json['predefinedRequirementTypeName'] as String?,
      movieBudgetCategoryName: json['movieBudgetCategoryName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      vendorTypeName: json['vendorTypeName'] as String?,
      equipmentTypeName: json['equipmentTypeName'] as String?,
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      equipmentName: json['equipmentName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorName: json['vendorName'] as String?,
      artistTypeName: json['artistTypeName'] as String?,
      artistId: (json['artistId'] as num?)?.toInt(),
      artistFirstName: json['artistFirstName'] as String?,
      artistLastName: json['artistLastName'] as String?,
      technicianTypeName: json['technicianTypeName'] as String?,
      technicianId: (json['technicianId'] as num?)?.toInt(),
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieArtistCode: json['movieArtistCode'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      moviePropertyName: json['moviePropertyName'] as String?,
      propertyTypeName: json['propertyTypeName'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyName: json['propertyName'] as String?,
      movieBudgetCategoryCode: json['movieBudgetCategoryCode'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayRequirementModelToJson(
        MovieShootDayRequirementModel instance) =>
    <String, dynamic>{
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayRequirementCode': instance.movieShootDayRequirementCode,
      'movieShootDayId': instance.movieShootDayId,
      'predefinedRequirementTypeId': instance.predefinedRequirementTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'artistTypeId': instance.artistTypeId,
      'technicianTypeId': instance.technicianTypeId,
      'equipmentTypeId': instance.equipmentTypeId,
      'vendorTypeId': instance.vendorTypeId,
      'propertyTypeId': instance.propertyTypeId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'requirementText': instance.requirementText,
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRequirementTypeName': instance.predefinedRequirementTypeName,
      'movieBudgetCategoryName': instance.movieBudgetCategoryName,
      'movieVendorName': instance.movieVendorName,
      'vendorTypeName': instance.vendorTypeName,
      'equipmentTypeName': instance.equipmentTypeName,
      'equipmentId': instance.equipmentId,
      'equipmentName': instance.equipmentName,
      'vendorId': instance.vendorId,
      'vendorName': instance.vendorName,
      'artistTypeName': instance.artistTypeName,
      'artistId': instance.artistId,
      'artistFirstName': instance.artistFirstName,
      'artistLastName': instance.artistLastName,
      'technicianTypeName': instance.technicianTypeName,
      'technicianId': instance.technicianId,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieArtistCode': instance.movieArtistCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieVendorCode': instance.movieVendorCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'moviePropertyName': instance.moviePropertyName,
      'propertyTypeName': instance.propertyTypeName,
      'propertyId': instance.propertyId,
      'propertyName': instance.propertyName,
      'movieBudgetCategoryCode': instance.movieBudgetCategoryCode,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayRequirementModelReturnListModel
    _$MovieShootDayRequirementModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayRequirementModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayRequirementModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayRequirementModelReturnListModelToJson(
        MovieShootDayRequirementModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayRequirementModelReturnModel
    _$MovieShootDayRequirementModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayRequirementModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayRequirementModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayRequirementModelReturnModelToJson(
        MovieShootDayRequirementModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayRequirementUpdateModel
    _$MovieShootDayRequirementUpdateModelFromJson(Map<String, dynamic> json) =>
        MovieShootDayRequirementUpdateModel(
          movieShootDayRequirementId:
              (json['movieShootDayRequirementId'] as num?)?.toInt(),
          movieShootDayRequirementCode:
              json['movieShootDayRequirementCode'] as String?,
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          predefinedRequirementTypeId:
              (json['predefinedRequirementTypeId'] as num?)?.toInt(),
          movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
          artistTypeId: (json['artistTypeId'] as num?)?.toInt(),
          technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
          equipmentTypeId: (json['equipmentTypeId'] as num?)?.toInt(),
          vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
          propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['movieBudgetCategoryId'] as num?)?.toInt(),
          requirementText: json['requirementText'] as String?,
          copiedFromMovieSceneId:
              (json['copiedFromMovieSceneId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayRequirementUpdateModelToJson(
        MovieShootDayRequirementUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayRequirementCode': instance.movieShootDayRequirementCode,
      'movieShootDayId': instance.movieShootDayId,
      'predefinedRequirementTypeId': instance.predefinedRequirementTypeId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'movieVendorId': instance.movieVendorId,
      'moviePropertyId': instance.moviePropertyId,
      'artistTypeId': instance.artistTypeId,
      'technicianTypeId': instance.technicianTypeId,
      'equipmentTypeId': instance.equipmentTypeId,
      'vendorTypeId': instance.vendorTypeId,
      'propertyTypeId': instance.propertyTypeId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'requirementText': instance.requirementText,
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieShootDayResourceModel _$MovieShootDayResourceModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayResourceModel(
      movieShootDayResourceId:
          (json['movieShootDayResourceId'] as num?)?.toInt(),
      predefinedMovieShootDayResourceTypeId:
          (json['predefinedMovieShootDayResourceTypeId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayResourceModelToJson(
        MovieShootDayResourceModel instance) =>
    <String, dynamic>{
      'movieShootDayResourceId': instance.movieShootDayResourceId,
      'predefinedMovieShootDayResourceTypeId':
          instance.predefinedMovieShootDayResourceTypeId,
    };

MovieShootDaySceneCreateModel _$MovieShootDaySceneCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDaySceneCreateModel(
      movieShootDaySceneCode: json['movieShootDaySceneCode'] as String?,
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      predefinedMovieShootDaySceneStatusTypeId:
          (json['predefinedMovieShootDaySceneStatusTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      saveWithDetails: json['saveWithDetails'] as bool?,
      newMovieArtistModels: (json['newMovieArtistModels'] as List<dynamic>?)
              ?.map((e) => MovieSceneArtistCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingMovieArtistModels:
          (json['existingMovieArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneArtistUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newTechnicianArtistModels:
          (json['newTechnicianArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneTechnicianCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      existingTechnicianArtistModels:
          (json['existingTechnicianArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneTechnicianUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newEquipmentArtistModels:
          (json['newEquipmentArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneEquipmentCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      existingEquipmentArtistModels:
          (json['existingEquipmentArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneEquipmentUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newRequirementArtistModels:
          (json['newRequirementArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneRequirementCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      existingRequirementArtistModels:
          (json['existingRequirementArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneRequirementUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieShootDaySceneCreateModelToJson(
        MovieShootDaySceneCreateModel instance) =>
    <String, dynamic>{
      'movieShootDaySceneCode': instance.movieShootDaySceneCode,
      'movieSceneId': instance.movieSceneId,
      'movieShootDayId': instance.movieShootDayId,
      'movieUnitId': instance.movieUnitId,
      'predefinedMovieShootDaySceneStatusTypeId':
          instance.predefinedMovieShootDaySceneStatusTypeId,
      'movieId': instance.movieId,
      'movieLocationId': instance.movieLocationId,
      'companyId': instance.companyId,
      'saveWithDetails': instance.saveWithDetails,
      'newMovieArtistModels':
          instance.newMovieArtistModels?.map((e) => e.toJson()).toList(),
      'existingMovieArtistModels':
          instance.existingMovieArtistModels?.map((e) => e.toJson()).toList(),
      'newTechnicianArtistModels':
          instance.newTechnicianArtistModels?.map((e) => e.toJson()).toList(),
      'existingTechnicianArtistModels': instance.existingTechnicianArtistModels
          ?.map((e) => e.toJson())
          .toList(),
      'newEquipmentArtistModels':
          instance.newEquipmentArtistModels?.map((e) => e.toJson()).toList(),
      'existingEquipmentArtistModels': instance.existingEquipmentArtistModels
          ?.map((e) => e.toJson())
          .toList(),
      'newRequirementArtistModels':
          instance.newRequirementArtistModels?.map((e) => e.toJson()).toList(),
      'existingRequirementArtistModels': instance
          .existingRequirementArtistModels
          ?.map((e) => e.toJson())
          .toList(),
    };

MovieShootDaySceneForCallSheetModel
    _$MovieShootDaySceneForCallSheetModelFromJson(Map<String, dynamic> json) =>
        MovieShootDaySceneForCallSheetModel(
          movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
          movieShootDaySceneCode: json['movieShootDaySceneCode'] as String?,
          movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
          predefinedMovieShootDaySceneStatusTypeId:
              (json['predefinedMovieShootDaySceneStatusTypeId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          movieLocationName: json['movieLocationName'] as String?,
          movieSceneCode: json['movieSceneCode'] as String?,
          movieUnitCode: json['movieUnitCode'] as String?,
          movieSceneSetup: json['movieSceneSetup'] as String?,
          movieUnitName: json['movieUnitName'] as String?,
          predefinedMovieShootDaySceneStatusTypeName:
              json['predefinedMovieShootDaySceneStatusTypeName'] as String?,
          movieSceneName: json['movieSceneName'] as String?,
          companyName: json['companyName'] as String?,
          companyCode: json['companyCode'] as String?,
          movieCode: json['movieCode'] as String?,
          movieShootDayCode: json['movieShootDayCode'] as String?,
          movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
          dateOfShoot: json['dateOfShoot'] == null
              ? null
              : DateTime.parse(json['dateOfShoot'] as String),
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
          artists: (json['artists'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieSceneArtistModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          technicians: (json['technicians'] as List<dynamic>?)
                  ?.map((e) => MovieSceneTechnicianModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          equipments: (json['equipments'] as List<dynamic>?)
                  ?.map((e) => MovieSceneEquipmentModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          requirements: (json['requirements'] as List<dynamic>?)
                  ?.map((e) => MovieSceneRequirementModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
        );

Map<String, dynamic> _$MovieShootDaySceneForCallSheetModelToJson(
        MovieShootDaySceneForCallSheetModel instance) =>
    <String, dynamic>{
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDaySceneCode': instance.movieShootDaySceneCode,
      'movieSceneId': instance.movieSceneId,
      'movieShootDayId': instance.movieShootDayId,
      'movieUnitId': instance.movieUnitId,
      'predefinedMovieShootDaySceneStatusTypeId':
          instance.predefinedMovieShootDaySceneStatusTypeId,
      'movieId': instance.movieId,
      'movieLocationId': instance.movieLocationId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieLocationName': instance.movieLocationName,
      'movieSceneCode': instance.movieSceneCode,
      'movieUnitCode': instance.movieUnitCode,
      'movieSceneSetup': instance.movieSceneSetup,
      'movieUnitName': instance.movieUnitName,
      'predefinedMovieShootDaySceneStatusTypeName':
          instance.predefinedMovieShootDaySceneStatusTypeName,
      'movieSceneName': instance.movieSceneName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'dateOfShoot': instance.dateOfShoot?.toIso8601String(),
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'artists': instance.artists?.map((e) => e.toJson()).toList(),
      'technicians': instance.technicians?.map((e) => e.toJson()).toList(),
      'equipments': instance.equipments?.map((e) => e.toJson()).toList(),
      'requirements': instance.requirements?.map((e) => e.toJson()).toList(),
    };

MovieShootDaySceneModel _$MovieShootDaySceneModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDaySceneModel(
      movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
      movieShootDaySceneCode: json['movieShootDaySceneCode'] as String?,
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      predefinedMovieShootDaySceneStatusTypeId:
          (json['predefinedMovieShootDaySceneStatusTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      movieSceneCode: json['movieSceneCode'] as String?,
      movieUnitCode: json['movieUnitCode'] as String?,
      movieSceneSetup: json['movieSceneSetup'] as String?,
      movieUnitName: json['movieUnitName'] as String?,
      predefinedMovieShootDaySceneStatusTypeName:
          json['predefinedMovieShootDaySceneStatusTypeName'] as String?,
      movieSceneName: json['movieSceneName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      dateOfShoot: json['dateOfShoot'] == null
          ? null
          : DateTime.parse(json['dateOfShoot'] as String),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDaySceneModelToJson(
        MovieShootDaySceneModel instance) =>
    <String, dynamic>{
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDaySceneCode': instance.movieShootDaySceneCode,
      'movieSceneId': instance.movieSceneId,
      'movieShootDayId': instance.movieShootDayId,
      'movieUnitId': instance.movieUnitId,
      'predefinedMovieShootDaySceneStatusTypeId':
          instance.predefinedMovieShootDaySceneStatusTypeId,
      'movieId': instance.movieId,
      'movieLocationId': instance.movieLocationId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieLocationName': instance.movieLocationName,
      'movieSceneCode': instance.movieSceneCode,
      'movieUnitCode': instance.movieUnitCode,
      'movieSceneSetup': instance.movieSceneSetup,
      'movieUnitName': instance.movieUnitName,
      'predefinedMovieShootDaySceneStatusTypeName':
          instance.predefinedMovieShootDaySceneStatusTypeName,
      'movieSceneName': instance.movieSceneName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'dateOfShoot': instance.dateOfShoot?.toIso8601String(),
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDaySceneModelReturnListModel
    _$MovieShootDaySceneModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDaySceneModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDaySceneModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDaySceneModelReturnListModelToJson(
        MovieShootDaySceneModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDaySceneModelReturnModel _$MovieShootDaySceneModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDaySceneModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieShootDaySceneModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDaySceneModelReturnModelToJson(
        MovieShootDaySceneModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDaySceneUpdateModel _$MovieShootDaySceneUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDaySceneUpdateModel(
      movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
      movieShootDaySceneCode: json['movieShootDaySceneCode'] as String?,
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      predefinedMovieShootDaySceneStatusTypeId:
          (json['predefinedMovieShootDaySceneStatusTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      saveWithDetails: json['saveWithDetails'] as bool?,
      newMovieArtistModels: (json['newMovieArtistModels'] as List<dynamic>?)
              ?.map((e) => MovieSceneArtistCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingMovieArtistModels:
          (json['existingMovieArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneArtistUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newTechnicianArtistModels:
          (json['newTechnicianArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneTechnicianCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      existingTechnicianArtistModels:
          (json['existingTechnicianArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneTechnicianUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newEquipmentArtistModels:
          (json['newEquipmentArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneEquipmentCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      existingEquipmentArtistModels:
          (json['existingEquipmentArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneEquipmentUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newRequirementArtistModels:
          (json['newRequirementArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneRequirementCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      existingRequirementArtistModels:
          (json['existingRequirementArtistModels'] as List<dynamic>?)
                  ?.map((e) => MovieSceneRequirementUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieShootDaySceneUpdateModelToJson(
        MovieShootDaySceneUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDaySceneCode': instance.movieShootDaySceneCode,
      'movieSceneId': instance.movieSceneId,
      'movieShootDayId': instance.movieShootDayId,
      'movieUnitId': instance.movieUnitId,
      'predefinedMovieShootDaySceneStatusTypeId':
          instance.predefinedMovieShootDaySceneStatusTypeId,
      'movieId': instance.movieId,
      'movieLocationId': instance.movieLocationId,
      'companyId': instance.companyId,
      'saveWithDetails': instance.saveWithDetails,
      'newMovieArtistModels':
          instance.newMovieArtistModels?.map((e) => e.toJson()).toList(),
      'existingMovieArtistModels':
          instance.existingMovieArtistModels?.map((e) => e.toJson()).toList(),
      'newTechnicianArtistModels':
          instance.newTechnicianArtistModels?.map((e) => e.toJson()).toList(),
      'existingTechnicianArtistModels': instance.existingTechnicianArtistModels
          ?.map((e) => e.toJson())
          .toList(),
      'newEquipmentArtistModels':
          instance.newEquipmentArtistModels?.map((e) => e.toJson()).toList(),
      'existingEquipmentArtistModels': instance.existingEquipmentArtistModels
          ?.map((e) => e.toJson())
          .toList(),
      'newRequirementArtistModels':
          instance.newRequirementArtistModels?.map((e) => e.toJson()).toList(),
      'existingRequirementArtistModels': instance
          .existingRequirementArtistModels
          ?.map((e) => e.toJson())
          .toList(),
    };

MovieShootDayScenesCreateWithMovieScenesModel
    _$MovieShootDayScenesCreateWithMovieScenesModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayScenesCreateWithMovieScenesModel(
          movieShootDayIds: (json['movieShootDayIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
          movieSceneIds: (json['movieSceneIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
        );

Map<String, dynamic> _$MovieShootDayScenesCreateWithMovieScenesModelToJson(
        MovieShootDayScenesCreateWithMovieScenesModel instance) =>
    <String, dynamic>{
      'movieShootDayIds': instance.movieShootDayIds,
      'movieSceneIds': instance.movieSceneIds,
    };

MovieShootDayScriptFileCreateModel _$MovieShootDayScriptFileCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayScriptFileCreateModel(
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieScriptFileId: (json['movieScriptFileId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      additionalDescription: json['additionalDescription'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayScriptFileCreateModelToJson(
        MovieShootDayScriptFileCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayId': instance.movieShootDayId,
      'movieScriptFileId': instance.movieScriptFileId,
      'movieId': instance.movieId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'additionalDescription': instance.additionalDescription,
      'companyId': instance.companyId,
    };

MovieShootDayScriptFileModel _$MovieShootDayScriptFileModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayScriptFileModel(
      movieShootDayScriptFileId:
          (json['movieShootDayScriptFileId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieScriptFileId: (json['movieScriptFileId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      additionalDescription: json['additionalDescription'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieArtistName: json['movieArtistName'] as String?,
      movieTechnicianName: json['movieTechnicianName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayScriptFileModelToJson(
        MovieShootDayScriptFileModel instance) =>
    <String, dynamic>{
      'movieShootDayScriptFileId': instance.movieShootDayScriptFileId,
      'movieShootDayId': instance.movieShootDayId,
      'movieScriptFileId': instance.movieScriptFileId,
      'movieId': instance.movieId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'additionalDescription': instance.additionalDescription,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieArtistName': instance.movieArtistName,
      'movieTechnicianName': instance.movieTechnicianName,
      'movieVendorName': instance.movieVendorName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayScriptFileModelReturnListModel
    _$MovieShootDayScriptFileModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayScriptFileModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayScriptFileModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayScriptFileModelReturnListModelToJson(
        MovieShootDayScriptFileModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayScriptFileModelReturnModel
    _$MovieShootDayScriptFileModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayScriptFileModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayScriptFileModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayScriptFileModelReturnModelToJson(
        MovieShootDayScriptFileModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayScriptFileUpdateModel _$MovieShootDayScriptFileUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayScriptFileUpdateModel(
      movieShootDayScriptFileId:
          (json['movieShootDayScriptFileId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieScriptFileId: (json['movieScriptFileId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      additionalDescription: json['additionalDescription'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayScriptFileUpdateModelToJson(
        MovieShootDayScriptFileUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayScriptFileId': instance.movieShootDayScriptFileId,
      'movieShootDayId': instance.movieShootDayId,
      'movieScriptFileId': instance.movieScriptFileId,
      'movieId': instance.movieId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieVendorId': instance.movieVendorId,
      'additionalDescription': instance.additionalDescription,
      'companyId': instance.companyId,
    };

MovieShootDaySummaryModel _$MovieShootDaySummaryModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDaySummaryModel(
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      predefinedMovieShootDayTypeId:
          (json['predefinedMovieShootDayTypeId'] as num?)?.toInt(),
      predefinedMovieShootDayStatusTypeId:
          (json['predefinedMovieShootDayStatusTypeId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      dayNumber: (json['dayNumber'] as num?)?.toInt(),
      dateOfShoot: json['dateOfShoot'] == null
          ? null
          : DateTime.parse(json['dateOfShoot'] as String),
      preCallForHairAndMakupTime:
          (json['preCallForHairAndMakupTime'] as num?)?.toInt(),
      crewCallTime: (json['crewCallTime'] as num?)?.toInt(),
      shootCallTime: (json['shootCallTime'] as num?)?.toInt(),
      shiftStartTime: (json['shiftStartTime'] as num?)?.toInt(),
      shiftEndTime: (json['shiftEndTime'] as num?)?.toInt(),
      useDefaultTextInLeft: json['useDefaultTextInLeft'] as bool?,
      useDefaultTextInRight: json['useDefaultTextInRight'] as bool?,
      useDefaultHarassmentInfoText:
          json['useDefaultHarassmentInfoText'] as bool?,
      useDefaultRadioChannelText: json['useDefaultRadioChannelText'] as bool?,
      textInLeft: json['textInLeft'] as String?,
      textInRight: json['textInRight'] as String?,
      harassmentInfoText: json['harassmentInfoText'] as String?,
      radioChannelText: json['radioChannelText'] as String?,
      weatherTemperatureMinInCelsius:
          (json['weatherTemperatureMinInCelsius'] as num?)?.toDouble(),
      weatherTemperatureMaxCelsius:
          (json['weatherTemperatureMaxCelsius'] as num?)?.toDouble(),
      weatherForecast: json['weatherForecast'] as String?,
      sunriseTime: (json['sunriseTime'] as num?)?.toInt(),
      sunsetTime: (json['sunsetTime'] as num?)?.toInt(),
      goldenHourMorningStartTime:
          (json['goldenHourMorningStartTime'] as num?)?.toInt(),
      goldenHourEveningStartTime:
          (json['goldenHourEveningStartTime'] as num?)?.toInt(),
      goldenHourMorningEndTime:
          (json['goldenHourMorningEndTime'] as num?)?.toInt(),
      goldenHourEveningEndTime:
          (json['goldenHourEveningEndTime'] as num?)?.toInt(),
      shootSummary: json['shootSummary'] as String?,
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      budget: (json['budget'] as num?)?.toDouble(),
      actual: (json['actual'] as num?)?.toDouble(),
      isBudgetLocked: json['isBudgetLocked'] as bool?,
      isCallSheetLocked: json['isCallSheetLocked'] as bool?,
      predefinedMovieApprovalStatusForCallsheetTypeId:
          (json['predefinedMovieApprovalStatusForCallsheetTypeId'] as num?)
              ?.toInt(),
      predefinedMovieApprovalStatusForBudgetTypeId:
          (json['predefinedMovieApprovalStatusForBudgetTypeId'] as num?)
              ?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      predefinedMovieApprovalStatusForCallsheetTypeName:
          json['predefinedMovieApprovalStatusForCallsheetTypeName'] as String?,
      predefinedMovieApprovalStatusForBudgetTypeName:
          json['predefinedMovieApprovalStatusForBudgetTypeName'] as String?,
      predefinedMovieShootDayStatusTypeName:
          json['predefinedMovieShootDayStatusTypeName'] as String?,
      movieBudgetDivisionName: json['movieBudgetDivisionName'] as String?,
      predefinedMovieShootDayTypeName:
          json['predefinedMovieShootDayTypeName'] as String?,
      predefinedLocationTypeName: json['predefinedLocationTypeName'] as String?,
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      predefinedLocationTypeId:
          (json['predefinedLocationTypeId'] as num?)?.toInt(),
      movieLocationName: json['movieLocationName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieBudgetDivisionCode: json['movieBudgetDivisionCode'] as String?,
      movieLocationCode: json['movieLocationCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      totalMovieShootDayBudgetAmount:
          (json['totalMovieShootDayBudgetAmount'] as num?)?.toDouble(),
      totalMovieShootDayExpenseAmount:
          (json['totalMovieShootDayExpenseAmount'] as num?)?.toDouble(),
      totalMovieShootDayPaidAmount:
          (json['totalMovieShootDayPaidAmount'] as num?)?.toDouble(),
      movieExpenseSummaryForAllMovieBudgetCategoryTypes: (json[
                      'movieExpenseSummaryForAllMovieBudgetCategoryTypes']
                  as List<dynamic>?)
              ?.map((e) =>
                  MovieBudgetExpenseSummaryForAllMovieBudgetCategoryTypeModel
                      .fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieScenes: (json['movieScenes'] as List<dynamic>?)
              ?.map((e) => MovieSceneModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieShootDayExpenseNoteAttachments:
          (json['movieShootDayExpenseNoteAttachments'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayExpenseNoteAttachmentModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      movieBudgetCategoryNoteAttachments:
          (json['movieBudgetCategoryNoteAttachments'] as List<dynamic>?)
                  ?.map((e) => MovieBudgetCategoryNoteAttachmentModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      movieShootDayAttendanceStatuses:
          (json['movieShootDayAttendanceStatuses'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayAttendanceStatusModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      movieCommitmentTasks: (json['movieCommitmentTasks'] as List<dynamic>?)
              ?.map((e) =>
                  MovieCommitmentTaskModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieShootDaySummaryModelToJson(
        MovieShootDaySummaryModel instance) =>
    <String, dynamic>{
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieId': instance.movieId,
      'predefinedMovieShootDayTypeId': instance.predefinedMovieShootDayTypeId,
      'predefinedMovieShootDayStatusTypeId':
          instance.predefinedMovieShootDayStatusTypeId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'dayNumber': instance.dayNumber,
      'dateOfShoot': instance.dateOfShoot?.toIso8601String(),
      'preCallForHairAndMakupTime': instance.preCallForHairAndMakupTime,
      'crewCallTime': instance.crewCallTime,
      'shootCallTime': instance.shootCallTime,
      'shiftStartTime': instance.shiftStartTime,
      'shiftEndTime': instance.shiftEndTime,
      'useDefaultTextInLeft': instance.useDefaultTextInLeft,
      'useDefaultTextInRight': instance.useDefaultTextInRight,
      'useDefaultHarassmentInfoText': instance.useDefaultHarassmentInfoText,
      'useDefaultRadioChannelText': instance.useDefaultRadioChannelText,
      'textInLeft': instance.textInLeft,
      'textInRight': instance.textInRight,
      'harassmentInfoText': instance.harassmentInfoText,
      'radioChannelText': instance.radioChannelText,
      'weatherTemperatureMinInCelsius': instance.weatherTemperatureMinInCelsius,
      'weatherTemperatureMaxCelsius': instance.weatherTemperatureMaxCelsius,
      'weatherForecast': instance.weatherForecast,
      'sunriseTime': instance.sunriseTime,
      'sunsetTime': instance.sunsetTime,
      'goldenHourMorningStartTime': instance.goldenHourMorningStartTime,
      'goldenHourEveningStartTime': instance.goldenHourEveningStartTime,
      'goldenHourMorningEndTime': instance.goldenHourMorningEndTime,
      'goldenHourEveningEndTime': instance.goldenHourEveningEndTime,
      'shootSummary': instance.shootSummary,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'budget': instance.budget,
      'actual': instance.actual,
      'isBudgetLocked': instance.isBudgetLocked,
      'isCallSheetLocked': instance.isCallSheetLocked,
      'predefinedMovieApprovalStatusForCallsheetTypeId':
          instance.predefinedMovieApprovalStatusForCallsheetTypeId,
      'predefinedMovieApprovalStatusForBudgetTypeId':
          instance.predefinedMovieApprovalStatusForBudgetTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'predefinedMovieApprovalStatusForCallsheetTypeName':
          instance.predefinedMovieApprovalStatusForCallsheetTypeName,
      'predefinedMovieApprovalStatusForBudgetTypeName':
          instance.predefinedMovieApprovalStatusForBudgetTypeName,
      'predefinedMovieShootDayStatusTypeName':
          instance.predefinedMovieShootDayStatusTypeName,
      'movieBudgetDivisionName': instance.movieBudgetDivisionName,
      'predefinedMovieShootDayTypeName':
          instance.predefinedMovieShootDayTypeName,
      'predefinedLocationTypeName': instance.predefinedLocationTypeName,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'predefinedLocationTypeId': instance.predefinedLocationTypeId,
      'movieLocationName': instance.movieLocationName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieBudgetDivisionCode': instance.movieBudgetDivisionCode,
      'movieLocationCode': instance.movieLocationCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'totalMovieShootDayBudgetAmount': instance.totalMovieShootDayBudgetAmount,
      'totalMovieShootDayExpenseAmount':
          instance.totalMovieShootDayExpenseAmount,
      'totalMovieShootDayPaidAmount': instance.totalMovieShootDayPaidAmount,
      'movieExpenseSummaryForAllMovieBudgetCategoryTypes': instance
          .movieExpenseSummaryForAllMovieBudgetCategoryTypes
          ?.map((e) => e.toJson())
          .toList(),
      'movieScenes': instance.movieScenes?.map((e) => e.toJson()).toList(),
      'movieShootDayExpenseNoteAttachments': instance
          .movieShootDayExpenseNoteAttachments
          ?.map((e) => e.toJson())
          .toList(),
      'movieBudgetCategoryNoteAttachments': instance
          .movieBudgetCategoryNoteAttachments
          ?.map((e) => e.toJson())
          .toList(),
      'movieShootDayAttendanceStatuses': instance
          .movieShootDayAttendanceStatuses
          ?.map((e) => e.toJson())
          .toList(),
      'movieCommitmentTasks':
          instance.movieCommitmentTasks?.map((e) => e.toJson()).toList(),
    };

MovieShootDaySummaryModelReturnModel
    _$MovieShootDaySummaryModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieShootDaySummaryModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDaySummaryModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDaySummaryModelReturnModelToJson(
        MovieShootDaySummaryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDaySummarySessionCreateModel
    _$MovieShootDaySummarySessionCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDaySummarySessionCreateModel(
          companyId: (json['companyId'] as num?)?.toInt(),
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          jobId: (json['jobId'] as num?)?.toInt(),
          movieShootDaySummaryJson: json['movieShootDaySummaryJson'] as String?,
        );

Map<String, dynamic> _$MovieShootDaySummarySessionCreateModelToJson(
        MovieShootDaySummarySessionCreateModel instance) =>
    <String, dynamic>{
      'companyId': instance.companyId,
      'movieShootDayId': instance.movieShootDayId,
      'jobId': instance.jobId,
      'movieShootDaySummaryJson': instance.movieShootDaySummaryJson,
    };

MovieShootDaySummarySessionModel _$MovieShootDaySummarySessionModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDaySummarySessionModel(
      movieShootDaySummarySessionId:
          (json['movieShootDaySummarySessionId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      jobId: (json['jobId'] as num?)?.toInt(),
      movieShootDaySummaryJson: json['movieShootDaySummaryJson'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      jobName: json['jobName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDaySummarySessionModelToJson(
        MovieShootDaySummarySessionModel instance) =>
    <String, dynamic>{
      'movieShootDaySummarySessionId': instance.movieShootDaySummarySessionId,
      'companyId': instance.companyId,
      'movieShootDayId': instance.movieShootDayId,
      'jobId': instance.jobId,
      'movieShootDaySummaryJson': instance.movieShootDaySummaryJson,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'jobName': instance.jobName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDaySummarySessionModelReturnListModel
    _$MovieShootDaySummarySessionModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDaySummarySessionModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDaySummarySessionModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDaySummarySessionModelReturnListModelToJson(
        MovieShootDaySummarySessionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDaySummarySessionModelReturnModel
    _$MovieShootDaySummarySessionModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDaySummarySessionModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDaySummarySessionModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDaySummarySessionModelReturnModelToJson(
        MovieShootDaySummarySessionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDaySummarySessionUpdateModel
    _$MovieShootDaySummarySessionUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDaySummarySessionUpdateModel(
          movieShootDaySummarySessionId:
              (json['movieShootDaySummarySessionId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          jobId: (json['jobId'] as num?)?.toInt(),
          movieShootDaySummaryJson: json['movieShootDaySummaryJson'] as String?,
        );

Map<String, dynamic> _$MovieShootDaySummarySessionUpdateModelToJson(
        MovieShootDaySummarySessionUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDaySummarySessionId': instance.movieShootDaySummarySessionId,
      'companyId': instance.companyId,
      'movieShootDayId': instance.movieShootDayId,
      'jobId': instance.jobId,
      'movieShootDaySummaryJson': instance.movieShootDaySummaryJson,
    };

MovieShootDayTechnicianCreateModel _$MovieShootDayTechnicianCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayTechnicianCreateModel(
      movieShootDayTechnicianCode:
          json['movieShootDayTechnicianCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieShootDayTechnicianName:
          json['movieShootDayTechnicianName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      notes: json['notes'] as String?,
      createMovieTechnicianOnTheFly:
          json['createMovieTechnicianOnTheFly'] as bool?,
      technicianId: (json['technicianId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayTechnicianCreateModelToJson(
        MovieShootDayTechnicianCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayTechnicianCode': instance.movieShootDayTechnicianCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieShootDayTechnicianName': instance.movieShootDayTechnicianName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'notes': instance.notes,
      'createMovieTechnicianOnTheFly': instance.createMovieTechnicianOnTheFly,
      'technicianId': instance.technicianId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayTechnicianModel _$MovieShootDayTechnicianModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayTechnicianModel(
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieShootDayTechnicianCode:
          json['movieShootDayTechnicianCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieShootDayTechnicianName:
          json['movieShootDayTechnicianName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeName:
          json['predefinedPhoneCallNotificationStatusTypeName'] as String?,
      predefinedEmailNotificationStatusTypeName:
          json['predefinedEmailNotificationStatusTypeName'] as String?,
      predefinedPushNotificationStatusTypeName:
          json['predefinedPushNotificationStatusTypeName'] as String?,
      predefinedSmsNotificationStatusTypeName:
          json['predefinedSmsNotificationStatusTypeName'] as String?,
      predefinedWhatsAppNotificationStatusTypeName:
          json['predefinedWhatsAppNotificationStatusTypeName'] as String?,
      predefinedPaymentStatusTypeName:
          json['predefinedPaymentStatusTypeName'] as String?,
      notes: json['notes'] as String?,
      technicianTypeName: json['technicianTypeName'] as String?,
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      predefinedBudgetDivisionTypeId:
          (json['predefinedBudgetDivisionTypeId'] as num?)?.toInt(),
      predefinedTechnicianTypeName:
          json['predefinedTechnicianTypeName'] as String?,
      predefinedTechnicianTypeId:
          (json['predefinedTechnicianTypeId'] as num?)?.toInt(),
      technicianGroupTypeId: (json['technicianGroupTypeId'] as num?)?.toInt(),
      technicianGroupTypeName: json['technicianGroupTypeName'] as String?,
      technicianGroupTypePosition:
          (json['technicianGroupTypePosition'] as num?)?.toInt(),
      predefinedTechnicianGroupTypeId:
          (json['predefinedTechnicianGroupTypeId'] as num?)?.toInt(),
      predefinedTechnicianGroupTypeName:
          json['predefinedTechnicianGroupTypeName'] as String?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      technicianWorkPhone: json['technicianWorkPhone'] as String?,
      technicianCellPhone: json['technicianCellPhone'] as String?,
      technicianEmail: json['technicianEmail'] as String?,
      technicianAssistantName: json['technicianAssistantName'] as String?,
      technicianAssistantPhone: json['technicianAssistantPhone'] as String?,
      technicianAssistantEmail: json['technicianAssistantEmail'] as String?,
      movieTechnicianName: json['movieTechnicianName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      predefinedCallTimeValueTypeName:
          json['predefinedCallTimeValueTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayTechnicianModelToJson(
        MovieShootDayTechnicianModel instance) =>
    <String, dynamic>{
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieShootDayTechnicianCode': instance.movieShootDayTechnicianCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieShootDayTechnicianName': instance.movieShootDayTechnicianName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedPhoneCallNotificationStatusTypeName':
          instance.predefinedPhoneCallNotificationStatusTypeName,
      'predefinedEmailNotificationStatusTypeName':
          instance.predefinedEmailNotificationStatusTypeName,
      'predefinedPushNotificationStatusTypeName':
          instance.predefinedPushNotificationStatusTypeName,
      'predefinedSmsNotificationStatusTypeName':
          instance.predefinedSmsNotificationStatusTypeName,
      'predefinedWhatsAppNotificationStatusTypeName':
          instance.predefinedWhatsAppNotificationStatusTypeName,
      'predefinedPaymentStatusTypeName':
          instance.predefinedPaymentStatusTypeName,
      'notes': instance.notes,
      'technicianTypeName': instance.technicianTypeName,
      'technicianTypeId': instance.technicianTypeId,
      'technicianId': instance.technicianId,
      'predefinedBudgetDivisionTypeId': instance.predefinedBudgetDivisionTypeId,
      'predefinedTechnicianTypeName': instance.predefinedTechnicianTypeName,
      'predefinedTechnicianTypeId': instance.predefinedTechnicianTypeId,
      'technicianGroupTypeId': instance.technicianGroupTypeId,
      'technicianGroupTypeName': instance.technicianGroupTypeName,
      'technicianGroupTypePosition': instance.technicianGroupTypePosition,
      'predefinedTechnicianGroupTypeId':
          instance.predefinedTechnicianGroupTypeId,
      'predefinedTechnicianGroupTypeName':
          instance.predefinedTechnicianGroupTypeName,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'technicianWorkPhone': instance.technicianWorkPhone,
      'technicianCellPhone': instance.technicianCellPhone,
      'technicianEmail': instance.technicianEmail,
      'technicianAssistantName': instance.technicianAssistantName,
      'technicianAssistantPhone': instance.technicianAssistantPhone,
      'technicianAssistantEmail': instance.technicianAssistantEmail,
      'movieTechnicianName': instance.movieTechnicianName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'predefinedCallTimeValueTypeName':
          instance.predefinedCallTimeValueTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayTechnicianModelReturnListModel
    _$MovieShootDayTechnicianModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayTechnicianModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayTechnicianModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayTechnicianModelReturnListModelToJson(
        MovieShootDayTechnicianModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayTechnicianModelReturnModel
    _$MovieShootDayTechnicianModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayTechnicianModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayTechnicianModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayTechnicianModelReturnModelToJson(
        MovieShootDayTechnicianModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayTechnicianUpdateModel _$MovieShootDayTechnicianUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayTechnicianUpdateModel(
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieShootDayTechnicianCode:
          json['movieShootDayTechnicianCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieShootDayTechnicianName:
          json['movieShootDayTechnicianName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      isAbsent: json['isAbsent'] as bool?,
      notes: json['notes'] as String?,
      createMovieTechnicianOnTheFly:
          json['createMovieTechnicianOnTheFly'] as bool?,
      technicianId: (json['technicianId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayTechnicianUpdateModelToJson(
        MovieShootDayTechnicianUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieShootDayTechnicianCode': instance.movieShootDayTechnicianCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieShootDayTechnicianName': instance.movieShootDayTechnicianName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'isAbsent': instance.isAbsent,
      'notes': instance.notes,
      'createMovieTechnicianOnTheFly': instance.createMovieTechnicianOnTheFly,
      'technicianId': instance.technicianId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayTechnicianWithCompanyOrMovieTechnicianCreateModel
    _$MovieShootDayTechnicianWithCompanyOrMovieTechnicianCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayTechnicianWithCompanyOrMovieTechnicianCreateModel(
          technicianCode: json['technicianCode'] as String?,
          technicianFirstName: json['technicianFirstName'] as String?,
          technicianLastName: json['technicianLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newTechnicianRates: (json['newTechnicianRates'] as List<dynamic>?)
                  ?.map((e) => TechnicianRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieTechnicianCode: json['movieTechnicianCode'] as String?,
          technicianId: (json['technicianId'] as num?)?.toInt(),
          parentMovieTechnicianId:
              (json['parentMovieTechnicianId'] as num?)?.toInt(),
          movieTechnicianName: json['movieTechnicianName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieShootDayTechnicianCode:
              json['movieShootDayTechnicianCode'] as String?,
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieShootDayTechnicianName:
              json['movieShootDayTechnicianName'] as String?,
          callTime: (json['callTime'] as num?)?.toInt(),
          predefinedCallTimeValueTypeId:
              (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
          additionalCount: (json['additionalCount'] as num?)?.toInt(),
          predefinedPhoneCallNotificationStatusTypeId:
              (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          phoneCallNotificationStartedDateTime:
              json['phoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationStartedDateTime'] as String),
          phoneCallNotificationCompletedDateTime:
              json['phoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationCompletedDateTime'] as String),
          predefinedEmailNotificationStatusTypeId:
              (json['predefinedEmailNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          emailNotificationStartedDateTime:
              json['emailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationStartedDateTime'] as String),
          emailNotificationCompletedDateTime:
              json['emailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationCompletedDateTime'] as String),
          predefinedSmsNotificationStatusTypeId:
              (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
          smsNotificationStartedDateTime:
              json['smsNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationStartedDateTime'] as String),
          smsNotificationCompletedDateTime:
              json['smsNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationCompletedDateTime'] as String),
          predefinedPushNotificationStatusTypeId:
              (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
          pushNotificationStartedDateTime:
              json['pushNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationStartedDateTime'] as String),
          pushNotificationCompletedDateTime:
              json['pushNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationCompletedDateTime'] as String),
          predefinedWhatsAppNotificationStatusTypeId:
              (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          whatsAppNotificationStartedDateTime:
              json['whatsAppNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationStartedDateTime'] as String),
          whatsAppNotificationCompletedDateTime:
              json['whatsAppNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationCompletedDateTime'] as String),
          inTime: (json['inTime'] as num?)?.toInt(),
          outTime: (json['outTime'] as num?)?.toInt(),
          notes: json['notes'] as String?,
          isAbsent: json['isAbsent'] as bool?,
          estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['preProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['productionStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieShootDayTechnicianWithCompanyOrMovieTechnicianCreateModelToJson(
            MovieShootDayTechnicianWithCompanyOrMovieTechnicianCreateModel
                instance) =>
        <String, dynamic>{
          'technicianCode': instance.technicianCode,
          'technicianFirstName': instance.technicianFirstName,
          'technicianLastName': instance.technicianLastName,
          'workPhone': instance.workPhone,
          'cellPhone': instance.cellPhone,
          'email': instance.email,
          'assistantName': instance.assistantName,
          'assistantPhone': instance.assistantPhone,
          'assistantEmail': instance.assistantEmail,
          'technicianTypeId': instance.technicianTypeId,
          'profileImageLocation': instance.profileImageLocation,
          'profileImageActualFileName': instance.profileImageActualFileName,
          'defaultPreProductionBudgetCategoryId':
              instance.defaultPreProductionBudgetCategoryId,
          'defaultProductionBudgetCategoryId':
              instance.defaultProductionBudgetCategoryId,
          'defaultPostProductionBudgetCategoryId':
              instance.defaultPostProductionBudgetCategoryId,
          'position': instance.position,
          'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
          'companyId': instance.companyId,
          'isDisabled': instance.isDisabled,
          'useDefaultRates': instance.useDefaultRates,
          'newTechnicianRates':
              instance.newTechnicianRates?.map((e) => e.toJson()).toList(),
          'movieTechnicianId': instance.movieTechnicianId,
          'movieTechnicianCode': instance.movieTechnicianCode,
          'technicianId': instance.technicianId,
          'parentMovieTechnicianId': instance.parentMovieTechnicianId,
          'movieTechnicianName': instance.movieTechnicianName,
          'predefinedContractAssignmentStatusTypeId':
              instance.predefinedContractAssignmentStatusTypeId,
          'contractId': instance.contractId,
          'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'isPartOfMajorCrew': instance.isPartOfMajorCrew,
          'defaultPreProductionMovieBudgetCategoryId':
              instance.defaultPreProductionMovieBudgetCategoryId,
          'defaultProductionMovieBudgetCategoryId':
              instance.defaultProductionMovieBudgetCategoryId,
          'defaultPostProductionMovieBudgetCategoryId':
              instance.defaultPostProductionMovieBudgetCategoryId,
          'movieId': instance.movieId,
          'movieShootDayTechnicianCode': instance.movieShootDayTechnicianCode,
          'movieShootDayId': instance.movieShootDayId,
          'movieShootDayTechnicianName': instance.movieShootDayTechnicianName,
          'callTime': instance.callTime,
          'predefinedCallTimeValueTypeId':
              instance.predefinedCallTimeValueTypeId,
          'additionalCount': instance.additionalCount,
          'predefinedPhoneCallNotificationStatusTypeId':
              instance.predefinedPhoneCallNotificationStatusTypeId,
          'phoneCallNotificationStartedDateTime':
              instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
          'phoneCallNotificationCompletedDateTime': instance
              .phoneCallNotificationCompletedDateTime
              ?.toIso8601String(),
          'predefinedEmailNotificationStatusTypeId':
              instance.predefinedEmailNotificationStatusTypeId,
          'emailNotificationStartedDateTime':
              instance.emailNotificationStartedDateTime?.toIso8601String(),
          'emailNotificationCompletedDateTime':
              instance.emailNotificationCompletedDateTime?.toIso8601String(),
          'predefinedSmsNotificationStatusTypeId':
              instance.predefinedSmsNotificationStatusTypeId,
          'smsNotificationStartedDateTime':
              instance.smsNotificationStartedDateTime?.toIso8601String(),
          'smsNotificationCompletedDateTime':
              instance.smsNotificationCompletedDateTime?.toIso8601String(),
          'predefinedPushNotificationStatusTypeId':
              instance.predefinedPushNotificationStatusTypeId,
          'pushNotificationStartedDateTime':
              instance.pushNotificationStartedDateTime?.toIso8601String(),
          'pushNotificationCompletedDateTime':
              instance.pushNotificationCompletedDateTime?.toIso8601String(),
          'predefinedWhatsAppNotificationStatusTypeId':
              instance.predefinedWhatsAppNotificationStatusTypeId,
          'whatsAppNotificationStartedDateTime':
              instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
          'whatsAppNotificationCompletedDateTime':
              instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
          'inTime': instance.inTime,
          'outTime': instance.outTime,
          'notes': instance.notes,
          'isAbsent': instance.isAbsent,
          'estimatedRate': instance.estimatedRate,
          'departmentId': instance.departmentId,
          'postProductionStatusTypeId': instance.postProductionStatusTypeId,
          'preProductionStatusTypeId': instance.preProductionStatusTypeId,
          'productionStatusTypeId': instance.productionStatusTypeId,
        };

MovieShootDayUpdateModel _$MovieShootDayUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayUpdateModel(
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      predefinedMovieShootDayTypeId:
          (json['predefinedMovieShootDayTypeId'] as num?)?.toInt(),
      predefinedMovieShootDayStatusTypeId:
          (json['predefinedMovieShootDayStatusTypeId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      dayNumber: (json['dayNumber'] as num?)?.toInt(),
      dateOfShoot: json['dateOfShoot'] == null
          ? null
          : DateTime.parse(json['dateOfShoot'] as String),
      preCallForHairAndMakupTime:
          (json['preCallForHairAndMakupTime'] as num?)?.toInt(),
      crewCallTime: (json['crewCallTime'] as num?)?.toInt(),
      shootCallTime: (json['shootCallTime'] as num?)?.toInt(),
      shiftStartTime: (json['shiftStartTime'] as num?)?.toInt(),
      shiftEndTime: (json['shiftEndTime'] as num?)?.toInt(),
      useDefaultTextInLeft: json['useDefaultTextInLeft'] as bool?,
      useDefaultTextInRight: json['useDefaultTextInRight'] as bool?,
      useDefaultHarassmentInfoText:
          json['useDefaultHarassmentInfoText'] as bool?,
      useDefaultRadioChannelText: json['useDefaultRadioChannelText'] as bool?,
      textInLeft: json['textInLeft'] as String?,
      textInRight: json['textInRight'] as String?,
      harassmentInfoText: json['harassmentInfoText'] as String?,
      radioChannelText: json['radioChannelText'] as String?,
      weatherTemperatureMinInCelsius:
          (json['weatherTemperatureMinInCelsius'] as num?)?.toDouble(),
      weatherTemperatureMaxCelsius:
          (json['weatherTemperatureMaxCelsius'] as num?)?.toDouble(),
      weatherForecast: json['weatherForecast'] as String?,
      sunriseTime: (json['sunriseTime'] as num?)?.toInt(),
      sunsetTime: (json['sunsetTime'] as num?)?.toInt(),
      goldenHourMorningStartTime:
          (json['goldenHourMorningStartTime'] as num?)?.toInt(),
      goldenHourEveningStartTime:
          (json['goldenHourEveningStartTime'] as num?)?.toInt(),
      goldenHourMorningEndTime:
          (json['goldenHourMorningEndTime'] as num?)?.toInt(),
      goldenHourEveningEndTime:
          (json['goldenHourEveningEndTime'] as num?)?.toInt(),
      shootSummary: json['shootSummary'] as String?,
      movieBudgetDivisionId: (json['movieBudgetDivisionId'] as num?)?.toInt(),
      budget: (json['budget'] as num?)?.toDouble(),
      actual: (json['actual'] as num?)?.toDouble(),
      isBudgetLocked: json['isBudgetLocked'] as bool?,
      isCallSheetLocked: json['isCallSheetLocked'] as bool?,
      predefinedMovieApprovalStatusForCallsheetTypeId:
          (json['predefinedMovieApprovalStatusForCallsheetTypeId'] as num?)
              ?.toInt(),
      predefinedMovieApprovalStatusForBudgetTypeId:
          (json['predefinedMovieApprovalStatusForBudgetTypeId'] as num?)
              ?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieShootDayUpdateModelToJson(
        MovieShootDayUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieId': instance.movieId,
      'predefinedMovieShootDayTypeId': instance.predefinedMovieShootDayTypeId,
      'predefinedMovieShootDayStatusTypeId':
          instance.predefinedMovieShootDayStatusTypeId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'dayNumber': instance.dayNumber,
      'dateOfShoot': instance.dateOfShoot?.toIso8601String(),
      'preCallForHairAndMakupTime': instance.preCallForHairAndMakupTime,
      'crewCallTime': instance.crewCallTime,
      'shootCallTime': instance.shootCallTime,
      'shiftStartTime': instance.shiftStartTime,
      'shiftEndTime': instance.shiftEndTime,
      'useDefaultTextInLeft': instance.useDefaultTextInLeft,
      'useDefaultTextInRight': instance.useDefaultTextInRight,
      'useDefaultHarassmentInfoText': instance.useDefaultHarassmentInfoText,
      'useDefaultRadioChannelText': instance.useDefaultRadioChannelText,
      'textInLeft': instance.textInLeft,
      'textInRight': instance.textInRight,
      'harassmentInfoText': instance.harassmentInfoText,
      'radioChannelText': instance.radioChannelText,
      'weatherTemperatureMinInCelsius': instance.weatherTemperatureMinInCelsius,
      'weatherTemperatureMaxCelsius': instance.weatherTemperatureMaxCelsius,
      'weatherForecast': instance.weatherForecast,
      'sunriseTime': instance.sunriseTime,
      'sunsetTime': instance.sunsetTime,
      'goldenHourMorningStartTime': instance.goldenHourMorningStartTime,
      'goldenHourEveningStartTime': instance.goldenHourEveningStartTime,
      'goldenHourMorningEndTime': instance.goldenHourMorningEndTime,
      'goldenHourEveningEndTime': instance.goldenHourEveningEndTime,
      'shootSummary': instance.shootSummary,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'budget': instance.budget,
      'actual': instance.actual,
      'isBudgetLocked': instance.isBudgetLocked,
      'isCallSheetLocked': instance.isCallSheetLocked,
      'predefinedMovieApprovalStatusForCallsheetTypeId':
          instance.predefinedMovieApprovalStatusForCallsheetTypeId,
      'predefinedMovieApprovalStatusForBudgetTypeId':
          instance.predefinedMovieApprovalStatusForBudgetTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

MovieShootDayVendorCreateModel _$MovieShootDayVendorCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayVendorCreateModel(
      movieShootDayVendorCode: json['movieShootDayVendorCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieShootDayVendorName: json['movieShootDayVendorName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      isAbsent: json['isAbsent'] as bool?,
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      createMovieVendorOnTheFly: json['createMovieVendorOnTheFly'] as bool?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayVendorCreateModelToJson(
        MovieShootDayVendorCreateModel instance) =>
    <String, dynamic>{
      'movieShootDayVendorCode': instance.movieShootDayVendorCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieVendorId': instance.movieVendorId,
      'movieShootDayVendorName': instance.movieShootDayVendorName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'isAbsent': instance.isAbsent,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'notes': instance.notes,
      'createMovieVendorOnTheFly': instance.createMovieVendorOnTheFly,
      'vendorId': instance.vendorId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayVendorModel _$MovieShootDayVendorModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayVendorModel(
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDayVendorCode: json['movieShootDayVendorCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieShootDayVendorName: json['movieShootDayVendorName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      isAbsent: json['isAbsent'] as bool?,
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeName:
          json['predefinedPhoneCallNotificationStatusTypeName'] as String?,
      predefinedEmailNotificationStatusTypeName:
          json['predefinedEmailNotificationStatusTypeName'] as String?,
      predefinedPushNotificationStatusTypeName:
          json['predefinedPushNotificationStatusTypeName'] as String?,
      predefinedSmsNotificationStatusTypeName:
          json['predefinedSmsNotificationStatusTypeName'] as String?,
      predefinedWhatsAppNotificationStatusTypeName:
          json['predefinedWhatsAppNotificationStatusTypeName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      predefinedCallTimeValueTypeName:
          json['predefinedCallTimeValueTypeName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorName: json['vendorName'] as String?,
      vendorCode: json['vendorCode'] as String?,
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      vendorTypeName: json['vendorTypeName'] as String?,
      vendorWorkPhone: json['vendorWorkPhone'] as String?,
      vendorCellPhone: json['vendorCellPhone'] as String?,
      vendorEmail: json['vendorEmail'] as String?,
      predefinedPaymentStatusTypeName:
          json['predefinedPaymentStatusTypeName'] as String?,
      notes: json['notes'] as String?,
      vendorGroupTypePosition:
          (json['vendorGroupTypePosition'] as num?)?.toInt(),
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieShootDayVendorModelToJson(
        MovieShootDayVendorModel instance) =>
    <String, dynamic>{
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDayVendorCode': instance.movieShootDayVendorCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieVendorId': instance.movieVendorId,
      'movieShootDayVendorName': instance.movieShootDayVendorName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'isAbsent': instance.isAbsent,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedPhoneCallNotificationStatusTypeName':
          instance.predefinedPhoneCallNotificationStatusTypeName,
      'predefinedEmailNotificationStatusTypeName':
          instance.predefinedEmailNotificationStatusTypeName,
      'predefinedPushNotificationStatusTypeName':
          instance.predefinedPushNotificationStatusTypeName,
      'predefinedSmsNotificationStatusTypeName':
          instance.predefinedSmsNotificationStatusTypeName,
      'predefinedWhatsAppNotificationStatusTypeName':
          instance.predefinedWhatsAppNotificationStatusTypeName,
      'movieVendorName': instance.movieVendorName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieVendorCode': instance.movieVendorCode,
      'predefinedCallTimeValueTypeName':
          instance.predefinedCallTimeValueTypeName,
      'vendorId': instance.vendorId,
      'vendorName': instance.vendorName,
      'vendorCode': instance.vendorCode,
      'vendorTypeId': instance.vendorTypeId,
      'vendorTypeName': instance.vendorTypeName,
      'vendorWorkPhone': instance.vendorWorkPhone,
      'vendorCellPhone': instance.vendorCellPhone,
      'vendorEmail': instance.vendorEmail,
      'predefinedPaymentStatusTypeName':
          instance.predefinedPaymentStatusTypeName,
      'notes': instance.notes,
      'vendorGroupTypePosition': instance.vendorGroupTypePosition,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieShootDayVendorModelReturnListModel
    _$MovieShootDayVendorModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayVendorModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieShootDayVendorModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayVendorModelReturnListModelToJson(
        MovieShootDayVendorModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayVendorModelReturnModel
    _$MovieShootDayVendorModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieShootDayVendorModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieShootDayVendorModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieShootDayVendorModelReturnModelToJson(
        MovieShootDayVendorModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieShootDayVendorUpdateModel _$MovieShootDayVendorUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieShootDayVendorUpdateModel(
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDayVendorCode: json['movieShootDayVendorCode'] as String?,
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieShootDayVendorName: json['movieShootDayVendorName'] as String?,
      callTime: (json['callTime'] as num?)?.toInt(),
      inTime: (json['inTime'] as num?)?.toInt(),
      outTime: (json['outTime'] as num?)?.toInt(),
      predefinedCallTimeValueTypeId:
          (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
      predefinedPaymentStatusTypeId:
          (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
      additionalCount: (json['additionalCount'] as num?)?.toInt(),
      predefinedPhoneCallNotificationStatusTypeId:
          (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
              ?.toInt(),
      phoneCallNotificationStartedDateTime:
          json['phoneCallNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationStartedDateTime'] as String),
      phoneCallNotificationCompletedDateTime:
          json['phoneCallNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['phoneCallNotificationCompletedDateTime'] as String),
      predefinedEmailNotificationStatusTypeId:
          (json['predefinedEmailNotificationStatusTypeId'] as num?)?.toInt(),
      emailNotificationStartedDateTime:
          json['emailNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationStartedDateTime'] as String),
      emailNotificationCompletedDateTime:
          json['emailNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['emailNotificationCompletedDateTime'] as String),
      predefinedSmsNotificationStatusTypeId:
          (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
      smsNotificationStartedDateTime: json['smsNotificationStartedDateTime'] ==
              null
          ? null
          : DateTime.parse(json['smsNotificationStartedDateTime'] as String),
      smsNotificationCompletedDateTime:
          json['smsNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['smsNotificationCompletedDateTime'] as String),
      predefinedPushNotificationStatusTypeId:
          (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
      pushNotificationStartedDateTime:
          json['pushNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationStartedDateTime'] as String),
      pushNotificationCompletedDateTime:
          json['pushNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['pushNotificationCompletedDateTime'] as String),
      predefinedWhatsAppNotificationStatusTypeId:
          (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)?.toInt(),
      whatsAppNotificationStartedDateTime:
          json['whatsAppNotificationStartedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationStartedDateTime'] as String),
      whatsAppNotificationCompletedDateTime:
          json['whatsAppNotificationCompletedDateTime'] == null
              ? null
              : DateTime.parse(
                  json['whatsAppNotificationCompletedDateTime'] as String),
      copiedFromMovieSceneId: (json['copiedFromMovieSceneId'] as num?)?.toInt(),
      isAbsent: json['isAbsent'] as bool?,
      latitude: (json['latitude'] as num?)?.toDouble(),
      longitude: (json['longitude'] as num?)?.toDouble(),
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      createMovieVendorOnTheFly: json['createMovieVendorOnTheFly'] as bool?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
    );

Map<String, dynamic> _$MovieShootDayVendorUpdateModelToJson(
        MovieShootDayVendorUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDayVendorCode': instance.movieShootDayVendorCode,
      'movieShootDayId': instance.movieShootDayId,
      'movieVendorId': instance.movieVendorId,
      'movieShootDayVendorName': instance.movieShootDayVendorName,
      'callTime': instance.callTime,
      'inTime': instance.inTime,
      'outTime': instance.outTime,
      'predefinedCallTimeValueTypeId': instance.predefinedCallTimeValueTypeId,
      'predefinedPaymentStatusTypeId': instance.predefinedPaymentStatusTypeId,
      'additionalCount': instance.additionalCount,
      'predefinedPhoneCallNotificationStatusTypeId':
          instance.predefinedPhoneCallNotificationStatusTypeId,
      'phoneCallNotificationStartedDateTime':
          instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
      'phoneCallNotificationCompletedDateTime':
          instance.phoneCallNotificationCompletedDateTime?.toIso8601String(),
      'predefinedEmailNotificationStatusTypeId':
          instance.predefinedEmailNotificationStatusTypeId,
      'emailNotificationStartedDateTime':
          instance.emailNotificationStartedDateTime?.toIso8601String(),
      'emailNotificationCompletedDateTime':
          instance.emailNotificationCompletedDateTime?.toIso8601String(),
      'predefinedSmsNotificationStatusTypeId':
          instance.predefinedSmsNotificationStatusTypeId,
      'smsNotificationStartedDateTime':
          instance.smsNotificationStartedDateTime?.toIso8601String(),
      'smsNotificationCompletedDateTime':
          instance.smsNotificationCompletedDateTime?.toIso8601String(),
      'predefinedPushNotificationStatusTypeId':
          instance.predefinedPushNotificationStatusTypeId,
      'pushNotificationStartedDateTime':
          instance.pushNotificationStartedDateTime?.toIso8601String(),
      'pushNotificationCompletedDateTime':
          instance.pushNotificationCompletedDateTime?.toIso8601String(),
      'predefinedWhatsAppNotificationStatusTypeId':
          instance.predefinedWhatsAppNotificationStatusTypeId,
      'whatsAppNotificationStartedDateTime':
          instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
      'whatsAppNotificationCompletedDateTime':
          instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
      'copiedFromMovieSceneId': instance.copiedFromMovieSceneId,
      'isAbsent': instance.isAbsent,
      'latitude': instance.latitude,
      'longitude': instance.longitude,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'notes': instance.notes,
      'createMovieVendorOnTheFly': instance.createMovieVendorOnTheFly,
      'vendorId': instance.vendorId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
    };

MovieShootDayVendorWithCompanyOrMovieVendorCreateModel
    _$MovieShootDayVendorWithCompanyOrMovieVendorCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieShootDayVendorWithCompanyOrMovieVendorCreateModel(
          vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
          vendorCode: json['vendorCode'] as String?,
          vendorName: json['vendorName'] as String?,
          contactFirstName: json['contactFirstName'] as String?,
          contactLastName: json['contactLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          address1: json['address1'] as String?,
          address2: json['address2'] as String?,
          city: json['city'] as String?,
          state: json['state'] as String?,
          country: json['country'] as String?,
          position: (json['position'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          isDisabled: json['isDisabled'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          useDefaultRates: json['useDefaultRates'] as bool?,
          newVendorRates: (json['newVendorRates'] as List<dynamic>?)
                  ?.map((e) =>
                      VendorRateCreateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          movieVendorCode: json['movieVendorCode'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          parentMovieVendorId: (json['parentMovieVendorId'] as num?)?.toInt(),
          movieVendorName: json['movieVendorName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          movieShootDayVendorCode: json['movieShootDayVendorCode'] as String?,
          movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
          movieShootDayVendorName: json['movieShootDayVendorName'] as String?,
          callTime: (json['callTime'] as num?)?.toInt(),
          predefinedCallTimeValueTypeId:
              (json['predefinedCallTimeValueTypeId'] as num?)?.toInt(),
          additionalCount: (json['additionalCount'] as num?)?.toInt(),
          predefinedPhoneCallNotificationStatusTypeId:
              (json['predefinedPhoneCallNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          phoneCallNotificationStartedDateTime:
              json['phoneCallNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationStartedDateTime'] as String),
          phoneCallNotificationCompletedDateTime:
              json['phoneCallNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['phoneCallNotificationCompletedDateTime'] as String),
          predefinedEmailNotificationStatusTypeId:
              (json['predefinedEmailNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          emailNotificationStartedDateTime:
              json['emailNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationStartedDateTime'] as String),
          emailNotificationCompletedDateTime:
              json['emailNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['emailNotificationCompletedDateTime'] as String),
          predefinedSmsNotificationStatusTypeId:
              (json['predefinedSmsNotificationStatusTypeId'] as num?)?.toInt(),
          smsNotificationStartedDateTime:
              json['smsNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationStartedDateTime'] as String),
          smsNotificationCompletedDateTime:
              json['smsNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['smsNotificationCompletedDateTime'] as String),
          predefinedPushNotificationStatusTypeId:
              (json['predefinedPushNotificationStatusTypeId'] as num?)?.toInt(),
          pushNotificationStartedDateTime:
              json['pushNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationStartedDateTime'] as String),
          pushNotificationCompletedDateTime:
              json['pushNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['pushNotificationCompletedDateTime'] as String),
          predefinedWhatsAppNotificationStatusTypeId:
              (json['predefinedWhatsAppNotificationStatusTypeId'] as num?)
                  ?.toInt(),
          whatsAppNotificationStartedDateTime:
              json['whatsAppNotificationStartedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationStartedDateTime'] as String),
          whatsAppNotificationCompletedDateTime:
              json['whatsAppNotificationCompletedDateTime'] == null
                  ? null
                  : DateTime.parse(
                      json['whatsAppNotificationCompletedDateTime'] as String),
          inTime: (json['inTime'] as num?)?.toInt(),
          outTime: (json['outTime'] as num?)?.toInt(),
          notes: json['notes'] as String?,
          isAbsent: json['isAbsent'] as bool?,
          estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['preProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['productionStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieShootDayVendorWithCompanyOrMovieVendorCreateModelToJson(
            MovieShootDayVendorWithCompanyOrMovieVendorCreateModel instance) =>
        <String, dynamic>{
          'vendorTypeId': instance.vendorTypeId,
          'vendorCode': instance.vendorCode,
          'vendorName': instance.vendorName,
          'contactFirstName': instance.contactFirstName,
          'contactLastName': instance.contactLastName,
          'workPhone': instance.workPhone,
          'cellPhone': instance.cellPhone,
          'email': instance.email,
          'address1': instance.address1,
          'address2': instance.address2,
          'city': instance.city,
          'state': instance.state,
          'country': instance.country,
          'position': instance.position,
          'profileImageLocation': instance.profileImageLocation,
          'profileImageActualFileName': instance.profileImageActualFileName,
          'defaultPreProductionBudgetCategoryId':
              instance.defaultPreProductionBudgetCategoryId,
          'defaultProductionBudgetCategoryId':
              instance.defaultProductionBudgetCategoryId,
          'defaultPostProductionBudgetCategoryId':
              instance.defaultPostProductionBudgetCategoryId,
          'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
          'isDisabled': instance.isDisabled,
          'companyId': instance.companyId,
          'useDefaultRates': instance.useDefaultRates,
          'newVendorRates':
              instance.newVendorRates?.map((e) => e.toJson()).toList(),
          'movieVendorId': instance.movieVendorId,
          'movieVendorCode': instance.movieVendorCode,
          'vendorId': instance.vendorId,
          'parentMovieVendorId': instance.parentMovieVendorId,
          'movieVendorName': instance.movieVendorName,
          'predefinedContractAssignmentStatusTypeId':
              instance.predefinedContractAssignmentStatusTypeId,
          'contractId': instance.contractId,
          'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'isPartOfMajorCrew': instance.isPartOfMajorCrew,
          'defaultPreProductionMovieBudgetCategoryId':
              instance.defaultPreProductionMovieBudgetCategoryId,
          'defaultProductionMovieBudgetCategoryId':
              instance.defaultProductionMovieBudgetCategoryId,
          'defaultPostProductionMovieBudgetCategoryId':
              instance.defaultPostProductionMovieBudgetCategoryId,
          'movieId': instance.movieId,
          'movieShootDayVendorCode': instance.movieShootDayVendorCode,
          'movieShootDayId': instance.movieShootDayId,
          'movieShootDayVendorName': instance.movieShootDayVendorName,
          'callTime': instance.callTime,
          'predefinedCallTimeValueTypeId':
              instance.predefinedCallTimeValueTypeId,
          'additionalCount': instance.additionalCount,
          'predefinedPhoneCallNotificationStatusTypeId':
              instance.predefinedPhoneCallNotificationStatusTypeId,
          'phoneCallNotificationStartedDateTime':
              instance.phoneCallNotificationStartedDateTime?.toIso8601String(),
          'phoneCallNotificationCompletedDateTime': instance
              .phoneCallNotificationCompletedDateTime
              ?.toIso8601String(),
          'predefinedEmailNotificationStatusTypeId':
              instance.predefinedEmailNotificationStatusTypeId,
          'emailNotificationStartedDateTime':
              instance.emailNotificationStartedDateTime?.toIso8601String(),
          'emailNotificationCompletedDateTime':
              instance.emailNotificationCompletedDateTime?.toIso8601String(),
          'predefinedSmsNotificationStatusTypeId':
              instance.predefinedSmsNotificationStatusTypeId,
          'smsNotificationStartedDateTime':
              instance.smsNotificationStartedDateTime?.toIso8601String(),
          'smsNotificationCompletedDateTime':
              instance.smsNotificationCompletedDateTime?.toIso8601String(),
          'predefinedPushNotificationStatusTypeId':
              instance.predefinedPushNotificationStatusTypeId,
          'pushNotificationStartedDateTime':
              instance.pushNotificationStartedDateTime?.toIso8601String(),
          'pushNotificationCompletedDateTime':
              instance.pushNotificationCompletedDateTime?.toIso8601String(),
          'predefinedWhatsAppNotificationStatusTypeId':
              instance.predefinedWhatsAppNotificationStatusTypeId,
          'whatsAppNotificationStartedDateTime':
              instance.whatsAppNotificationStartedDateTime?.toIso8601String(),
          'whatsAppNotificationCompletedDateTime':
              instance.whatsAppNotificationCompletedDateTime?.toIso8601String(),
          'inTime': instance.inTime,
          'outTime': instance.outTime,
          'notes': instance.notes,
          'isAbsent': instance.isAbsent,
          'estimatedRate': instance.estimatedRate,
          'departmentId': instance.departmentId,
          'postProductionStatusTypeId': instance.postProductionStatusTypeId,
          'preProductionStatusTypeId': instance.preProductionStatusTypeId,
          'productionStatusTypeId': instance.productionStatusTypeId,
        };

MovieStatusNotificationEventSessionCreateModel
    _$MovieStatusNotificationEventSessionCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventSessionCreateModel(
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          sessionDate: json['sessionDate'] == null
              ? null
              : DateTime.parse(json['sessionDate'] as String),
          jobId: (json['jobId'] as num?)?.toInt(),
          notificationContent: json['notificationContent'] as String?,
        );

Map<String, dynamic> _$MovieStatusNotificationEventSessionCreateModelToJson(
        MovieStatusNotificationEventSessionCreateModel instance) =>
    <String, dynamic>{
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'sessionDate': instance.sessionDate?.toIso8601String(),
      'jobId': instance.jobId,
      'notificationContent': instance.notificationContent,
    };

MovieStatusNotificationEventSessionModel
    _$MovieStatusNotificationEventSessionModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventSessionModel(
          movieStatusNotificationEventSessionId:
              (json['movieStatusNotificationEventSessionId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          sessionDate: json['sessionDate'] == null
              ? null
              : DateTime.parse(json['sessionDate'] as String),
          jobId: (json['jobId'] as num?)?.toInt(),
          notificationContent: json['notificationContent'] as String?,
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          jobName: json['jobName'] as String?,
          companyName: json['companyName'] as String?,
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
        );

Map<String, dynamic> _$MovieStatusNotificationEventSessionModelToJson(
        MovieStatusNotificationEventSessionModel instance) =>
    <String, dynamic>{
      'movieStatusNotificationEventSessionId':
          instance.movieStatusNotificationEventSessionId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'sessionDate': instance.sessionDate?.toIso8601String(),
      'jobId': instance.jobId,
      'notificationContent': instance.notificationContent,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'jobName': instance.jobName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieStatusNotificationEventSessionModelReturnListModel
    _$MovieStatusNotificationEventSessionModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventSessionModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieStatusNotificationEventSessionModel.fromJson(
                          e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieStatusNotificationEventSessionModelReturnListModelToJson(
            MovieStatusNotificationEventSessionModelReturnListModel instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieStatusNotificationEventSessionModelReturnModel
    _$MovieStatusNotificationEventSessionModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventSessionModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieStatusNotificationEventSessionModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieStatusNotificationEventSessionModelReturnModelToJson(
            MovieStatusNotificationEventSessionModelReturnModel instance) =>
        <String, dynamic>{
          'model': instance.model?.toJson(),
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieStatusNotificationEventSessionUpdateModel
    _$MovieStatusNotificationEventSessionUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventSessionUpdateModel(
          movieStatusNotificationEventSessionId:
              (json['movieStatusNotificationEventSessionId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          sessionDate: json['sessionDate'] == null
              ? null
              : DateTime.parse(json['sessionDate'] as String),
          jobId: (json['jobId'] as num?)?.toInt(),
          notificationContent: json['notificationContent'] as String?,
        );

Map<String, dynamic> _$MovieStatusNotificationEventSessionUpdateModelToJson(
        MovieStatusNotificationEventSessionUpdateModel instance) =>
    <String, dynamic>{
      'movieStatusNotificationEventSessionId':
          instance.movieStatusNotificationEventSessionId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'sessionDate': instance.sessionDate?.toIso8601String(),
      'jobId': instance.jobId,
      'notificationContent': instance.notificationContent,
    };

MovieStatusNotificationEventUserCreateModel
    _$MovieStatusNotificationEventUserCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventUserCreateModel(
          predefinedMovieStatusNotificationEventTypeId:
              (json['predefinedMovieStatusNotificationEventTypeId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isMovieUserOrEmail: json['isMovieUserOrEmail'] as bool?,
          movieUserId: (json['movieUserId'] as num?)?.toInt(),
          email: json['email'] as String?,
          movieBudgetDivisionId:
              (json['movieBudgetDivisionId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieStatusNotificationEventUserCreateModelToJson(
        MovieStatusNotificationEventUserCreateModel instance) =>
    <String, dynamic>{
      'predefinedMovieStatusNotificationEventTypeId':
          instance.predefinedMovieStatusNotificationEventTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isMovieUserOrEmail': instance.isMovieUserOrEmail,
      'movieUserId': instance.movieUserId,
      'email': instance.email,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
    };

MovieStatusNotificationEventUserModel
    _$MovieStatusNotificationEventUserModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventUserModel(
          movieStatusNotificationEventUserId:
              (json['movieStatusNotificationEventUserId'] as num?)?.toInt(),
          predefinedMovieStatusNotificationEventTypeId:
              (json['predefinedMovieStatusNotificationEventTypeId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isMovieUserOrEmail: json['isMovieUserOrEmail'] as bool?,
          movieUserId: (json['movieUserId'] as num?)?.toInt(),
          email: json['email'] as String?,
          movieBudgetDivisionId:
              (json['movieBudgetDivisionId'] as num?)?.toInt(),
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          enumTypeName: json['enumTypeName'] as String?,
          companyName: json['companyName'] as String?,
          movieDivisionName: json['movieDivisionName'] as String?,
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
        );

Map<String, dynamic> _$MovieStatusNotificationEventUserModelToJson(
        MovieStatusNotificationEventUserModel instance) =>
    <String, dynamic>{
      'movieStatusNotificationEventUserId':
          instance.movieStatusNotificationEventUserId,
      'predefinedMovieStatusNotificationEventTypeId':
          instance.predefinedMovieStatusNotificationEventTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isMovieUserOrEmail': instance.isMovieUserOrEmail,
      'movieUserId': instance.movieUserId,
      'email': instance.email,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'enumTypeName': instance.enumTypeName,
      'companyName': instance.companyName,
      'movieDivisionName': instance.movieDivisionName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieStatusNotificationEventUserModelReturnListModel
    _$MovieStatusNotificationEventUserModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventUserModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieStatusNotificationEventUserModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MovieStatusNotificationEventUserModelReturnListModelToJson(
            MovieStatusNotificationEventUserModelReturnListModel instance) =>
        <String, dynamic>{
          'model': instance.model?.map((e) => e.toJson()).toList(),
          'search': instance.search?.toJson(),
          'totalRecords': instance.totalRecords,
          'isSuccess': instance.isSuccess,
          'successMessage': instance.successMessage,
          'errorHolder': instance.errorHolder?.toJson(),
          'activityId': instance.activityId,
          'activityDateTime': instance.activityDateTime?.toIso8601String(),
          'server': instance.server,
          'processId': instance.processId,
        };

MovieStatusNotificationEventUserModelReturnModel
    _$MovieStatusNotificationEventUserModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventUserModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieStatusNotificationEventUserModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieStatusNotificationEventUserModelReturnModelToJson(
        MovieStatusNotificationEventUserModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieStatusNotificationEventUserUpdateModel
    _$MovieStatusNotificationEventUserUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MovieStatusNotificationEventUserUpdateModel(
          movieStatusNotificationEventUserId:
              (json['movieStatusNotificationEventUserId'] as num?)?.toInt(),
          predefinedMovieStatusNotificationEventTypeId:
              (json['predefinedMovieStatusNotificationEventTypeId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isMovieUserOrEmail: json['isMovieUserOrEmail'] as bool?,
          movieUserId: (json['movieUserId'] as num?)?.toInt(),
          email: json['email'] as String?,
          movieBudgetDivisionId:
              (json['movieBudgetDivisionId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieStatusNotificationEventUserUpdateModelToJson(
        MovieStatusNotificationEventUserUpdateModel instance) =>
    <String, dynamic>{
      'movieStatusNotificationEventUserId':
          instance.movieStatusNotificationEventUserId,
      'predefinedMovieStatusNotificationEventTypeId':
          instance.predefinedMovieStatusNotificationEventTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isMovieUserOrEmail': instance.isMovieUserOrEmail,
      'movieUserId': instance.movieUserId,
      'email': instance.email,
      'movieBudgetDivisionId': instance.movieBudgetDivisionId,
    };

MovieSummaryModel _$MovieSummaryModelFromJson(Map<String, dynamic> json) =>
    MovieSummaryModel(
      preProductionShootDaysCount:
          (json['preProductionShootDaysCount'] as num?)?.toInt(),
      productionShootDaysCount:
          (json['productionShootDaysCount'] as num?)?.toInt(),
      postProductionShootDaysCount:
          (json['postProductionShootDaysCount'] as num?)?.toInt(),
      movieArtistCount: (json['movieArtistCount'] as num?)?.toInt(),
      movieTechnicianCount: (json['movieTechnicianCount'] as num?)?.toInt(),
      movieEquipmentCount: (json['movieEquipmentCount'] as num?)?.toInt(),
      movieVendorCount: (json['movieVendorCount'] as num?)?.toInt(),
      movieSceneCount: (json['movieSceneCount'] as num?)?.toInt(),
      totalPreProductionExpenseAmount:
          (json['totalPreProductionExpenseAmount'] as num?)?.toDouble(),
      totalProductionExpenseAmount:
          (json['totalProductionExpenseAmount'] as num?)?.toDouble(),
      totalPostProductionExpenseAmount:
          (json['totalPostProductionExpenseAmount'] as num?)?.toDouble(),
      totalPreProductionBudgetAmount:
          (json['totalPreProductionBudgetAmount'] as num?)?.toDouble(),
      totalProductionBudgetAmount:
          (json['totalProductionBudgetAmount'] as num?)?.toDouble(),
      totalPostProductionBudgetAmount:
          (json['totalPostProductionBudgetAmount'] as num?)?.toDouble(),
    );

Map<String, dynamic> _$MovieSummaryModelToJson(MovieSummaryModel instance) =>
    <String, dynamic>{
      'preProductionShootDaysCount': instance.preProductionShootDaysCount,
      'productionShootDaysCount': instance.productionShootDaysCount,
      'postProductionShootDaysCount': instance.postProductionShootDaysCount,
      'movieArtistCount': instance.movieArtistCount,
      'movieTechnicianCount': instance.movieTechnicianCount,
      'movieEquipmentCount': instance.movieEquipmentCount,
      'movieVendorCount': instance.movieVendorCount,
      'movieSceneCount': instance.movieSceneCount,
      'totalPreProductionExpenseAmount':
          instance.totalPreProductionExpenseAmount,
      'totalProductionExpenseAmount': instance.totalProductionExpenseAmount,
      'totalPostProductionExpenseAmount':
          instance.totalPostProductionExpenseAmount,
      'totalPreProductionBudgetAmount': instance.totalPreProductionBudgetAmount,
      'totalProductionBudgetAmount': instance.totalProductionBudgetAmount,
      'totalPostProductionBudgetAmount':
          instance.totalPostProductionBudgetAmount,
    };

MovieSummaryModelReturnModel _$MovieSummaryModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieSummaryModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieSummaryModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieSummaryModelReturnModelToJson(
        MovieSummaryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieTechnicianCreateModel _$MovieTechnicianCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieTechnicianCreateModel(
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      parentMovieTechnicianId:
          (json['parentMovieTechnicianId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      movieTechnicianName: json['movieTechnicianName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      defaultCallTime: (json['defaultCallTime'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      ignoreCurrentMovieShootDayId:
          (json['ignoreCurrentMovieShootDayId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      newMovieTechnicianRates:
          (json['newMovieTechnicianRates'] as List<dynamic>?)
                  ?.map((e) => MovieTechnicianRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieTechnicianCreateModelToJson(
        MovieTechnicianCreateModel instance) =>
    <String, dynamic>{
      'movieTechnicianCode': instance.movieTechnicianCode,
      'parentMovieTechnicianId': instance.parentMovieTechnicianId,
      'technicianId': instance.technicianId,
      'technicianTypeId': instance.technicianTypeId,
      'movieTechnicianName': instance.movieTechnicianName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'defaultCallTime': instance.defaultCallTime,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'estimatedRate': instance.estimatedRate,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'ignoreCurrentMovieShootDayId': instance.ignoreCurrentMovieShootDayId,
      'useDefaultRates': instance.useDefaultRates,
      'newMovieTechnicianRates':
          instance.newMovieTechnicianRates?.map((e) => e.toJson()).toList(),
    };

MovieTechnicianModel _$MovieTechnicianModelFromJson(
        Map<String, dynamic> json) =>
    MovieTechnicianModel(
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      parentMovieTechnicianId:
          (json['parentMovieTechnicianId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      movieTechnicianName: json['movieTechnicianName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      defaultCallTime: (json['defaultCallTime'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      predefinedContractStatusTypeId:
          (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
      predefinedContractStatusTypeName:
          json['predefinedContractStatusTypeName'] as String?,
      notes: json['notes'] as String?,
      parentTechnicianFirstName: json['parentTechnicianFirstName'] as String?,
      parentTechnicianLastName: json['parentTechnicianLastName'] as String?,
      departmentName: json['departmentName'] as String?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      technicianWorkPhone: json['technicianWorkPhone'] as String?,
      technicianCellPhone: json['technicianCellPhone'] as String?,
      technicianEmail: json['technicianEmail'] as String?,
      technicianAssistantName: json['technicianAssistantName'] as String?,
      technicianAssistantPhone: json['technicianAssistantPhone'] as String?,
      technicianAssistantEmail: json['technicianAssistantEmail'] as String?,
      predefinedContractAssignmentStatusTypeName:
          json['predefinedContractAssignmentStatusTypeName'] as String?,
      contractName: json['contractName'] as String?,
      parentMovieTechnicianName: json['parentMovieTechnicianName'] as String?,
      technicianName: json['technicianName'] as String?,
      technicianTypeName: json['technicianTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTitle: json['movieTitle'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      isMovieEnabled: json['isMovieEnabled'] as bool?,
      technicianCode: json['technicianCode'] as String?,
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      defaultPreProductionMovieBudgetCategoryName:
          json['defaultPreProductionMovieBudgetCategoryName'] as String?,
      defaultProductionMovieBudgetCategoryName:
          json['defaultProductionMovieBudgetCategoryName'] as String?,
      defaultPostProductionMovieBudgetCategoryName:
          json['defaultPostProductionMovieBudgetCategoryName'] as String?,
      defaultPreProductionMovieBudgetCategoryCode:
          json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
      defaultProductionMovieBudgetCategoryCode:
          json['defaultProductionMovieBudgetCategoryCode'] as String?,
      defaultPostProductionMovieBudgetCategoryCode:
          json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingMovieTechnicianRates: (json['existingMovieTechnicianRates']
                  as List<dynamic>?)
              ?.map((e) =>
                  MovieTechnicianRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieTechnicianModelToJson(
        MovieTechnicianModel instance) =>
    <String, dynamic>{
      'movieTechnicianId': instance.movieTechnicianId,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'parentMovieTechnicianId': instance.parentMovieTechnicianId,
      'technicianId': instance.technicianId,
      'technicianTypeId': instance.technicianTypeId,
      'movieTechnicianName': instance.movieTechnicianName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'defaultCallTime': instance.defaultCallTime,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'estimatedRate': instance.estimatedRate,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'notes': instance.notes,
      'parentTechnicianFirstName': instance.parentTechnicianFirstName,
      'parentTechnicianLastName': instance.parentTechnicianLastName,
      'departmentName': instance.departmentName,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'technicianWorkPhone': instance.technicianWorkPhone,
      'technicianCellPhone': instance.technicianCellPhone,
      'technicianEmail': instance.technicianEmail,
      'technicianAssistantName': instance.technicianAssistantName,
      'technicianAssistantPhone': instance.technicianAssistantPhone,
      'technicianAssistantEmail': instance.technicianAssistantEmail,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'contractName': instance.contractName,
      'parentMovieTechnicianName': instance.parentMovieTechnicianName,
      'technicianName': instance.technicianName,
      'technicianTypeName': instance.technicianTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'technicianCode': instance.technicianCode,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieTechnicianRates': instance.existingMovieTechnicianRates
          ?.map((e) => e.toJson())
          .toList(),
    };

MovieTechnicianModelReturnListModel
    _$MovieTechnicianModelReturnListModelFromJson(Map<String, dynamic> json) =>
        MovieTechnicianModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieTechnicianModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieTechnicianModelReturnListModelToJson(
        MovieTechnicianModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieTechnicianModelReturnModel _$MovieTechnicianModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieTechnicianModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieTechnicianModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieTechnicianModelReturnModelToJson(
        MovieTechnicianModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieTechnicianRateCreateModel _$MovieTechnicianRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieTechnicianRateCreateModel(
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieTechnicianRateCreateModelToJson(
        MovieTechnicianRateCreateModel instance) =>
    <String, dynamic>{
      'movieTechnicianId': instance.movieTechnicianId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieTechnicianRateModel _$MovieTechnicianRateModelFromJson(
        Map<String, dynamic> json) =>
    MovieTechnicianRateModel(
      movieTechnicianRateId: (json['movieTechnicianRateId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieTechnicianName: json['movieTechnicianName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      companyName: json['companyName'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieTechnicianRateModelToJson(
        MovieTechnicianRateModel instance) =>
    <String, dynamic>{
      'movieTechnicianRateId': instance.movieTechnicianRateId,
      'movieTechnicianId': instance.movieTechnicianId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieTechnicianName': instance.movieTechnicianName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'companyName': instance.companyName,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieTechnicianRateModelReturnListModel
    _$MovieTechnicianRateModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieTechnicianRateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieTechnicianRateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieTechnicianRateModelReturnListModelToJson(
        MovieTechnicianRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieTechnicianRateModelReturnModel
    _$MovieTechnicianRateModelReturnModelFromJson(Map<String, dynamic> json) =>
        MovieTechnicianRateModelReturnModel(
          model: json['model'] == null
              ? null
              : MovieTechnicianRateModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieTechnicianRateModelReturnModelToJson(
        MovieTechnicianRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieTechnicianRateUpdateModel _$MovieTechnicianRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieTechnicianRateUpdateModel(
      movieTechnicianRateId: (json['movieTechnicianRateId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieTechnicianRateUpdateModelToJson(
        MovieTechnicianRateUpdateModel instance) =>
    <String, dynamic>{
      'movieTechnicianRateId': instance.movieTechnicianRateId,
      'movieTechnicianId': instance.movieTechnicianId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieTechnicianUpdateModel _$MovieTechnicianUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieTechnicianUpdateModel(
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      parentMovieTechnicianId:
          (json['parentMovieTechnicianId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      movieTechnicianName: json['movieTechnicianName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      defaultCallTime: (json['defaultCallTime'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      ignoreCurrentMovieShootDayId:
          (json['ignoreCurrentMovieShootDayId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      existingMovieTechnicianRates:
          (json['existingMovieTechnicianRates'] as List<dynamic>?)
                  ?.map((e) => MovieTechnicianRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newMovieTechnicianRates:
          (json['newMovieTechnicianRates'] as List<dynamic>?)
                  ?.map((e) => MovieTechnicianRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieTechnicianUpdateModelToJson(
        MovieTechnicianUpdateModel instance) =>
    <String, dynamic>{
      'movieTechnicianId': instance.movieTechnicianId,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'parentMovieTechnicianId': instance.parentMovieTechnicianId,
      'technicianId': instance.technicianId,
      'technicianTypeId': instance.technicianTypeId,
      'movieTechnicianName': instance.movieTechnicianName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'defaultCallTime': instance.defaultCallTime,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'estimatedRate': instance.estimatedRate,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'ignoreCurrentMovieShootDayId': instance.ignoreCurrentMovieShootDayId,
      'useDefaultRates': instance.useDefaultRates,
      'existingMovieTechnicianRates': instance.existingMovieTechnicianRates
          ?.map((e) => e.toJson())
          .toList(),
      'newMovieTechnicianRates':
          instance.newMovieTechnicianRates?.map((e) => e.toJson()).toList(),
    };

MovieTechnicianWithCompanyTechnicianCreateModel
    _$MovieTechnicianWithCompanyTechnicianCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieTechnicianWithCompanyTechnicianCreateModel(
          technicianCode: json['technicianCode'] as String?,
          technicianFirstName: json['technicianFirstName'] as String?,
          technicianLastName: json['technicianLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          assistantName: json['assistantName'] as String?,
          assistantPhone: json['assistantPhone'] as String?,
          assistantEmail: json['assistantEmail'] as String?,
          technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          isDisabled: json['isDisabled'] as bool?,
          useDefaultRates: json['useDefaultRates'] as bool?,
          newTechnicianRates: (json['newTechnicianRates'] as List<dynamic>?)
                  ?.map((e) => TechnicianRateCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieTechnicianCode: json['movieTechnicianCode'] as String?,
          technicianId: (json['technicianId'] as num?)?.toInt(),
          parentMovieTechnicianId:
              (json['parentMovieTechnicianId'] as num?)?.toInt(),
          movieTechnicianName: json['movieTechnicianName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieTechnicianWithCompanyTechnicianCreateModelToJson(
        MovieTechnicianWithCompanyTechnicianCreateModel instance) =>
    <String, dynamic>{
      'technicianCode': instance.technicianCode,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'technicianTypeId': instance.technicianTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'useDefaultRates': instance.useDefaultRates,
      'newTechnicianRates':
          instance.newTechnicianRates?.map((e) => e.toJson()).toList(),
      'movieTechnicianId': instance.movieTechnicianId,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'technicianId': instance.technicianId,
      'parentMovieTechnicianId': instance.parentMovieTechnicianId,
      'movieTechnicianName': instance.movieTechnicianName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'movieId': instance.movieId,
    };

MovieTechnicianWithCompanyTechnicianModel
    _$MovieTechnicianWithCompanyTechnicianModelFromJson(
            Map<String, dynamic> json) =>
        MovieTechnicianWithCompanyTechnicianModel(
          movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
          movieTechnicianCode: json['movieTechnicianCode'] as String?,
          parentMovieTechnicianId:
              (json['parentMovieTechnicianId'] as num?)?.toInt(),
          technicianId: (json['technicianId'] as num?)?.toInt(),
          technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
          movieTechnicianName: json['movieTechnicianName'] as String?,
          requiredDays: (json['requiredDays'] as num?)?.toInt(),
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          defaultCallTime: (json['defaultCallTime'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['preProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['productionStatusTypeId'] as num?)?.toInt(),
          movieShootDayBudgetId:
              (json['movieShootDayBudgetId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          position: (json['position'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          postProductionStatusTypeName:
              json['postProductionStatusTypeName'] as String?,
          preProductionStatusTypeName:
              json['preProductionStatusTypeName'] as String?,
          productionStatusTypeName: json['productionStatusTypeName'] as String?,
          predefinedContractStatusTypeId:
              (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
          predefinedContractStatusTypeName:
              json['predefinedContractStatusTypeName'] as String?,
          notes: json['notes'] as String?,
          parentTechnicianFirstName:
              json['parentTechnicianFirstName'] as String?,
          parentTechnicianLastName: json['parentTechnicianLastName'] as String?,
          departmentName: json['departmentName'] as String?,
          technicianFirstName: json['technicianFirstName'] as String?,
          technicianLastName: json['technicianLastName'] as String?,
          technicianWorkPhone: json['technicianWorkPhone'] as String?,
          technicianCellPhone: json['technicianCellPhone'] as String?,
          technicianEmail: json['technicianEmail'] as String?,
          technicianAssistantName: json['technicianAssistantName'] as String?,
          technicianAssistantPhone: json['technicianAssistantPhone'] as String?,
          technicianAssistantEmail: json['technicianAssistantEmail'] as String?,
          predefinedContractAssignmentStatusTypeName:
              json['predefinedContractAssignmentStatusTypeName'] as String?,
          contractName: json['contractName'] as String?,
          parentMovieTechnicianName:
              json['parentMovieTechnicianName'] as String?,
          technicianName: json['technicianName'] as String?,
          technicianTypeName: json['technicianTypeName'] as String?,
          companyName: json['companyName'] as String?,
          companyCode: json['companyCode'] as String?,
          movieCode: json['movieCode'] as String?,
          movieTitle: json['movieTitle'] as String?,
          predefinedMovieStatusTypeName:
              json['predefinedMovieStatusTypeName'] as String?,
          predefinedMovieStageTypeName:
              json['predefinedMovieStageTypeName'] as String?,
          isMovieEnabled: json['isMovieEnabled'] as bool?,
          technicianCode: json['technicianCode'] as String?,
          canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
          defaultPreProductionMovieBudgetCategoryName:
              json['defaultPreProductionMovieBudgetCategoryName'] as String?,
          defaultProductionMovieBudgetCategoryName:
              json['defaultProductionMovieBudgetCategoryName'] as String?,
          defaultPostProductionMovieBudgetCategoryName:
              json['defaultPostProductionMovieBudgetCategoryName'] as String?,
          defaultPreProductionMovieBudgetCategoryCode:
              json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
          defaultProductionMovieBudgetCategoryCode:
              json['defaultProductionMovieBudgetCategoryCode'] as String?,
          defaultPostProductionMovieBudgetCategoryCode:
              json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
          existingMovieTechnicianRates:
              (json['existingMovieTechnicianRates'] as List<dynamic>?)
                      ?.map((e) => MovieTechnicianRateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          isNonMovieTechnician: json['isNonMovieTechnician'] as bool?,
        );

Map<String, dynamic> _$MovieTechnicianWithCompanyTechnicianModelToJson(
        MovieTechnicianWithCompanyTechnicianModel instance) =>
    <String, dynamic>{
      'movieTechnicianId': instance.movieTechnicianId,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'parentMovieTechnicianId': instance.parentMovieTechnicianId,
      'technicianId': instance.technicianId,
      'technicianTypeId': instance.technicianTypeId,
      'movieTechnicianName': instance.movieTechnicianName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'defaultCallTime': instance.defaultCallTime,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'estimatedRate': instance.estimatedRate,
      'departmentId': instance.departmentId,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'notes': instance.notes,
      'parentTechnicianFirstName': instance.parentTechnicianFirstName,
      'parentTechnicianLastName': instance.parentTechnicianLastName,
      'departmentName': instance.departmentName,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'technicianWorkPhone': instance.technicianWorkPhone,
      'technicianCellPhone': instance.technicianCellPhone,
      'technicianEmail': instance.technicianEmail,
      'technicianAssistantName': instance.technicianAssistantName,
      'technicianAssistantPhone': instance.technicianAssistantPhone,
      'technicianAssistantEmail': instance.technicianAssistantEmail,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'contractName': instance.contractName,
      'parentMovieTechnicianName': instance.parentMovieTechnicianName,
      'technicianName': instance.technicianName,
      'technicianTypeName': instance.technicianTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'technicianCode': instance.technicianCode,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieTechnicianRates': instance.existingMovieTechnicianRates
          ?.map((e) => e.toJson())
          .toList(),
      'isNonMovieTechnician': instance.isNonMovieTechnician,
    };

MovieTechnicianWithCompanyTechnicianModelReturnListModel
    _$MovieTechnicianWithCompanyTechnicianModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieTechnicianWithCompanyTechnicianModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieTechnicianWithCompanyTechnicianModel.fromJson(
                          e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String,
    dynamic> _$MovieTechnicianWithCompanyTechnicianModelReturnListModelToJson(
        MovieTechnicianWithCompanyTechnicianModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieUnitCreateModel _$MovieUnitCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieUnitCreateModel(
      movieUnitCode: json['movieUnitCode'] as String?,
      movieUnitName: json['movieUnitName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieUnitCreateModelToJson(
        MovieUnitCreateModel instance) =>
    <String, dynamic>{
      'movieUnitCode': instance.movieUnitCode,
      'movieUnitName': instance.movieUnitName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieUnitModel _$MovieUnitModelFromJson(Map<String, dynamic> json) =>
    MovieUnitModel(
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      movieUnitCode: json['movieUnitCode'] as String?,
      movieUnitName: json['movieUnitName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieUnitModelToJson(MovieUnitModel instance) =>
    <String, dynamic>{
      'movieUnitId': instance.movieUnitId,
      'movieUnitCode': instance.movieUnitCode,
      'movieUnitName': instance.movieUnitName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieUnitModelReturnListModel _$MovieUnitModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieUnitModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MovieUnitModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieUnitModelReturnListModelToJson(
        MovieUnitModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieUnitModelReturnModel _$MovieUnitModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieUnitModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieUnitModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieUnitModelReturnModelToJson(
        MovieUnitModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieUnitUpdateModel _$MovieUnitUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieUnitUpdateModel(
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      movieUnitCode: json['movieUnitCode'] as String?,
      movieUnitName: json['movieUnitName'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieUnitUpdateModelToJson(
        MovieUnitUpdateModel instance) =>
    <String, dynamic>{
      'movieUnitId': instance.movieUnitId,
      'movieUnitCode': instance.movieUnitCode,
      'movieUnitName': instance.movieUnitName,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieUpdateModel _$MovieUpdateModelFromJson(Map<String, dynamic> json) =>
    MovieUpdateModel(
      movieId: (json['movieId'] as num?)?.toInt(),
      movieCode: json['movieCode'] as String?,
      title: json['title'] as String?,
      language: json['language'] as String?,
      runningTime: (json['runningTime'] as num?)?.toInt(),
      budgetCost: (json['budgetCost'] as num?)?.toDouble(),
      actualCost: (json['actualCost'] as num?)?.toDouble(),
      estimatedCost: (json['estimatedCost'] as num?)?.toDouble(),
      companyId: (json['companyId'] as num?)?.toInt(),
      internalValidUntilDate: json['internalValidUntilDate'] == null
          ? null
          : DateTime.parse(json['internalValidUntilDate'] as String),
      predefinedMovieStageTypeId:
          (json['predefinedMovieStageTypeId'] as num?)?.toInt(),
      predefinedMovieStatusTypeId:
          (json['predefinedMovieStatusTypeId'] as num?)?.toInt(),
      releaseDate: json['releaseDate'] == null
          ? null
          : DateTime.parse(json['releaseDate'] as String),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      isSecondCompanyAvailable: json['isSecondCompanyAvailable'] as bool?,
      secondCompanyName: json['secondCompanyName'] as String?,
      secondCompanyEmail: json['secondCompanyEmail'] as String?,
      secondCompanyContactFirstName:
          json['secondCompanyContactFirstName'] as String?,
      secondCompanyContactLastName:
          json['secondCompanyContactLastName'] as String?,
      secondCompanyWorkPhone: json['secondCompanyWorkPhone'] as String?,
      secondCompanyCellPhone: json['secondCompanyCellPhone'] as String?,
      secondCompanyAddress1: json['secondCompanyAddress1'] as String?,
      secondCompanyAddress2: json['secondCompanyAddress2'] as String?,
      secondCompanyCity: json['secondCompanyCity'] as String?,
      secondCompanyStateId: (json['secondCompanyStateId'] as num?)?.toInt(),
      secondCompanyCountryId: (json['secondCompanyCountryId'] as num?)?.toInt(),
      secondCompanyProfileImageLocation:
          json['secondCompanyProfileImageLocation'] as String?,
      secondCompanyProfileImageActualFileName:
          json['secondCompanyProfileImageActualFileName'] as String?,
      isEnabled: json['isEnabled'] as bool?,
      newMovieGenres: (json['newMovieGenres'] as List<dynamic>?)
              ?.map((e) =>
                  MovieGenreCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingMovieGenres: (json['existingMovieGenres'] as List<dynamic>?)
              ?.map((e) =>
                  MovieGenreUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieUpdateModelToJson(MovieUpdateModel instance) =>
    <String, dynamic>{
      'movieId': instance.movieId,
      'movieCode': instance.movieCode,
      'title': instance.title,
      'language': instance.language,
      'runningTime': instance.runningTime,
      'budgetCost': instance.budgetCost,
      'actualCost': instance.actualCost,
      'estimatedCost': instance.estimatedCost,
      'companyId': instance.companyId,
      'internalValidUntilDate':
          instance.internalValidUntilDate?.toIso8601String(),
      'predefinedMovieStageTypeId': instance.predefinedMovieStageTypeId,
      'predefinedMovieStatusTypeId': instance.predefinedMovieStatusTypeId,
      'releaseDate': instance.releaseDate?.toIso8601String(),
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'isSecondCompanyAvailable': instance.isSecondCompanyAvailable,
      'secondCompanyName': instance.secondCompanyName,
      'secondCompanyEmail': instance.secondCompanyEmail,
      'secondCompanyContactFirstName': instance.secondCompanyContactFirstName,
      'secondCompanyContactLastName': instance.secondCompanyContactLastName,
      'secondCompanyWorkPhone': instance.secondCompanyWorkPhone,
      'secondCompanyCellPhone': instance.secondCompanyCellPhone,
      'secondCompanyAddress1': instance.secondCompanyAddress1,
      'secondCompanyAddress2': instance.secondCompanyAddress2,
      'secondCompanyCity': instance.secondCompanyCity,
      'secondCompanyStateId': instance.secondCompanyStateId,
      'secondCompanyCountryId': instance.secondCompanyCountryId,
      'secondCompanyProfileImageLocation':
          instance.secondCompanyProfileImageLocation,
      'secondCompanyProfileImageActualFileName':
          instance.secondCompanyProfileImageActualFileName,
      'isEnabled': instance.isEnabled,
      'newMovieGenres':
          instance.newMovieGenres?.map((e) => e.toJson()).toList(),
      'existingMovieGenres':
          instance.existingMovieGenres?.map((e) => e.toJson()).toList(),
    };

MovieUserCreateModel _$MovieUserCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieUserCreateModel(
      movieId: (json['movieId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      predefinedUserTypeId: (json['predefinedUserTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      existingUserPermissions: (json['existingUserPermissions']
                  as List<dynamic>?)
              ?.map((e) =>
                  UserPermissionUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      newUserPermissions: (json['newUserPermissions'] as List<dynamic>?)
              ?.map((e) =>
                  UserPermissionCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieUserCreateModelToJson(
        MovieUserCreateModel instance) =>
    <String, dynamic>{
      'movieId': instance.movieId,
      'userId': instance.userId,
      'predefinedUserTypeId': instance.predefinedUserTypeId,
      'companyId': instance.companyId,
      'existingUserPermissions':
          instance.existingUserPermissions?.map((e) => e.toJson()).toList(),
      'newUserPermissions':
          instance.newUserPermissions?.map((e) => e.toJson()).toList(),
    };

MovieUserModel _$MovieUserModelFromJson(Map<String, dynamic> json) =>
    MovieUserModel(
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      predefinedUserTypeId: (json['predefinedUserTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      userFirstName: json['userFirstName'] as String?,
      userLastName: json['userLastName'] as String?,
      userEmail: json['userEmail'] as String?,
      userName: json['userName'] as String?,
      predefinedUserTypeName: json['predefinedUserTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingUserPermissions:
          (json['existingUserPermissions'] as List<dynamic>?)
                  ?.map((e) =>
                      UserPermissionModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieUserModelToJson(MovieUserModel instance) =>
    <String, dynamic>{
      'movieUserId': instance.movieUserId,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'predefinedUserTypeId': instance.predefinedUserTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'userFirstName': instance.userFirstName,
      'userLastName': instance.userLastName,
      'userEmail': instance.userEmail,
      'userName': instance.userName,
      'predefinedUserTypeName': instance.predefinedUserTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingUserPermissions':
          instance.existingUserPermissions?.map((e) => e.toJson()).toList(),
    };

MovieUserModelReturnListModel _$MovieUserModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieUserModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MovieUserModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieUserModelReturnListModelToJson(
        MovieUserModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieUserModelReturnModel _$MovieUserModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieUserModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieUserModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieUserModelReturnModelToJson(
        MovieUserModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieUserUpdateModel _$MovieUserUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieUserUpdateModel(
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      predefinedUserTypeId: (json['predefinedUserTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      existingUserPermissions: (json['existingUserPermissions']
                  as List<dynamic>?)
              ?.map((e) =>
                  UserPermissionUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      newUserPermissions: (json['newUserPermissions'] as List<dynamic>?)
              ?.map((e) =>
                  UserPermissionCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieUserUpdateModelToJson(
        MovieUserUpdateModel instance) =>
    <String, dynamic>{
      'movieUserId': instance.movieUserId,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'predefinedUserTypeId': instance.predefinedUserTypeId,
      'companyId': instance.companyId,
      'existingUserPermissions':
          instance.existingUserPermissions?.map((e) => e.toJson()).toList(),
      'newUserPermissions':
          instance.newUserPermissions?.map((e) => e.toJson()).toList(),
    };

MovieVendorCreateModel _$MovieVendorCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorCreateModel(
      movieVendorCode: json['movieVendorCode'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      parentMovieVendorId: (json['parentMovieVendorId'] as num?)?.toInt(),
      movieVendorName: json['movieVendorName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      ignoreCurrentMovieShootDayId:
          (json['ignoreCurrentMovieShootDayId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      newMovieVendorRates: (json['newMovieVendorRates'] as List<dynamic>?)
              ?.map((e) => MovieVendorRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieVendorCreateModelToJson(
        MovieVendorCreateModel instance) =>
    <String, dynamic>{
      'movieVendorCode': instance.movieVendorCode,
      'vendorId': instance.vendorId,
      'vendorTypeId': instance.vendorTypeId,
      'parentMovieVendorId': instance.parentMovieVendorId,
      'movieVendorName': instance.movieVendorName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'departmentId': instance.departmentId,
      'estimatedRate': instance.estimatedRate,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'ignoreCurrentMovieShootDayId': instance.ignoreCurrentMovieShootDayId,
      'useDefaultRates': instance.useDefaultRates,
      'newMovieVendorRates':
          instance.newMovieVendorRates?.map((e) => e.toJson()).toList(),
    };

MovieVendorModel _$MovieVendorModelFromJson(Map<String, dynamic> json) =>
    MovieVendorModel(
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieVendorCode: json['movieVendorCode'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      parentMovieVendorId: (json['parentMovieVendorId'] as num?)?.toInt(),
      movieVendorName: json['movieVendorName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      predefinedContractStatusTypeId:
          (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
      predefinedContractStatusTypeName:
          json['predefinedContractStatusTypeName'] as String?,
      departmentName: json['departmentName'] as String?,
      vendorName: json['vendorName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTitle: json['movieTitle'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      isMovieEnabled: json['isMovieEnabled'] as bool?,
      vendorCode: json['vendorCode'] as String?,
      contractName: json['contractName'] as String?,
      vendorTypeName: json['vendorTypeName'] as String?,
      parentMovieVendorName: json['parentMovieVendorName'] as String?,
      notes: json['notes'] as String?,
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      defaultPreProductionMovieBudgetCategoryName:
          json['defaultPreProductionMovieBudgetCategoryName'] as String?,
      defaultProductionMovieBudgetCategoryName:
          json['defaultProductionMovieBudgetCategoryName'] as String?,
      defaultPostProductionMovieBudgetCategoryName:
          json['defaultPostProductionMovieBudgetCategoryName'] as String?,
      defaultPreProductionMovieBudgetCategoryCode:
          json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
      defaultProductionMovieBudgetCategoryCode:
          json['defaultProductionMovieBudgetCategoryCode'] as String?,
      defaultPostProductionMovieBudgetCategoryCode:
          json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
      predefinedContractAssignmentStatusTypeName:
          json['predefinedContractAssignmentStatusTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingMovieVendorRates:
          (json['existingMovieVendorRates'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieVendorRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$MovieVendorModelToJson(MovieVendorModel instance) =>
    <String, dynamic>{
      'movieVendorId': instance.movieVendorId,
      'movieVendorCode': instance.movieVendorCode,
      'vendorId': instance.vendorId,
      'vendorTypeId': instance.vendorTypeId,
      'parentMovieVendorId': instance.parentMovieVendorId,
      'movieVendorName': instance.movieVendorName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'departmentId': instance.departmentId,
      'estimatedRate': instance.estimatedRate,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'departmentName': instance.departmentName,
      'vendorName': instance.vendorName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'vendorCode': instance.vendorCode,
      'contractName': instance.contractName,
      'vendorTypeName': instance.vendorTypeName,
      'parentMovieVendorName': instance.parentMovieVendorName,
      'notes': instance.notes,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieVendorRates':
          instance.existingMovieVendorRates?.map((e) => e.toJson()).toList(),
    };

MovieVendorModelReturnListModel _$MovieVendorModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => MovieVendorModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieVendorModelReturnListModelToJson(
        MovieVendorModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieVendorModelReturnModel _$MovieVendorModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieVendorModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieVendorModelReturnModelToJson(
        MovieVendorModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieVendorRateCreateModel _$MovieVendorRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorRateCreateModel(
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieVendorRateCreateModelToJson(
        MovieVendorRateCreateModel instance) =>
    <String, dynamic>{
      'movieVendorId': instance.movieVendorId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieVendorRateModel _$MovieVendorRateModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorRateModel(
      movieVendorRateId: (json['movieVendorRateId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieVendorName: json['movieVendorName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      companyName: json['companyName'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      movieCode: json['movieCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieVendorRateModelToJson(
        MovieVendorRateModel instance) =>
    <String, dynamic>{
      'movieVendorRateId': instance.movieVendorRateId,
      'movieVendorId': instance.movieVendorId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieVendorName': instance.movieVendorName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'companyName': instance.companyName,
      'movieVendorCode': instance.movieVendorCode,
      'movieCode': instance.movieCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieVendorRateModelReturnListModel
    _$MovieVendorRateModelReturnListModelFromJson(Map<String, dynamic> json) =>
        MovieVendorRateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieVendorRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieVendorRateModelReturnListModelToJson(
        MovieVendorRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieVendorRateModelReturnModel _$MovieVendorRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorRateModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieVendorRateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieVendorRateModelReturnModelToJson(
        MovieVendorRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieVendorRateUpdateModel _$MovieVendorRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorRateUpdateModel(
      movieVendorRateId: (json['movieVendorRateId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieVendorRateUpdateModelToJson(
        MovieVendorRateUpdateModel instance) =>
    <String, dynamic>{
      'movieVendorRateId': instance.movieVendorRateId,
      'movieVendorId': instance.movieVendorId,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

MovieVendorUpdateModel _$MovieVendorUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorUpdateModel(
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieVendorCode: json['movieVendorCode'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      parentMovieVendorId: (json['parentMovieVendorId'] as num?)?.toInt(),
      movieVendorName: json['movieVendorName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      ignoreCurrentMovieShootDayId:
          (json['ignoreCurrentMovieShootDayId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      existingMovieVendorRates:
          (json['existingMovieVendorRates'] as List<dynamic>?)
                  ?.map((e) => MovieVendorRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      newMovieVendorRates: (json['newMovieVendorRates'] as List<dynamic>?)
              ?.map((e) => MovieVendorRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MovieVendorUpdateModelToJson(
        MovieVendorUpdateModel instance) =>
    <String, dynamic>{
      'movieVendorId': instance.movieVendorId,
      'movieVendorCode': instance.movieVendorCode,
      'vendorId': instance.vendorId,
      'vendorTypeId': instance.vendorTypeId,
      'parentMovieVendorId': instance.parentMovieVendorId,
      'movieVendorName': instance.movieVendorName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'departmentId': instance.departmentId,
      'estimatedRate': instance.estimatedRate,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'ignoreCurrentMovieShootDayId': instance.ignoreCurrentMovieShootDayId,
      'useDefaultRates': instance.useDefaultRates,
      'existingMovieVendorRates':
          instance.existingMovieVendorRates?.map((e) => e.toJson()).toList(),
      'newMovieVendorRates':
          instance.newMovieVendorRates?.map((e) => e.toJson()).toList(),
    };

MovieVendorWithCompanyVendorCreateModel
    _$MovieVendorWithCompanyVendorCreateModelFromJson(
            Map<String, dynamic> json) =>
        MovieVendorWithCompanyVendorCreateModel(
          vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
          vendorCode: json['vendorCode'] as String?,
          vendorName: json['vendorName'] as String?,
          contactFirstName: json['contactFirstName'] as String?,
          contactLastName: json['contactLastName'] as String?,
          workPhone: json['workPhone'] as String?,
          cellPhone: json['cellPhone'] as String?,
          email: json['email'] as String?,
          address1: json['address1'] as String?,
          address2: json['address2'] as String?,
          city: json['city'] as String?,
          state: json['state'] as String?,
          country: json['country'] as String?,
          position: (json['position'] as num?)?.toInt(),
          profileImageLocation: json['profileImageLocation'] as String?,
          profileImageActualFileName:
              json['profileImageActualFileName'] as String?,
          defaultPreProductionBudgetCategoryId:
              (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultProductionBudgetCategoryId:
              (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionBudgetCategoryId:
              (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
          departmentId: (json['departmentId'] as num?)?.toInt(),
          doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
          isDisabled: json['isDisabled'] as bool?,
          companyId: (json['companyId'] as num?)?.toInt(),
          useDefaultRates: json['useDefaultRates'] as bool?,
          newVendorRates: (json['newVendorRates'] as List<dynamic>?)
                  ?.map((e) =>
                      VendorRateCreateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
          movieVendorCode: json['movieVendorCode'] as String?,
          vendorId: (json['vendorId'] as num?)?.toInt(),
          parentMovieVendorId: (json['parentMovieVendorId'] as num?)?.toInt(),
          movieVendorName: json['movieVendorName'] as String?,
          predefinedContractAssignmentStatusTypeId:
              (json['predefinedContractAssignmentStatusTypeId'] as num?)
                  ?.toInt(),
          contractId: (json['contractId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['isPartOfMajorCrew'] as bool?,
          defaultPreProductionMovieBudgetCategoryId:
              (json['defaultPreProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          defaultProductionMovieBudgetCategoryId:
              (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
          defaultPostProductionMovieBudgetCategoryId:
              (json['defaultPostProductionMovieBudgetCategoryId'] as num?)
                  ?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieVendorWithCompanyVendorCreateModelToJson(
        MovieVendorWithCompanyVendorCreateModel instance) =>
    <String, dynamic>{
      'vendorTypeId': instance.vendorTypeId,
      'vendorCode': instance.vendorCode,
      'vendorName': instance.vendorName,
      'contactFirstName': instance.contactFirstName,
      'contactLastName': instance.contactLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'state': instance.state,
      'country': instance.country,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'isDisabled': instance.isDisabled,
      'companyId': instance.companyId,
      'useDefaultRates': instance.useDefaultRates,
      'newVendorRates':
          instance.newVendorRates?.map((e) => e.toJson()).toList(),
      'movieVendorId': instance.movieVendorId,
      'movieVendorCode': instance.movieVendorCode,
      'vendorId': instance.vendorId,
      'parentMovieVendorId': instance.parentMovieVendorId,
      'movieVendorName': instance.movieVendorName,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'isPartOfMajorCrew': instance.isPartOfMajorCrew,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'movieId': instance.movieId,
    };

MovieVendorWithCompanyVendorModel _$MovieVendorWithCompanyVendorModelFromJson(
        Map<String, dynamic> json) =>
    MovieVendorWithCompanyVendorModel(
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      movieVendorCode: json['movieVendorCode'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      parentMovieVendorId: (json['parentMovieVendorId'] as num?)?.toInt(),
      movieVendorName: json['movieVendorName'] as String?,
      requiredDays: (json['requiredDays'] as num?)?.toInt(),
      predefinedContractAssignmentStatusTypeId:
          (json['predefinedContractAssignmentStatusTypeId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      isDefaultForAllShootDay: json['isDefaultForAllShootDay'] as bool?,
      defaultPreProductionMovieBudgetCategoryId:
          (json['defaultPreProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionMovieBudgetCategoryId:
          (json['defaultProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionMovieBudgetCategoryId:
          (json['defaultPostProductionMovieBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      estimatedRate: (json['estimatedRate'] as num?)?.toDouble(),
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      predefinedContractStatusTypeId:
          (json['predefinedContractStatusTypeId'] as num?)?.toInt(),
      predefinedContractStatusTypeName:
          json['predefinedContractStatusTypeName'] as String?,
      departmentName: json['departmentName'] as String?,
      vendorName: json['vendorName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      movieCode: json['movieCode'] as String?,
      movieTitle: json['movieTitle'] as String?,
      predefinedMovieStatusTypeName:
          json['predefinedMovieStatusTypeName'] as String?,
      predefinedMovieStageTypeName:
          json['predefinedMovieStageTypeName'] as String?,
      isMovieEnabled: json['isMovieEnabled'] as bool?,
      vendorCode: json['vendorCode'] as String?,
      contractName: json['contractName'] as String?,
      vendorTypeName: json['vendorTypeName'] as String?,
      parentMovieVendorName: json['parentMovieVendorName'] as String?,
      notes: json['notes'] as String?,
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      defaultPreProductionMovieBudgetCategoryName:
          json['defaultPreProductionMovieBudgetCategoryName'] as String?,
      defaultProductionMovieBudgetCategoryName:
          json['defaultProductionMovieBudgetCategoryName'] as String?,
      defaultPostProductionMovieBudgetCategoryName:
          json['defaultPostProductionMovieBudgetCategoryName'] as String?,
      defaultPreProductionMovieBudgetCategoryCode:
          json['defaultPreProductionMovieBudgetCategoryCode'] as String?,
      defaultProductionMovieBudgetCategoryCode:
          json['defaultProductionMovieBudgetCategoryCode'] as String?,
      defaultPostProductionMovieBudgetCategoryCode:
          json['defaultPostProductionMovieBudgetCategoryCode'] as String?,
      predefinedContractAssignmentStatusTypeName:
          json['predefinedContractAssignmentStatusTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingMovieVendorRates:
          (json['existingMovieVendorRates'] as List<dynamic>?)
                  ?.map((e) =>
                      MovieVendorRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
      isNonMovieVendor: json['isNonMovieVendor'] as bool?,
    );

Map<String, dynamic> _$MovieVendorWithCompanyVendorModelToJson(
        MovieVendorWithCompanyVendorModel instance) =>
    <String, dynamic>{
      'movieVendorId': instance.movieVendorId,
      'movieVendorCode': instance.movieVendorCode,
      'vendorId': instance.vendorId,
      'vendorTypeId': instance.vendorTypeId,
      'parentMovieVendorId': instance.parentMovieVendorId,
      'movieVendorName': instance.movieVendorName,
      'requiredDays': instance.requiredDays,
      'predefinedContractAssignmentStatusTypeId':
          instance.predefinedContractAssignmentStatusTypeId,
      'contractId': instance.contractId,
      'isDefaultForAllShootDay': instance.isDefaultForAllShootDay,
      'defaultPreProductionMovieBudgetCategoryId':
          instance.defaultPreProductionMovieBudgetCategoryId,
      'defaultProductionMovieBudgetCategoryId':
          instance.defaultProductionMovieBudgetCategoryId,
      'defaultPostProductionMovieBudgetCategoryId':
          instance.defaultPostProductionMovieBudgetCategoryId,
      'departmentId': instance.departmentId,
      'estimatedRate': instance.estimatedRate,
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'productionStatusTypeId': instance.productionStatusTypeId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'predefinedContractStatusTypeName':
          instance.predefinedContractStatusTypeName,
      'departmentName': instance.departmentName,
      'vendorName': instance.vendorName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'movieCode': instance.movieCode,
      'movieTitle': instance.movieTitle,
      'predefinedMovieStatusTypeName': instance.predefinedMovieStatusTypeName,
      'predefinedMovieStageTypeName': instance.predefinedMovieStageTypeName,
      'isMovieEnabled': instance.isMovieEnabled,
      'vendorCode': instance.vendorCode,
      'contractName': instance.contractName,
      'vendorTypeName': instance.vendorTypeName,
      'parentMovieVendorName': instance.parentMovieVendorName,
      'notes': instance.notes,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'defaultPreProductionMovieBudgetCategoryName':
          instance.defaultPreProductionMovieBudgetCategoryName,
      'defaultProductionMovieBudgetCategoryName':
          instance.defaultProductionMovieBudgetCategoryName,
      'defaultPostProductionMovieBudgetCategoryName':
          instance.defaultPostProductionMovieBudgetCategoryName,
      'defaultPreProductionMovieBudgetCategoryCode':
          instance.defaultPreProductionMovieBudgetCategoryCode,
      'defaultProductionMovieBudgetCategoryCode':
          instance.defaultProductionMovieBudgetCategoryCode,
      'defaultPostProductionMovieBudgetCategoryCode':
          instance.defaultPostProductionMovieBudgetCategoryCode,
      'predefinedContractAssignmentStatusTypeName':
          instance.predefinedContractAssignmentStatusTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingMovieVendorRates':
          instance.existingMovieVendorRates?.map((e) => e.toJson()).toList(),
      'isNonMovieVendor': instance.isNonMovieVendor,
    };

MovieVendorWithCompanyVendorModelReturnListModel
    _$MovieVendorWithCompanyVendorModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        MovieVendorWithCompanyVendorModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => MovieVendorWithCompanyVendorModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MovieVendorWithCompanyVendorModelReturnListModelToJson(
        MovieVendorWithCompanyVendorModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieVoucherCreateModel _$MovieVoucherCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieVoucherCreateModel(
      movieVoucherDate: json['movieVoucherDate'] == null
          ? null
          : DateTime.parse(json['movieVoucherDate'] as String),
      movieVoucherAmount: (json['movieVoucherAmount'] as num?)?.toDouble(),
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieVoucherLocation: json['movieVoucherLocation'] as String?,
      movieVoucherActualFileName: json['movieVoucherActualFileName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieVoucherCreateModelToJson(
        MovieVoucherCreateModel instance) =>
    <String, dynamic>{
      'movieVoucherDate': instance.movieVoucherDate?.toIso8601String(),
      'movieVoucherAmount': instance.movieVoucherAmount,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieVoucherLocation': instance.movieVoucherLocation,
      'movieVoucherActualFileName': instance.movieVoucherActualFileName,
      'companyId': instance.companyId,
    };

MovieVoucherModel _$MovieVoucherModelFromJson(Map<String, dynamic> json) =>
    MovieVoucherModel(
      movieVoucherId: (json['movieVoucherId'] as num?)?.toInt(),
      movieVoucherDate: json['movieVoucherDate'] == null
          ? null
          : DateTime.parse(json['movieVoucherDate'] as String),
      movieVoucherAmount: (json['movieVoucherAmount'] as num?)?.toDouble(),
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieVoucherLocation: json['movieVoucherLocation'] as String?,
      movieVoucherActualFileName: json['movieVoucherActualFileName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieVoucherCode: json['movieVoucherCode'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      movieVoucherAmountInWords: json['movieVoucherAmountInWords'] as String?,
      predefinedBudgetOrExpenseTypeId:
          (json['predefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
      predefinedBudgetOrExpenseTypeName:
          json['predefinedBudgetOrExpenseTypeName'] as String?,
      movieArtistName: json['movieArtistName'] as String?,
      movieTechnicianName: json['movieTechnicianName'] as String?,
      movieEquipmentName: json['movieEquipmentName'] as String?,
      movieVendorName: json['movieVendorName'] as String?,
      moviePropertyName: json['moviePropertyName'] as String?,
      movieLocationName: json['movieLocationName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$MovieVoucherModelToJson(MovieVoucherModel instance) =>
    <String, dynamic>{
      'movieVoucherId': instance.movieVoucherId,
      'movieVoucherDate': instance.movieVoucherDate?.toIso8601String(),
      'movieVoucherAmount': instance.movieVoucherAmount,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieVoucherLocation': instance.movieVoucherLocation,
      'movieVoucherActualFileName': instance.movieVoucherActualFileName,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieVoucherCode': instance.movieVoucherCode,
      'movieId': instance.movieId,
      'companyName': instance.companyName,
      'movieVoucherAmountInWords': instance.movieVoucherAmountInWords,
      'predefinedBudgetOrExpenseTypeId':
          instance.predefinedBudgetOrExpenseTypeId,
      'predefinedBudgetOrExpenseTypeName':
          instance.predefinedBudgetOrExpenseTypeName,
      'movieArtistName': instance.movieArtistName,
      'movieTechnicianName': instance.movieTechnicianName,
      'movieEquipmentName': instance.movieEquipmentName,
      'movieVendorName': instance.movieVendorName,
      'moviePropertyName': instance.moviePropertyName,
      'movieLocationName': instance.movieLocationName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

MovieVoucherModelReturnListModel _$MovieVoucherModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    MovieVoucherModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => MovieVoucherModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieVoucherModelReturnListModelToJson(
        MovieVoucherModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieVoucherModelReturnModel _$MovieVoucherModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    MovieVoucherModelReturnModel(
      model: json['model'] == null
          ? null
          : MovieVoucherModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MovieVoucherModelReturnModelToJson(
        MovieVoucherModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

MovieWithCompanyCreateModel _$MovieWithCompanyCreateModelFromJson(
        Map<String, dynamic> json) =>
    MovieWithCompanyCreateModel(
      movie: json['movie'] == null
          ? null
          : MovieCreateModel.fromJson(json['movie'] as Map<String, dynamic>),
      company: json['company'] == null
          ? null
          : CompanyCreateModel.fromJson(
              json['company'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$MovieWithCompanyCreateModelToJson(
        MovieWithCompanyCreateModel instance) =>
    <String, dynamic>{
      'movie': instance.movie?.toJson(),
      'company': instance.company?.toJson(),
    };

MultipleAnonymousUserCreateModel _$MultipleAnonymousUserCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleAnonymousUserCreateModel(
      newAnonymousUsers: (json['newAnonymousUsers'] as List<dynamic>?)
              ?.map((e) =>
                  AnonymousUserCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleAnonymousUserCreateModelToJson(
        MultipleAnonymousUserCreateModel instance) =>
    <String, dynamic>{
      'newAnonymousUsers':
          instance.newAnonymousUsers?.map((e) => e.toJson()).toList(),
    };

MultipleChatCreateModel _$MultipleChatCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleChatCreateModel(
      newChats: (json['newChats'] as List<dynamic>?)
              ?.map((e) => ChatCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleChatCreateModelToJson(
        MultipleChatCreateModel instance) =>
    <String, dynamic>{
      'newChats': instance.newChats?.map((e) => e.toJson()).toList(),
    };

MultipleChatMessageCreateModel _$MultipleChatMessageCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleChatMessageCreateModel(
      newChatMessages: (json['newChatMessages'] as List<dynamic>?)
              ?.map((e) =>
                  ChatMessageCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleChatMessageCreateModelToJson(
        MultipleChatMessageCreateModel instance) =>
    <String, dynamic>{
      'newChatMessages':
          instance.newChatMessages?.map((e) => e.toJson()).toList(),
    };

MultipleChatMessageStatusCreateModel
    _$MultipleChatMessageStatusCreateModelFromJson(Map<String, dynamic> json) =>
        MultipleChatMessageStatusCreateModel(
          newChatMessageStatuss:
              (json['newChatMessageStatuss'] as List<dynamic>?)
                      ?.map((e) => ChatMessageStatusCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleChatMessageStatusCreateModelToJson(
        MultipleChatMessageStatusCreateModel instance) =>
    <String, dynamic>{
      'newChatMessageStatuss':
          instance.newChatMessageStatuss?.map((e) => e.toJson()).toList(),
    };

MultipleChatUserCreateModel _$MultipleChatUserCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleChatUserCreateModel(
      newChatUsers: (json['newChatUsers'] as List<dynamic>?)
              ?.map((e) =>
                  ChatUserCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleChatUserCreateModelToJson(
        MultipleChatUserCreateModel instance) =>
    <String, dynamic>{
      'newChatUsers': instance.newChatUsers?.map((e) => e.toJson()).toList(),
    };

MultipleClientLogCreateModel _$MultipleClientLogCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleClientLogCreateModel(
      newClientLogs: (json['newClientLogs'] as List<dynamic>?)
              ?.map((e) =>
                  ClientLogCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleClientLogCreateModelToJson(
        MultipleClientLogCreateModel instance) =>
    <String, dynamic>{
      'newClientLogs': instance.newClientLogs?.map((e) => e.toJson()).toList(),
    };

MultipleColorTypeCreateModel _$MultipleColorTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleColorTypeCreateModel(
      newColorTypes: (json['newColorTypes'] as List<dynamic>?)
              ?.map((e) =>
                  ColorTypeCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleColorTypeCreateModelToJson(
        MultipleColorTypeCreateModel instance) =>
    <String, dynamic>{
      'newColorTypes': instance.newColorTypes?.map((e) => e.toJson()).toList(),
    };

MultipleContractStatusUpdateModel _$MultipleContractStatusUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleContractStatusUpdateModel(
      contractIds: (json['contractIds'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
      predefinedContractStatusId:
          (json['predefinedContractStatusId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MultipleContractStatusUpdateModelToJson(
        MultipleContractStatusUpdateModel instance) =>
    <String, dynamic>{
      'contractIds': instance.contractIds,
      'predefinedContractStatusId': instance.predefinedContractStatusId,
    };

MultipleDefaultUserTypePermissionCreateModel
    _$MultipleDefaultUserTypePermissionCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleDefaultUserTypePermissionCreateModel(
          newDefaultUserTypePermissions: (json['newDefaultUserTypePermissions']
                      as List<dynamic>?)
                  ?.map((e) => DefaultUserTypePermissionCreateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
        );

Map<String, dynamic> _$MultipleDefaultUserTypePermissionCreateModelToJson(
        MultipleDefaultUserTypePermissionCreateModel instance) =>
    <String, dynamic>{
      'newDefaultUserTypePermissions': instance.newDefaultUserTypePermissions
          ?.map((e) => e.toJson())
          .toList(),
    };

MultipleDepartmentCreateModel _$MultipleDepartmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleDepartmentCreateModel(
      newDepartments: (json['newDepartments'] as List<dynamic>?)
              ?.map((e) =>
                  DepartmentCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleDepartmentCreateModelToJson(
        MultipleDepartmentCreateModel instance) =>
    <String, dynamic>{
      'newDepartments':
          instance.newDepartments?.map((e) => e.toJson()).toList(),
    };

MultipleDigitalSignatureServerCreateModel
    _$MultipleDigitalSignatureServerCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleDigitalSignatureServerCreateModel(
          newDigitalSignatureServers:
              (json['newDigitalSignatureServers'] as List<dynamic>?)
                      ?.map((e) => DigitalSignatureServerCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleDigitalSignatureServerCreateModelToJson(
        MultipleDigitalSignatureServerCreateModel instance) =>
    <String, dynamic>{
      'newDigitalSignatureServers':
          instance.newDigitalSignatureServers?.map((e) => e.toJson()).toList(),
    };

MultipleEquipmentTransactionCreateModel
    _$MultipleEquipmentTransactionCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleEquipmentTransactionCreateModel(
          newEquipmentTransactions:
              (json['newEquipmentTransactions'] as List<dynamic>?)
                      ?.map((e) => EquipmentTransactionCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleEquipmentTransactionCreateModelToJson(
        MultipleEquipmentTransactionCreateModel instance) =>
    <String, dynamic>{
      'newEquipmentTransactions':
          instance.newEquipmentTransactions?.map((e) => e.toJson()).toList(),
    };

MultipleFileAttachmentFolderCreateModel
    _$MultipleFileAttachmentFolderCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleFileAttachmentFolderCreateModel(
          newFileAttachmentFolders:
              (json['newFileAttachmentFolders'] as List<dynamic>?)
                      ?.map((e) => FileAttachmentFolderCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleFileAttachmentFolderCreateModelToJson(
        MultipleFileAttachmentFolderCreateModel instance) =>
    <String, dynamic>{
      'newFileAttachmentFolders':
          instance.newFileAttachmentFolders?.map((e) => e.toJson()).toList(),
    };

MultipleLedgerTypeCreateModel _$MultipleLedgerTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleLedgerTypeCreateModel(
      newLedgerTypes: (json['newLedgerTypes'] as List<dynamic>?)
              ?.map((e) =>
                  LedgerTypeCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleLedgerTypeCreateModelToJson(
        MultipleLedgerTypeCreateModel instance) =>
    <String, dynamic>{
      'newLedgerTypes':
          instance.newLedgerTypes?.map((e) => e.toJson()).toList(),
    };

MultipleMlModelTrainingSessionCreateModel
    _$MultipleMlModelTrainingSessionCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMlModelTrainingSessionCreateModel(
          newMlModelTrainingSessions:
              (json['newMlModelTrainingSessions'] as List<dynamic>?)
                      ?.map((e) => MlModelTrainingSessionCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleMlModelTrainingSessionCreateModelToJson(
        MultipleMlModelTrainingSessionCreateModel instance) =>
    <String, dynamic>{
      'newMlModelTrainingSessions':
          instance.newMlModelTrainingSessions?.map((e) => e.toJson()).toList(),
    };

MultipleMovieArtistCreateModel _$MultipleMovieArtistCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieArtistCreateModel(
      newMovieArtists: (json['newMovieArtists'] as List<dynamic>?)
              ?.map((e) =>
                  MovieArtistCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieArtistCreateModelToJson(
        MultipleMovieArtistCreateModel instance) =>
    <String, dynamic>{
      'newMovieArtists':
          instance.newMovieArtists?.map((e) => e.toJson()).toList(),
    };

MultipleMovieCommitmentTaskCreateModel
    _$MultipleMovieCommitmentTaskCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieCommitmentTaskCreateModel(
          newMovieCommitmentTasks:
              (json['newMovieCommitmentTasks'] as List<dynamic>?)
                      ?.map((e) => MovieCommitmentTaskCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleMovieCommitmentTaskCreateModelToJson(
        MultipleMovieCommitmentTaskCreateModel instance) =>
    <String, dynamic>{
      'newMovieCommitmentTasks':
          instance.newMovieCommitmentTasks?.map((e) => e.toJson()).toList(),
    };

MultipleMovieEquipmentCreateModel _$MultipleMovieEquipmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieEquipmentCreateModel(
      newMovieEquipments: (json['newMovieEquipments'] as List<dynamic>?)
              ?.map((e) =>
                  MovieEquipmentCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieEquipmentCreateModelToJson(
        MultipleMovieEquipmentCreateModel instance) =>
    <String, dynamic>{
      'newMovieEquipments':
          instance.newMovieEquipments?.map((e) => e.toJson()).toList(),
    };

MultipleMovieLocationCandidateCreateModel
    _$MultipleMovieLocationCandidateCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieLocationCandidateCreateModel(
          newMovieLocationCandidates:
              (json['newMovieLocationCandidates'] as List<dynamic>?)
                      ?.map((e) => MovieLocationCandidateCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleMovieLocationCandidateCreateModelToJson(
        MultipleMovieLocationCandidateCreateModel instance) =>
    <String, dynamic>{
      'newMovieLocationCandidates':
          instance.newMovieLocationCandidates?.map((e) => e.toJson()).toList(),
    };

MultipleMovieLocationCategoryCreateModel
    _$MultipleMovieLocationCategoryCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieLocationCategoryCreateModel(
          newMovieLocationCategories:
              (json['newMovieLocationCategories'] as List<dynamic>?)
                      ?.map((e) => MovieLocationCategoryCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleMovieLocationCategoryCreateModelToJson(
        MultipleMovieLocationCategoryCreateModel instance) =>
    <String, dynamic>{
      'newMovieLocationCategories':
          instance.newMovieLocationCategories?.map((e) => e.toJson()).toList(),
    };

MultipleMovieLocationCreateModel _$MultipleMovieLocationCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieLocationCreateModel(
      newMovieLocations: (json['newMovieLocations'] as List<dynamic>?)
              ?.map((e) =>
                  MovieLocationCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieLocationCreateModelToJson(
        MultipleMovieLocationCreateModel instance) =>
    <String, dynamic>{
      'newMovieLocations':
          instance.newMovieLocations?.map((e) => e.toJson()).toList(),
    };

MultipleMoviePropertyCreateModel _$MultipleMoviePropertyCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMoviePropertyCreateModel(
      newMovieProperties: (json['newMovieProperties'] as List<dynamic>?)
              ?.map((e) =>
                  MoviePropertyCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMoviePropertyCreateModelToJson(
        MultipleMoviePropertyCreateModel instance) =>
    <String, dynamic>{
      'newMovieProperties':
          instance.newMovieProperties?.map((e) => e.toJson()).toList(),
    };

MultipleMovieSceneCreateModel _$MultipleMovieSceneCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieSceneCreateModel(
      newMovieScenes: (json['newMovieScenes'] as List<dynamic>?)
              ?.map((e) =>
                  MovieSceneCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieSceneCreateModelToJson(
        MultipleMovieSceneCreateModel instance) =>
    <String, dynamic>{
      'newMovieScenes':
          instance.newMovieScenes?.map((e) => e.toJson()).toList(),
    };

MultipleMovieShootDayArtistPaymentStatusUpdateModel
    _$MultipleMovieShootDayArtistPaymentStatusUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayArtistPaymentStatusUpdateModel(
          movieShootDayArtistIds:
              (json['movieShootDayArtistIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
          predefinedPaymentStatusTypeId:
              (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MultipleMovieShootDayArtistPaymentStatusUpdateModelToJson(
            MultipleMovieShootDayArtistPaymentStatusUpdateModel instance) =>
        <String, dynamic>{
          'movieShootDayArtistIds': instance.movieShootDayArtistIds,
          'predefinedPaymentStatusTypeId':
              instance.predefinedPaymentStatusTypeId,
        };

MultipleMovieShootDayBudgetCreateOrUpdateModel
    _$MultipleMovieShootDayBudgetCreateOrUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayBudgetCreateOrUpdateModel(
          newMovieShootDayBudgetModels:
              (json['newMovieShootDayBudgetModels'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayBudgetCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          existingMovieShootDayBudgetModels:
              (json['existingMovieShootDayBudgetModels'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayBudgetUpdateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleMovieShootDayBudgetCreateOrUpdateModelToJson(
        MultipleMovieShootDayBudgetCreateOrUpdateModel instance) =>
    <String, dynamic>{
      'newMovieShootDayBudgetModels': instance.newMovieShootDayBudgetModels
          ?.map((e) => e.toJson())
          .toList(),
      'existingMovieShootDayBudgetModels': instance
          .existingMovieShootDayBudgetModels
          ?.map((e) => e.toJson())
          .toList(),
    };

MultipleMovieShootDayCreateModel _$MultipleMovieShootDayCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieShootDayCreateModel(
      newMovieShootDays: (json['newMovieShootDays'] as List<dynamic>?)
              ?.map((e) =>
                  MovieShootDayCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieShootDayCreateModelToJson(
        MultipleMovieShootDayCreateModel instance) =>
    <String, dynamic>{
      'newMovieShootDays':
          instance.newMovieShootDays?.map((e) => e.toJson()).toList(),
    };

MultipleMovieShootDayEquipmentPaymentStatusUpdateModel
    _$MultipleMovieShootDayEquipmentPaymentStatusUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayEquipmentPaymentStatusUpdateModel(
          movieShootDayEquipmentIds:
              (json['movieShootDayEquipmentIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
          predefinedPaymentStatusTypeId:
              (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MultipleMovieShootDayEquipmentPaymentStatusUpdateModelToJson(
            MultipleMovieShootDayEquipmentPaymentStatusUpdateModel instance) =>
        <String, dynamic>{
          'movieShootDayEquipmentIds': instance.movieShootDayEquipmentIds,
          'predefinedPaymentStatusTypeId':
              instance.predefinedPaymentStatusTypeId,
        };

MultipleMovieShootDayExpenseCreateOrUpdateModel
    _$MultipleMovieShootDayExpenseCreateOrUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayExpenseCreateOrUpdateModel(
          newMovieShootDayExpenseModels:
              (json['newMovieShootDayExpenseModels'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayExpenseCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          existingMovieShootDayExpenseModels:
              (json['existingMovieShootDayExpenseModels'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayExpenseUpdateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleMovieShootDayExpenseCreateOrUpdateModelToJson(
        MultipleMovieShootDayExpenseCreateOrUpdateModel instance) =>
    <String, dynamic>{
      'newMovieShootDayExpenseModels': instance.newMovieShootDayExpenseModels
          ?.map((e) => e.toJson())
          .toList(),
      'existingMovieShootDayExpenseModels': instance
          .existingMovieShootDayExpenseModels
          ?.map((e) => e.toJson())
          .toList(),
    };

MultipleMovieShootDayPropertyPaymentStatusUpdateModel
    _$MultipleMovieShootDayPropertyPaymentStatusUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayPropertyPaymentStatusUpdateModel(
          movieShootDayPropertyIds:
              (json['movieShootDayPropertyIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
          predefinedPaymentStatusTypeId:
              (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MultipleMovieShootDayPropertyPaymentStatusUpdateModelToJson(
            MultipleMovieShootDayPropertyPaymentStatusUpdateModel instance) =>
        <String, dynamic>{
          'movieShootDayPropertyIds': instance.movieShootDayPropertyIds,
          'predefinedPaymentStatusTypeId':
              instance.predefinedPaymentStatusTypeId,
        };

MultipleMovieShootDayResourcePaymentStatusUpdateModel
    _$MultipleMovieShootDayResourcePaymentStatusUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayResourcePaymentStatusUpdateModel(
          movieShootDayResourceModels:
              (json['movieShootDayResourceModels'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayResourceModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
          predefinedPaymentStatusTypeId:
              (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MultipleMovieShootDayResourcePaymentStatusUpdateModelToJson(
            MultipleMovieShootDayResourcePaymentStatusUpdateModel instance) =>
        <String, dynamic>{
          'movieShootDayResourceModels': instance.movieShootDayResourceModels
              ?.map((e) => e.toJson())
              .toList(),
          'predefinedPaymentStatusTypeId':
              instance.predefinedPaymentStatusTypeId,
        };

MultipleMovieShootDaySceneStatusUpdateModel
    _$MultipleMovieShootDaySceneStatusUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDaySceneStatusUpdateModel(
          movieShootDaySceneIds:
              (json['movieShootDaySceneIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
          predefinedMovieShootDaySceneStatusId:
              (json['predefinedMovieShootDaySceneStatusId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$MultipleMovieShootDaySceneStatusUpdateModelToJson(
        MultipleMovieShootDaySceneStatusUpdateModel instance) =>
    <String, dynamic>{
      'movieShootDaySceneIds': instance.movieShootDaySceneIds,
      'predefinedMovieShootDaySceneStatusId':
          instance.predefinedMovieShootDaySceneStatusId,
    };

MultipleMovieShootDayScriptFileCreateModel
    _$MultipleMovieShootDayScriptFileCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayScriptFileCreateModel(
          newMovieShootDayScriptFiles:
              (json['newMovieShootDayScriptFiles'] as List<dynamic>?)
                      ?.map((e) => MovieShootDayScriptFileCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleMovieShootDayScriptFileCreateModelToJson(
        MultipleMovieShootDayScriptFileCreateModel instance) =>
    <String, dynamic>{
      'newMovieShootDayScriptFiles':
          instance.newMovieShootDayScriptFiles?.map((e) => e.toJson()).toList(),
    };

MultipleMovieShootDaySummarySessionCreateModel
    _$MultipleMovieShootDaySummarySessionCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDaySummarySessionCreateModel(
          newMovieShootDaySummarySessions:
              (json['newMovieShootDaySummarySessions'] as List<dynamic>?)
                      ?.map((e) =>
                          MovieShootDaySummarySessionCreateModel.fromJson(
                              e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleMovieShootDaySummarySessionCreateModelToJson(
        MultipleMovieShootDaySummarySessionCreateModel instance) =>
    <String, dynamic>{
      'newMovieShootDaySummarySessions': instance
          .newMovieShootDaySummarySessions
          ?.map((e) => e.toJson())
          .toList(),
    };

MultipleMovieShootDayTechnicianPaymentStatusUpdateModel
    _$MultipleMovieShootDayTechnicianPaymentStatusUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayTechnicianPaymentStatusUpdateModel(
          movieShootDayTechnicianIds:
              (json['movieShootDayTechnicianIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
          predefinedPaymentStatusTypeId:
              (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MultipleMovieShootDayTechnicianPaymentStatusUpdateModelToJson(
            MultipleMovieShootDayTechnicianPaymentStatusUpdateModel instance) =>
        <String, dynamic>{
          'movieShootDayTechnicianIds': instance.movieShootDayTechnicianIds,
          'predefinedPaymentStatusTypeId':
              instance.predefinedPaymentStatusTypeId,
        };

MultipleMovieShootDayVendorPaymentStatusUpdateModel
    _$MultipleMovieShootDayVendorPaymentStatusUpdateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieShootDayVendorPaymentStatusUpdateModel(
          movieShootDayVendorIds:
              (json['movieShootDayVendorIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
          predefinedPaymentStatusTypeId:
              (json['predefinedPaymentStatusTypeId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$MultipleMovieShootDayVendorPaymentStatusUpdateModelToJson(
            MultipleMovieShootDayVendorPaymentStatusUpdateModel instance) =>
        <String, dynamic>{
          'movieShootDayVendorIds': instance.movieShootDayVendorIds,
          'predefinedPaymentStatusTypeId':
              instance.predefinedPaymentStatusTypeId,
        };

MultipleMovieStageUpdateModel _$MultipleMovieStageUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieStageUpdateModel(
      movieIds: (json['movieIds'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
      predefinedMovieStageId: (json['predefinedMovieStageId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MultipleMovieStageUpdateModelToJson(
        MultipleMovieStageUpdateModel instance) =>
    <String, dynamic>{
      'movieIds': instance.movieIds,
      'predefinedMovieStageId': instance.predefinedMovieStageId,
    };

MultipleMovieStatusNotificationEventSessionCreateModel
    _$MultipleMovieStatusNotificationEventSessionCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieStatusNotificationEventSessionCreateModel(
          newMovieStatusNotificationEventSessions:
              (json['newMovieStatusNotificationEventSessions']
                          as List<dynamic>?)
                      ?.map((e) =>
                          MovieStatusNotificationEventSessionCreateModel
                              .fromJson(e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic>
    _$MultipleMovieStatusNotificationEventSessionCreateModelToJson(
            MultipleMovieStatusNotificationEventSessionCreateModel instance) =>
        <String, dynamic>{
          'newMovieStatusNotificationEventSessions': instance
              .newMovieStatusNotificationEventSessions
              ?.map((e) => e.toJson())
              .toList(),
        };

MultipleMovieStatusNotificationEventUserCreateModel
    _$MultipleMovieStatusNotificationEventUserCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleMovieStatusNotificationEventUserCreateModel(
          newMovieStatusNotificationEventUsers:
              (json['newMovieStatusNotificationEventUsers'] as List<dynamic>?)
                      ?.map((e) =>
                          MovieStatusNotificationEventUserCreateModel.fromJson(
                              e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic>
    _$MultipleMovieStatusNotificationEventUserCreateModelToJson(
            MultipleMovieStatusNotificationEventUserCreateModel instance) =>
        <String, dynamic>{
          'newMovieStatusNotificationEventUsers': instance
              .newMovieStatusNotificationEventUsers
              ?.map((e) => e.toJson())
              .toList(),
        };

MultipleMovieStatusUpdateModel _$MultipleMovieStatusUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieStatusUpdateModel(
      movieIds: (json['movieIds'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
      predefinedMovieStatusId:
          (json['predefinedMovieStatusId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$MultipleMovieStatusUpdateModelToJson(
        MultipleMovieStatusUpdateModel instance) =>
    <String, dynamic>{
      'movieIds': instance.movieIds,
      'predefinedMovieStatusId': instance.predefinedMovieStatusId,
    };

MultipleMovieTechnicianCreateModel _$MultipleMovieTechnicianCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieTechnicianCreateModel(
      newMovieTechnicians: (json['newMovieTechnicians'] as List<dynamic>?)
              ?.map((e) => MovieTechnicianCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieTechnicianCreateModelToJson(
        MultipleMovieTechnicianCreateModel instance) =>
    <String, dynamic>{
      'newMovieTechnicians':
          instance.newMovieTechnicians?.map((e) => e.toJson()).toList(),
    };

MultipleMovieUnitCreateModel _$MultipleMovieUnitCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieUnitCreateModel(
      newMovieUnits: (json['newMovieUnits'] as List<dynamic>?)
              ?.map((e) =>
                  MovieUnitCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieUnitCreateModelToJson(
        MultipleMovieUnitCreateModel instance) =>
    <String, dynamic>{
      'newMovieUnits': instance.newMovieUnits?.map((e) => e.toJson()).toList(),
    };

MultipleMovieUserCreateModel _$MultipleMovieUserCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieUserCreateModel(
      newMovieUsers: (json['newMovieUsers'] as List<dynamic>?)
              ?.map((e) =>
                  MovieUserCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieUserCreateModelToJson(
        MultipleMovieUserCreateModel instance) =>
    <String, dynamic>{
      'newMovieUsers': instance.newMovieUsers?.map((e) => e.toJson()).toList(),
    };

MultipleMovieVendorCreateModel _$MultipleMovieVendorCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieVendorCreateModel(
      newMovieVendors: (json['newMovieVendors'] as List<dynamic>?)
              ?.map((e) =>
                  MovieVendorCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieVendorCreateModelToJson(
        MultipleMovieVendorCreateModel instance) =>
    <String, dynamic>{
      'newMovieVendors':
          instance.newMovieVendors?.map((e) => e.toJson()).toList(),
    };

MultipleMovieVoucherCreateModel _$MultipleMovieVoucherCreateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleMovieVoucherCreateModel(
      newMovieVouchers: (json['newMovieVouchers'] as List<dynamic>?)
              ?.map((e) =>
                  MovieVoucherCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleMovieVoucherCreateModelToJson(
        MultipleMovieVoucherCreateModel instance) =>
    <String, dynamic>{
      'newMovieVouchers':
          instance.newMovieVouchers?.map((e) => e.toJson()).toList(),
    };

MultiplePostProductionStatusTypeCreateModel
    _$MultiplePostProductionStatusTypeCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultiplePostProductionStatusTypeCreateModel(
          newPostProductionStatusTypes:
              (json['newPostProductionStatusTypes'] as List<dynamic>?)
                      ?.map((e) => PostProductionStatusTypeCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultiplePostProductionStatusTypeCreateModelToJson(
        MultiplePostProductionStatusTypeCreateModel instance) =>
    <String, dynamic>{
      'newPostProductionStatusTypes': instance.newPostProductionStatusTypes
          ?.map((e) => e.toJson())
          .toList(),
    };

MultiplePreProductionStatusTypeCreateModel
    _$MultiplePreProductionStatusTypeCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultiplePreProductionStatusTypeCreateModel(
          newPreProductionStatusTypes:
              (json['newPreProductionStatusTypes'] as List<dynamic>?)
                      ?.map((e) => PreProductionStatusTypeCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultiplePreProductionStatusTypeCreateModelToJson(
        MultiplePreProductionStatusTypeCreateModel instance) =>
    <String, dynamic>{
      'newPreProductionStatusTypes':
          instance.newPreProductionStatusTypes?.map((e) => e.toJson()).toList(),
    };

MultipleProductionStatusTypeCreateModel
    _$MultipleProductionStatusTypeCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleProductionStatusTypeCreateModel(
          newProductionStatusTypes:
              (json['newProductionStatusTypes'] as List<dynamic>?)
                      ?.map((e) => ProductionStatusTypeCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleProductionStatusTypeCreateModelToJson(
        MultipleProductionStatusTypeCreateModel instance) =>
    <String, dynamic>{
      'newProductionStatusTypes':
          instance.newProductionStatusTypes?.map((e) => e.toJson()).toList(),
    };

MultiplePropertyTransactionCreateModel
    _$MultiplePropertyTransactionCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultiplePropertyTransactionCreateModel(
          newPropertyTransactions:
              (json['newPropertyTransactions'] as List<dynamic>?)
                      ?.map((e) => PropertyTransactionCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultiplePropertyTransactionCreateModelToJson(
        MultiplePropertyTransactionCreateModel instance) =>
    <String, dynamic>{
      'newPropertyTransactions':
          instance.newPropertyTransactions?.map((e) => e.toJson()).toList(),
    };

MultiplePushNotificationServerCreateModel
    _$MultiplePushNotificationServerCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultiplePushNotificationServerCreateModel(
          newPushNotificationServers:
              (json['newPushNotificationServers'] as List<dynamic>?)
                      ?.map((e) => PushNotificationServerCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultiplePushNotificationServerCreateModelToJson(
        MultiplePushNotificationServerCreateModel instance) =>
    <String, dynamic>{
      'newPushNotificationServers':
          instance.newPushNotificationServers?.map((e) => e.toJson()).toList(),
    };

MultipleRateCreateUpdateModel _$MultipleRateCreateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    MultipleRateCreateUpdateModel(
      resourceIds: (json['resourceIds'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
      rates: (json['rates'] as List<dynamic>?)
              ?.map((e) => BaseRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$MultipleRateCreateUpdateModelToJson(
        MultipleRateCreateUpdateModel instance) =>
    <String, dynamic>{
      'resourceIds': instance.resourceIds,
      'rates': instance.rates?.map((e) => e.toJson()).toList(),
    };

MultipleResourceBiometricRecordCreateModel
    _$MultipleResourceBiometricRecordCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleResourceBiometricRecordCreateModel(
          newResourceBiometricRecords:
              (json['newResourceBiometricRecords'] as List<dynamic>?)
                      ?.map((e) => ResourceBiometricRecordCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleResourceBiometricRecordCreateModelToJson(
        MultipleResourceBiometricRecordCreateModel instance) =>
    <String, dynamic>{
      'newResourceBiometricRecords':
          instance.newResourceBiometricRecords?.map((e) => e.toJson()).toList(),
    };

MultipleResourceIdentificationDocumentCreateModel
    _$MultipleResourceIdentificationDocumentCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleResourceIdentificationDocumentCreateModel(
          newResourceIdentificationDocuments:
              (json['newResourceIdentificationDocuments'] as List<dynamic>?)
                      ?.map((e) =>
                          ResourceIdentificationDocumentCreateModel.fromJson(
                              e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleResourceIdentificationDocumentCreateModelToJson(
        MultipleResourceIdentificationDocumentCreateModel instance) =>
    <String, dynamic>{
      'newResourceIdentificationDocuments': instance
          .newResourceIdentificationDocuments
          ?.map((e) => e.toJson())
          .toList(),
    };

MultipleStatementTemplateCreateModel
    _$MultipleStatementTemplateCreateModelFromJson(Map<String, dynamic> json) =>
        MultipleStatementTemplateCreateModel(
          newStatementTemplates:
              (json['newStatementTemplates'] as List<dynamic>?)
                      ?.map((e) => StatementTemplateCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleStatementTemplateCreateModelToJson(
        MultipleStatementTemplateCreateModel instance) =>
    <String, dynamic>{
      'newStatementTemplates':
          instance.newStatementTemplates?.map((e) => e.toJson()).toList(),
    };

MultipleVoiceNotificationServerCreateModel
    _$MultipleVoiceNotificationServerCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleVoiceNotificationServerCreateModel(
          newVoiceNotificationServers:
              (json['newVoiceNotificationServers'] as List<dynamic>?)
                      ?.map((e) => VoiceNotificationServerCreateModel.fromJson(
                          e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleVoiceNotificationServerCreateModelToJson(
        MultipleVoiceNotificationServerCreateModel instance) =>
    <String, dynamic>{
      'newVoiceNotificationServers':
          instance.newVoiceNotificationServers?.map((e) => e.toJson()).toList(),
    };

MultipleWhatsAppNotificationServerCreateModel
    _$MultipleWhatsAppNotificationServerCreateModelFromJson(
            Map<String, dynamic> json) =>
        MultipleWhatsAppNotificationServerCreateModel(
          newWhatsAppNotificationServers:
              (json['newWhatsAppNotificationServers'] as List<dynamic>?)
                      ?.map((e) =>
                          WhatsAppNotificationServerCreateModel.fromJson(
                              e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic> _$MultipleWhatsAppNotificationServerCreateModelToJson(
        MultipleWhatsAppNotificationServerCreateModel instance) =>
    <String, dynamic>{
      'newWhatsAppNotificationServers': instance.newWhatsAppNotificationServers
          ?.map((e) => e.toJson())
          .toList(),
    };

NoteAttachmentCreateModel _$NoteAttachmentCreateModelFromJson(
        Map<String, dynamic> json) =>
    NoteAttachmentCreateModel(
      title: json['title'] as String?,
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      movieCommitmentTaskId: (json['movieCommitmentTaskId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
      movieSceneEquipmentId: (json['movieSceneEquipmentId'] as num?)?.toInt(),
      movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
      movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
      movieSceneTechnicianId: (json['movieSceneTechnicianId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieShootDayRequirementId:
          (json['movieShootDayRequirementId'] as num?)?.toInt(),
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$NoteAttachmentCreateModelToJson(
        NoteAttachmentCreateModel instance) =>
    <String, dynamic>{
      'title': instance.title,
      'description': instance.description,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'artistId': instance.artistId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'technicianId': instance.technicianId,
      'contractId': instance.contractId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieUnitId': instance.movieUnitId,
      'movieUserId': instance.movieUserId,
      'movieVendorId': instance.movieVendorId,
      'companyId': instance.companyId,
    };

NoteAttachmentModel _$NoteAttachmentModelFromJson(Map<String, dynamic> json) =>
    NoteAttachmentModel(
      noteAttachmentId: (json['noteAttachmentId'] as num?)?.toInt(),
      title: json['title'] as String?,
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      movieCommitmentTaskId: (json['movieCommitmentTaskId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
      movieSceneEquipmentId: (json['movieSceneEquipmentId'] as num?)?.toInt(),
      movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
      movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
      movieSceneTechnicianId: (json['movieSceneTechnicianId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieShootDayRequirementId:
          (json['movieShootDayRequirementId'] as num?)?.toInt(),
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      userName: json['userName'] as String?,
      movieCode: json['movieCode'] as String?,
      artistCode: json['artistCode'] as String?,
      technicianCode: json['technicianCode'] as String?,
      equipmentCode: json['equipmentCode'] as String?,
      vendorCode: json['vendorCode'] as String?,
      propertyCode: json['propertyCode'] as String?,
      movieArtistCode: json['movieArtistCode'] as String?,
      movieTechnicianCode: json['movieTechnicianCode'] as String?,
      movieEquipmentCode: json['movieEquipmentCode'] as String?,
      movieLocationCode: json['movieLocationCode'] as String?,
      movieSceneCodeInternal: json['movieSceneCodeInternal'] as String?,
      movieVendorCode: json['movieVendorCode'] as String?,
      moviePropertyCode: json['moviePropertyCode'] as String?,
      movieSceneArtistName: json['movieSceneArtistName'] as String?,
      movieSceneTechnicianName: json['movieSceneTechnicianName'] as String?,
      movieSceneEquipmentName: json['movieSceneEquipmentName'] as String?,
      movieSceneVendorName: json['movieSceneVendorName'] as String?,
      movieScenePropertyName: json['movieScenePropertyName'] as String?,
      movieSceneCode: json['movieSceneCode'] as String?,
      movieSceneArtistCode: json['movieSceneArtistCode'] as String?,
      movieSceneTechnicianCode: json['movieSceneTechnicianCode'] as String?,
      movieSceneEquipmentCode: json['movieSceneEquipmentCode'] as String?,
      movieSceneVendorCode: json['movieSceneVendorCode'] as String?,
      movieScenePropertyCode: json['movieScenePropertyCode'] as String?,
      movieShootDayCode: json['movieShootDayCode'] as String?,
      movieShootDayArtistCode: json['movieShootDayArtistCode'] as String?,
      movieShootDayTechnicianCode:
          json['movieShootDayTechnicianCode'] as String?,
      movieShootDayEquipmentCode: json['movieShootDayEquipmentCode'] as String?,
      movieShootDayVendorCode: json['movieShootDayVendorCode'] as String?,
      movieShootDayPropertyCode: json['movieShootDayPropertyCode'] as String?,
      movieShootDayExpenseCode: json['movieShootDayExpenseCode'] as String?,
      isExpenseDeleted: json['isExpenseDeleted'] as bool?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$NoteAttachmentModelToJson(
        NoteAttachmentModel instance) =>
    <String, dynamic>{
      'noteAttachmentId': instance.noteAttachmentId,
      'title': instance.title,
      'description': instance.description,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'artistId': instance.artistId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'technicianId': instance.technicianId,
      'contractId': instance.contractId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieUnitId': instance.movieUnitId,
      'movieUserId': instance.movieUserId,
      'movieVendorId': instance.movieVendorId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'userName': instance.userName,
      'movieCode': instance.movieCode,
      'artistCode': instance.artistCode,
      'technicianCode': instance.technicianCode,
      'equipmentCode': instance.equipmentCode,
      'vendorCode': instance.vendorCode,
      'propertyCode': instance.propertyCode,
      'movieArtistCode': instance.movieArtistCode,
      'movieTechnicianCode': instance.movieTechnicianCode,
      'movieEquipmentCode': instance.movieEquipmentCode,
      'movieLocationCode': instance.movieLocationCode,
      'movieSceneCodeInternal': instance.movieSceneCodeInternal,
      'movieVendorCode': instance.movieVendorCode,
      'moviePropertyCode': instance.moviePropertyCode,
      'movieSceneArtistName': instance.movieSceneArtistName,
      'movieSceneTechnicianName': instance.movieSceneTechnicianName,
      'movieSceneEquipmentName': instance.movieSceneEquipmentName,
      'movieSceneVendorName': instance.movieSceneVendorName,
      'movieScenePropertyName': instance.movieScenePropertyName,
      'movieSceneCode': instance.movieSceneCode,
      'movieSceneArtistCode': instance.movieSceneArtistCode,
      'movieSceneTechnicianCode': instance.movieSceneTechnicianCode,
      'movieSceneEquipmentCode': instance.movieSceneEquipmentCode,
      'movieSceneVendorCode': instance.movieSceneVendorCode,
      'movieScenePropertyCode': instance.movieScenePropertyCode,
      'movieShootDayCode': instance.movieShootDayCode,
      'movieShootDayArtistCode': instance.movieShootDayArtistCode,
      'movieShootDayTechnicianCode': instance.movieShootDayTechnicianCode,
      'movieShootDayEquipmentCode': instance.movieShootDayEquipmentCode,
      'movieShootDayVendorCode': instance.movieShootDayVendorCode,
      'movieShootDayPropertyCode': instance.movieShootDayPropertyCode,
      'movieShootDayExpenseCode': instance.movieShootDayExpenseCode,
      'isExpenseDeleted': instance.isExpenseDeleted,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

NoteAttachmentModelReturnListModel _$NoteAttachmentModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    NoteAttachmentModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  NoteAttachmentModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$NoteAttachmentModelReturnListModelToJson(
        NoteAttachmentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

NoteAttachmentModelReturnModel _$NoteAttachmentModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    NoteAttachmentModelReturnModel(
      model: json['model'] == null
          ? null
          : NoteAttachmentModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$NoteAttachmentModelReturnModelToJson(
        NoteAttachmentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

NoteAttachmentUpdateModel _$NoteAttachmentUpdateModelFromJson(
        Map<String, dynamic> json) =>
    NoteAttachmentUpdateModel(
      noteAttachmentId: (json['noteAttachmentId'] as num?)?.toInt(),
      title: json['title'] as String?,
      description: json['description'] as String?,
      movieId: (json['movieId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      equipmentId: (json['equipmentId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      contractId: (json['contractId'] as num?)?.toInt(),
      movieArtistId: (json['movieArtistId'] as num?)?.toInt(),
      movieTechnicianId: (json['movieTechnicianId'] as num?)?.toInt(),
      movieEquipmentId: (json['movieEquipmentId'] as num?)?.toInt(),
      moviePropertyId: (json['moviePropertyId'] as num?)?.toInt(),
      movieLocationId: (json['movieLocationId'] as num?)?.toInt(),
      movieLocationCandidateId:
          (json['movieLocationCandidateId'] as num?)?.toInt(),
      movieCommitmentTaskId: (json['movieCommitmentTaskId'] as num?)?.toInt(),
      movieSceneId: (json['movieSceneId'] as num?)?.toInt(),
      movieSceneArtistId: (json['movieSceneArtistId'] as num?)?.toInt(),
      movieSceneEquipmentId: (json['movieSceneEquipmentId'] as num?)?.toInt(),
      movieScenePropertyId: (json['movieScenePropertyId'] as num?)?.toInt(),
      movieSceneVendorId: (json['movieSceneVendorId'] as num?)?.toInt(),
      movieSceneTechnicianId: (json['movieSceneTechnicianId'] as num?)?.toInt(),
      movieShootDayId: (json['movieShootDayId'] as num?)?.toInt(),
      movieShootDayArtistId: (json['movieShootDayArtistId'] as num?)?.toInt(),
      movieShootDayBudgetId: (json['movieShootDayBudgetId'] as num?)?.toInt(),
      movieShootDayEquipmentId:
          (json['movieShootDayEquipmentId'] as num?)?.toInt(),
      movieShootDayPropertyId:
          (json['movieShootDayPropertyId'] as num?)?.toInt(),
      movieShootDayExpenseId: (json['movieShootDayExpenseId'] as num?)?.toInt(),
      movieShootDayRequirementId:
          (json['movieShootDayRequirementId'] as num?)?.toInt(),
      movieShootDayVendorId: (json['movieShootDayVendorId'] as num?)?.toInt(),
      movieShootDaySceneId: (json['movieShootDaySceneId'] as num?)?.toInt(),
      movieShootDayTechnicianId:
          (json['movieShootDayTechnicianId'] as num?)?.toInt(),
      movieBudgetCategoryId: (json['movieBudgetCategoryId'] as num?)?.toInt(),
      movieUnitId: (json['movieUnitId'] as num?)?.toInt(),
      movieUserId: (json['movieUserId'] as num?)?.toInt(),
      movieVendorId: (json['movieVendorId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$NoteAttachmentUpdateModelToJson(
        NoteAttachmentUpdateModel instance) =>
    <String, dynamic>{
      'noteAttachmentId': instance.noteAttachmentId,
      'title': instance.title,
      'description': instance.description,
      'movieId': instance.movieId,
      'userId': instance.userId,
      'artistId': instance.artistId,
      'vendorId': instance.vendorId,
      'equipmentId': instance.equipmentId,
      'propertyId': instance.propertyId,
      'technicianId': instance.technicianId,
      'contractId': instance.contractId,
      'movieArtistId': instance.movieArtistId,
      'movieTechnicianId': instance.movieTechnicianId,
      'movieEquipmentId': instance.movieEquipmentId,
      'moviePropertyId': instance.moviePropertyId,
      'movieLocationId': instance.movieLocationId,
      'movieLocationCandidateId': instance.movieLocationCandidateId,
      'movieCommitmentTaskId': instance.movieCommitmentTaskId,
      'movieSceneId': instance.movieSceneId,
      'movieSceneArtistId': instance.movieSceneArtistId,
      'movieSceneEquipmentId': instance.movieSceneEquipmentId,
      'movieScenePropertyId': instance.movieScenePropertyId,
      'movieSceneVendorId': instance.movieSceneVendorId,
      'movieSceneTechnicianId': instance.movieSceneTechnicianId,
      'movieShootDayId': instance.movieShootDayId,
      'movieShootDayArtistId': instance.movieShootDayArtistId,
      'movieShootDayBudgetId': instance.movieShootDayBudgetId,
      'movieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'movieShootDayPropertyId': instance.movieShootDayPropertyId,
      'movieShootDayExpenseId': instance.movieShootDayExpenseId,
      'movieShootDayRequirementId': instance.movieShootDayRequirementId,
      'movieShootDayVendorId': instance.movieShootDayVendorId,
      'movieShootDaySceneId': instance.movieShootDaySceneId,
      'movieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'movieBudgetCategoryId': instance.movieBudgetCategoryId,
      'movieUnitId': instance.movieUnitId,
      'movieUserId': instance.movieUserId,
      'movieVendorId': instance.movieVendorId,
      'companyId': instance.companyId,
    };

OpWebConfigurationModel _$OpWebConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    OpWebConfigurationModel(
      opWebServerPort: (json['opWebServerPort'] as num?)?.toInt(),
      desktopSocialLoginErrorUrlPath:
          json['desktopSocialLoginErrorUrlPath'] as String?,
      desktopSocialLoginSuccessUrlPath:
          json['desktopSocialLoginSuccessUrlPath'] as String?,
      viewUrl: json['viewUrl'] as String?,
      readOnlyViewUrl: json['readOnlyViewUrl'] as String?,
      enableFrontPageDisplayMessage:
          json['enableFrontPageDisplayMessage'] as bool?,
      frontPageDisplayMessage: json['frontPageDisplayMessage'] as String?,
      frontPageDisplayMessageTitle:
          json['frontPageDisplayMessageTitle'] as String?,
      frontPageDisplayMessageDisplayTime:
          (json['frontPageDisplayMessageDisplayTime'] as num?)?.toInt(),
      frontPageDisplayMessageUntilDate:
          json['frontPageDisplayMessageUntilDate'] == null
              ? null
              : DateTime.parse(
                  json['frontPageDisplayMessageUntilDate'] as String),
      readOnlyAccess: json['readOnlyAccess'] as bool?,
      readOnlyAccessMessage: json['readOnlyAccessMessage'] as String?,
      isProduction: json['isProduction'] as bool?,
      websiteUrl: json['websiteUrl'] as String?,
      letterTemplateFileStorageConnectionString:
          json['letterTemplateFileStorageConnectionString'] as String?,
    );

Map<String, dynamic> _$OpWebConfigurationModelToJson(
        OpWebConfigurationModel instance) =>
    <String, dynamic>{
      'opWebServerPort': instance.opWebServerPort,
      'desktopSocialLoginErrorUrlPath': instance.desktopSocialLoginErrorUrlPath,
      'desktopSocialLoginSuccessUrlPath':
          instance.desktopSocialLoginSuccessUrlPath,
      'viewUrl': instance.viewUrl,
      'readOnlyViewUrl': instance.readOnlyViewUrl,
      'enableFrontPageDisplayMessage': instance.enableFrontPageDisplayMessage,
      'frontPageDisplayMessage': instance.frontPageDisplayMessage,
      'frontPageDisplayMessageTitle': instance.frontPageDisplayMessageTitle,
      'frontPageDisplayMessageDisplayTime':
          instance.frontPageDisplayMessageDisplayTime,
      'frontPageDisplayMessageUntilDate':
          instance.frontPageDisplayMessageUntilDate?.toIso8601String(),
      'readOnlyAccess': instance.readOnlyAccess,
      'readOnlyAccessMessage': instance.readOnlyAccessMessage,
      'isProduction': instance.isProduction,
      'websiteUrl': instance.websiteUrl,
      'letterTemplateFileStorageConnectionString':
          instance.letterTemplateFileStorageConnectionString,
    };

OpWebConfigurationModelReturnModel _$OpWebConfigurationModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    OpWebConfigurationModelReturnModel(
      model: json['model'] == null
          ? null
          : OpWebConfigurationModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$OpWebConfigurationModelReturnModelToJson(
        OpWebConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PerfLogModel _$PerfLogModelFromJson(Map<String, dynamic> json) => PerfLogModel(
      logDate: json['logDate'] == null
          ? null
          : DateTime.parse(json['logDate'] as String),
      activityId: json['activityId'] as String?,
      machineName: json['machineName'] as String?,
      userIdentity: json['userIdentity'] as String?,
      appName: json['appName'] as String?,
      appModule: json['appModule'] as String?,
      appFunction: json['appFunction'] as String?,
      httpVerb: json['httpVerb'] as String?,
      statusCode: json['statusCode'] as String?,
      startTime: json['startTime'] as String?,
      endTime: json['endTime'] as String?,
      elapsedTimeInMs: (json['elapsedTimeInMs'] as num?)?.toDouble(),
      ipAddress: json['ipAddress'] as String?,
      elapsedTimeInSeconds: (json['elapsedTimeInSeconds'] as num?)?.toDouble(),
    );

Map<String, dynamic> _$PerfLogModelToJson(PerfLogModel instance) =>
    <String, dynamic>{
      'logDate': instance.logDate?.toIso8601String(),
      'activityId': instance.activityId,
      'machineName': instance.machineName,
      'userIdentity': instance.userIdentity,
      'appName': instance.appName,
      'appModule': instance.appModule,
      'appFunction': instance.appFunction,
      'httpVerb': instance.httpVerb,
      'statusCode': instance.statusCode,
      'startTime': instance.startTime,
      'endTime': instance.endTime,
      'elapsedTimeInMs': instance.elapsedTimeInMs,
      'ipAddress': instance.ipAddress,
      'elapsedTimeInSeconds': instance.elapsedTimeInSeconds,
    };

PerfLogModelReturnListModel _$PerfLogModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    PerfLogModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => PerfLogModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PerfLogModelReturnListModelToJson(
        PerfLogModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PostProductionStatusTypeCreateModel
    _$PostProductionStatusTypeCreateModelFromJson(Map<String, dynamic> json) =>
        PostProductionStatusTypeCreateModel(
          postProductionStatusTypeName:
              json['postProductionStatusTypeName'] as String?,
          predefinedPostProductionStatusTypeId:
              (json['predefinedPostProductionStatusTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PostProductionStatusTypeCreateModelToJson(
        PostProductionStatusTypeCreateModel instance) =>
    <String, dynamic>{
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'predefinedPostProductionStatusTypeId':
          instance.predefinedPostProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

PostProductionStatusTypeCreateWithMovieModel
    _$PostProductionStatusTypeCreateWithMovieModelFromJson(
            Map<String, dynamic> json) =>
        PostProductionStatusTypeCreateWithMovieModel(
          postProductionStatusTypeName:
              json['postProductionStatusTypeName'] as String?,
          predefinedPostProductionStatusTypeId:
              (json['predefinedPostProductionStatusTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PostProductionStatusTypeCreateWithMovieModelToJson(
        PostProductionStatusTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'predefinedPostProductionStatusTypeId':
          instance.predefinedPostProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

PostProductionStatusTypeModel _$PostProductionStatusTypeModelFromJson(
        Map<String, dynamic> json) =>
    PostProductionStatusTypeModel(
      postProductionStatusTypeId:
          (json['postProductionStatusTypeId'] as num?)?.toInt(),
      postProductionStatusTypeName:
          json['postProductionStatusTypeName'] as String?,
      predefinedPostProductionStatusTypeId:
          (json['predefinedPostProductionStatusTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedPostProductionStatusTypeName:
          json['predefinedPostProductionStatusTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$PostProductionStatusTypeModelToJson(
        PostProductionStatusTypeModel instance) =>
    <String, dynamic>{
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'predefinedPostProductionStatusTypeId':
          instance.predefinedPostProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedPostProductionStatusTypeName':
          instance.predefinedPostProductionStatusTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

PostProductionStatusTypeModelReturnListModel
    _$PostProductionStatusTypeModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        PostProductionStatusTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => PostProductionStatusTypeModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PostProductionStatusTypeModelReturnListModelToJson(
        PostProductionStatusTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PostProductionStatusTypeModelReturnModel
    _$PostProductionStatusTypeModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        PostProductionStatusTypeModelReturnModel(
          model: json['model'] == null
              ? null
              : PostProductionStatusTypeModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PostProductionStatusTypeModelReturnModelToJson(
        PostProductionStatusTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PostProductionStatusTypeUpdateModel
    _$PostProductionStatusTypeUpdateModelFromJson(Map<String, dynamic> json) =>
        PostProductionStatusTypeUpdateModel(
          postProductionStatusTypeId:
              (json['postProductionStatusTypeId'] as num?)?.toInt(),
          postProductionStatusTypeName:
              json['postProductionStatusTypeName'] as String?,
          predefinedPostProductionStatusTypeId:
              (json['predefinedPostProductionStatusTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PostProductionStatusTypeUpdateModelToJson(
        PostProductionStatusTypeUpdateModel instance) =>
    <String, dynamic>{
      'postProductionStatusTypeId': instance.postProductionStatusTypeId,
      'postProductionStatusTypeName': instance.postProductionStatusTypeName,
      'predefinedPostProductionStatusTypeId':
          instance.predefinedPostProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

PreProductionStatusTypeCreateModel _$PreProductionStatusTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    PreProductionStatusTypeCreateModel(
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      predefinedPreProductionStatusTypeId:
          (json['predefinedPreProductionStatusTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PreProductionStatusTypeCreateModelToJson(
        PreProductionStatusTypeCreateModel instance) =>
    <String, dynamic>{
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'predefinedPreProductionStatusTypeId':
          instance.predefinedPreProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

PreProductionStatusTypeCreateWithMovieModel
    _$PreProductionStatusTypeCreateWithMovieModelFromJson(
            Map<String, dynamic> json) =>
        PreProductionStatusTypeCreateWithMovieModel(
          preProductionStatusTypeName:
              json['preProductionStatusTypeName'] as String?,
          predefinedPreProductionStatusTypeId:
              (json['predefinedPreProductionStatusTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PreProductionStatusTypeCreateWithMovieModelToJson(
        PreProductionStatusTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'predefinedPreProductionStatusTypeId':
          instance.predefinedPreProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

PreProductionStatusTypeModel _$PreProductionStatusTypeModelFromJson(
        Map<String, dynamic> json) =>
    PreProductionStatusTypeModel(
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      predefinedPreProductionStatusTypeId:
          (json['predefinedPreProductionStatusTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedPreProductionStatusTypeName:
          json['predefinedPreProductionStatusTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$PreProductionStatusTypeModelToJson(
        PreProductionStatusTypeModel instance) =>
    <String, dynamic>{
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'predefinedPreProductionStatusTypeId':
          instance.predefinedPreProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedPreProductionStatusTypeName':
          instance.predefinedPreProductionStatusTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

PreProductionStatusTypeModelReturnListModel
    _$PreProductionStatusTypeModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        PreProductionStatusTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => PreProductionStatusTypeModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PreProductionStatusTypeModelReturnListModelToJson(
        PreProductionStatusTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PreProductionStatusTypeModelReturnModel
    _$PreProductionStatusTypeModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        PreProductionStatusTypeModelReturnModel(
          model: json['model'] == null
              ? null
              : PreProductionStatusTypeModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PreProductionStatusTypeModelReturnModelToJson(
        PreProductionStatusTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PreProductionStatusTypeUpdateModel _$PreProductionStatusTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    PreProductionStatusTypeUpdateModel(
      preProductionStatusTypeId:
          (json['preProductionStatusTypeId'] as num?)?.toInt(),
      preProductionStatusTypeName:
          json['preProductionStatusTypeName'] as String?,
      predefinedPreProductionStatusTypeId:
          (json['predefinedPreProductionStatusTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PreProductionStatusTypeUpdateModelToJson(
        PreProductionStatusTypeUpdateModel instance) =>
    <String, dynamic>{
      'preProductionStatusTypeId': instance.preProductionStatusTypeId,
      'preProductionStatusTypeName': instance.preProductionStatusTypeName,
      'predefinedPreProductionStatusTypeId':
          instance.predefinedPreProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

ProductionStatusTypeCreateModel _$ProductionStatusTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    ProductionStatusTypeCreateModel(
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      predefinedProductionStatusTypeId:
          (json['predefinedProductionStatusTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ProductionStatusTypeCreateModelToJson(
        ProductionStatusTypeCreateModel instance) =>
    <String, dynamic>{
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedProductionStatusTypeId':
          instance.predefinedProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

ProductionStatusTypeCreateWithMovieModel
    _$ProductionStatusTypeCreateWithMovieModelFromJson(
            Map<String, dynamic> json) =>
        ProductionStatusTypeCreateWithMovieModel(
          productionStatusTypeName: json['productionStatusTypeName'] as String?,
          predefinedProductionStatusTypeId:
              (json['predefinedProductionStatusTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ProductionStatusTypeCreateWithMovieModelToJson(
        ProductionStatusTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedProductionStatusTypeId':
          instance.predefinedProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

ProductionStatusTypeModel _$ProductionStatusTypeModelFromJson(
        Map<String, dynamic> json) =>
    ProductionStatusTypeModel(
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      predefinedProductionStatusTypeId:
          (json['predefinedProductionStatusTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedProductionStatusTypeName:
          json['predefinedProductionStatusTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ProductionStatusTypeModelToJson(
        ProductionStatusTypeModel instance) =>
    <String, dynamic>{
      'productionStatusTypeId': instance.productionStatusTypeId,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedProductionStatusTypeId':
          instance.predefinedProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedProductionStatusTypeName':
          instance.predefinedProductionStatusTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ProductionStatusTypeModelReturnListModel
    _$ProductionStatusTypeModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        ProductionStatusTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => ProductionStatusTypeModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ProductionStatusTypeModelReturnListModelToJson(
        ProductionStatusTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ProductionStatusTypeModelReturnModel
    _$ProductionStatusTypeModelReturnModelFromJson(Map<String, dynamic> json) =>
        ProductionStatusTypeModelReturnModel(
          model: json['model'] == null
              ? null
              : ProductionStatusTypeModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ProductionStatusTypeModelReturnModelToJson(
        ProductionStatusTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ProductionStatusTypeUpdateModel _$ProductionStatusTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ProductionStatusTypeUpdateModel(
      productionStatusTypeId: (json['productionStatusTypeId'] as num?)?.toInt(),
      productionStatusTypeName: json['productionStatusTypeName'] as String?,
      predefinedProductionStatusTypeId:
          (json['predefinedProductionStatusTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ProductionStatusTypeUpdateModelToJson(
        ProductionStatusTypeUpdateModel instance) =>
    <String, dynamic>{
      'productionStatusTypeId': instance.productionStatusTypeId,
      'productionStatusTypeName': instance.productionStatusTypeName,
      'predefinedProductionStatusTypeId':
          instance.predefinedProductionStatusTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

PropertyCreateModel _$PropertyCreateModelFromJson(Map<String, dynamic> json) =>
    PropertyCreateModel(
      propertyCode: json['propertyCode'] as String?,
      propertyName: json['propertyName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      specification: json['specification'] as String?,
      colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isOwn: json['isOwn'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newPropertyRates: (json['newPropertyRates'] as List<dynamic>?)
              ?.map((e) =>
                  PropertyRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$PropertyCreateModelToJson(
        PropertyCreateModel instance) =>
    <String, dynamic>{
      'propertyCode': instance.propertyCode,
      'propertyName': instance.propertyName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'colorTypeId': instance.colorTypeId,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'propertyTypeId': instance.propertyTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newPropertyRates':
          instance.newPropertyRates?.map((e) => e.toJson()).toList(),
    };

PropertyCreateWithMovieModel _$PropertyCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    PropertyCreateWithMovieModel(
      propertyCode: json['propertyCode'] as String?,
      propertyName: json['propertyName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      specification: json['specification'] as String?,
      colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isOwn: json['isOwn'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newPropertyRates: (json['newPropertyRates'] as List<dynamic>?)
              ?.map((e) =>
                  PropertyRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyCreateWithMovieModelToJson(
        PropertyCreateWithMovieModel instance) =>
    <String, dynamic>{
      'propertyCode': instance.propertyCode,
      'propertyName': instance.propertyName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'colorTypeId': instance.colorTypeId,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'propertyTypeId': instance.propertyTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newPropertyRates':
          instance.newPropertyRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

PropertyGroupTypeCreateModel _$PropertyGroupTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyGroupTypeCreateModel(
      propertyGroupTypeName: json['propertyGroupTypeName'] as String?,
      predefinedPropertyGroupTypeId:
          (json['predefinedPropertyGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyGroupTypeCreateModelToJson(
        PropertyGroupTypeCreateModel instance) =>
    <String, dynamic>{
      'propertyGroupTypeName': instance.propertyGroupTypeName,
      'predefinedPropertyGroupTypeId': instance.predefinedPropertyGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

PropertyGroupTypeCreateWithMovieModel
    _$PropertyGroupTypeCreateWithMovieModelFromJson(
            Map<String, dynamic> json) =>
        PropertyGroupTypeCreateWithMovieModel(
          propertyGroupTypeName: json['propertyGroupTypeName'] as String?,
          predefinedPropertyGroupTypeId:
              (json['predefinedPropertyGroupTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PropertyGroupTypeCreateWithMovieModelToJson(
        PropertyGroupTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'propertyGroupTypeName': instance.propertyGroupTypeName,
      'predefinedPropertyGroupTypeId': instance.predefinedPropertyGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

PropertyGroupTypeModel _$PropertyGroupTypeModelFromJson(
        Map<String, dynamic> json) =>
    PropertyGroupTypeModel(
      propertyGroupTypeId: (json['propertyGroupTypeId'] as num?)?.toInt(),
      propertyGroupTypeName: json['propertyGroupTypeName'] as String?,
      predefinedPropertyGroupTypeId:
          (json['predefinedPropertyGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedPropertyGroupTypeName:
          json['predefinedPropertyGroupTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingPropertyTypes: (json['existingPropertyTypes'] as List<dynamic>?)
              ?.map(
                  (e) => PropertyTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$PropertyGroupTypeModelToJson(
        PropertyGroupTypeModel instance) =>
    <String, dynamic>{
      'propertyGroupTypeId': instance.propertyGroupTypeId,
      'propertyGroupTypeName': instance.propertyGroupTypeName,
      'predefinedPropertyGroupTypeId': instance.predefinedPropertyGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedPropertyGroupTypeName':
          instance.predefinedPropertyGroupTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingPropertyTypes':
          instance.existingPropertyTypes?.map((e) => e.toJson()).toList(),
    };

PropertyGroupTypeModelReturnListModel
    _$PropertyGroupTypeModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        PropertyGroupTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => PropertyGroupTypeModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PropertyGroupTypeModelReturnListModelToJson(
        PropertyGroupTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyGroupTypeModelReturnModel _$PropertyGroupTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    PropertyGroupTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : PropertyGroupTypeModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyGroupTypeModelReturnModelToJson(
        PropertyGroupTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyGroupTypeUpdateModel _$PropertyGroupTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyGroupTypeUpdateModel(
      propertyGroupTypeId: (json['propertyGroupTypeId'] as num?)?.toInt(),
      propertyGroupTypeName: json['propertyGroupTypeName'] as String?,
      predefinedPropertyGroupTypeId:
          (json['predefinedPropertyGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyGroupTypeUpdateModelToJson(
        PropertyGroupTypeUpdateModel instance) =>
    <String, dynamic>{
      'propertyGroupTypeId': instance.propertyGroupTypeId,
      'propertyGroupTypeName': instance.propertyGroupTypeName,
      'predefinedPropertyGroupTypeId': instance.predefinedPropertyGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

PropertyModel _$PropertyModelFromJson(Map<String, dynamic> json) =>
    PropertyModel(
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyCode: json['propertyCode'] as String?,
      propertyName: json['propertyName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      specification: json['specification'] as String?,
      colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isOwn: json['isOwn'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      defaultPreProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPreProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultProductionPredefinedBudgetCategoryTypeId:
          (json['defaultProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPostProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPostProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      vendorName: json['vendorName'] as String?,
      propertyTypeName: json['propertyTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingPropertyRates: (json['existingPropertyRates'] as List<dynamic>?)
              ?.map(
                  (e) => PropertyRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$PropertyModelToJson(PropertyModel instance) =>
    <String, dynamic>{
      'propertyId': instance.propertyId,
      'propertyCode': instance.propertyCode,
      'propertyName': instance.propertyName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'colorTypeId': instance.colorTypeId,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'propertyTypeId': instance.propertyTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'departmentName': instance.departmentName,
      'defaultPreProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPreProductionPredefinedBudgetCategoryTypeId,
      'defaultProductionPredefinedBudgetCategoryTypeId':
          instance.defaultProductionPredefinedBudgetCategoryTypeId,
      'defaultPostProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPostProductionPredefinedBudgetCategoryTypeId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'vendorName': instance.vendorName,
      'propertyTypeName': instance.propertyTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingPropertyRates':
          instance.existingPropertyRates?.map((e) => e.toJson()).toList(),
    };

PropertyModelReturnListModel _$PropertyModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    PropertyModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => PropertyModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyModelReturnListModelToJson(
        PropertyModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyModelReturnModel _$PropertyModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    PropertyModelReturnModel(
      model: json['model'] == null
          ? null
          : PropertyModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyModelReturnModelToJson(
        PropertyModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyRateCreateModel _$PropertyRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyRateCreateModel(
      propertyId: (json['propertyId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyRateCreateModelToJson(
        PropertyRateCreateModel instance) =>
    <String, dynamic>{
      'propertyId': instance.propertyId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

PropertyRateCreateWithMovieModel _$PropertyRateCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    PropertyRateCreateWithMovieModel(
      propertyId: (json['propertyId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyRateCreateWithMovieModelToJson(
        PropertyRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'propertyId': instance.propertyId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

PropertyRateModel _$PropertyRateModelFromJson(Map<String, dynamic> json) =>
    PropertyRateModel(
      propertyRateId: (json['propertyRateId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      propertyName: json['propertyName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      companyName: json['companyName'] as String?,
      propertyCode: json['propertyCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$PropertyRateModelToJson(PropertyRateModel instance) =>
    <String, dynamic>{
      'propertyRateId': instance.propertyRateId,
      'propertyId': instance.propertyId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'propertyName': instance.propertyName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'companyName': instance.companyName,
      'propertyCode': instance.propertyCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

PropertyRateModelReturnListModel _$PropertyRateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    PropertyRateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => PropertyRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyRateModelReturnListModelToJson(
        PropertyRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyRateModelReturnModel _$PropertyRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    PropertyRateModelReturnModel(
      model: json['model'] == null
          ? null
          : PropertyRateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyRateModelReturnModelToJson(
        PropertyRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyRateUpdateModel _$PropertyRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyRateUpdateModel(
      propertyRateId: (json['propertyRateId'] as num?)?.toInt(),
      propertyId: (json['propertyId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyRateUpdateModelToJson(
        PropertyRateUpdateModel instance) =>
    <String, dynamic>{
      'propertyRateId': instance.propertyRateId,
      'propertyId': instance.propertyId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

PropertyTransactionCreateModel _$PropertyTransactionCreateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTransactionCreateModel(
      transactionDate: json['transactionDate'] == null
          ? null
          : DateTime.parse(json['transactionDate'] as String),
      transactionUserId: (json['transactionUserId'] as num?)?.toInt(),
      transactionToPerson: json['transactionToPerson'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      predefinedPropertyTransactionTypeId:
          (json['predefinedPropertyTransactionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyTransactionCreateModelToJson(
        PropertyTransactionCreateModel instance) =>
    <String, dynamic>{
      'transactionDate': instance.transactionDate?.toIso8601String(),
      'transactionUserId': instance.transactionUserId,
      'transactionToPerson': instance.transactionToPerson,
      'propertyId': instance.propertyId,
      'predefinedPropertyTransactionTypeId':
          instance.predefinedPropertyTransactionTypeId,
      'movieId': instance.movieId,
      'notes': instance.notes,
      'companyId': instance.companyId,
    };

PropertyTransactionModel _$PropertyTransactionModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTransactionModel(
      propertyTransactionId: (json['propertyTransactionId'] as num?)?.toInt(),
      transactionDate: json['transactionDate'] == null
          ? null
          : DateTime.parse(json['transactionDate'] as String),
      transactionUserId: (json['transactionUserId'] as num?)?.toInt(),
      transactionToPerson: json['transactionToPerson'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      predefinedPropertyTransactionTypeId:
          (json['predefinedPropertyTransactionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      transactionUserName: json['transactionUserName'] as String?,
      propertyName: json['propertyName'] as String?,
      predefinedPropertyTransactionTypeName:
          json['predefinedPropertyTransactionTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$PropertyTransactionModelToJson(
        PropertyTransactionModel instance) =>
    <String, dynamic>{
      'propertyTransactionId': instance.propertyTransactionId,
      'transactionDate': instance.transactionDate?.toIso8601String(),
      'transactionUserId': instance.transactionUserId,
      'transactionToPerson': instance.transactionToPerson,
      'propertyId': instance.propertyId,
      'predefinedPropertyTransactionTypeId':
          instance.predefinedPropertyTransactionTypeId,
      'movieId': instance.movieId,
      'notes': instance.notes,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'transactionUserName': instance.transactionUserName,
      'propertyName': instance.propertyName,
      'predefinedPropertyTransactionTypeName':
          instance.predefinedPropertyTransactionTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

PropertyTransactionModelReturnListModel
    _$PropertyTransactionModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        PropertyTransactionModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => PropertyTransactionModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PropertyTransactionModelReturnListModelToJson(
        PropertyTransactionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyTransactionModelReturnModel
    _$PropertyTransactionModelReturnModelFromJson(Map<String, dynamic> json) =>
        PropertyTransactionModelReturnModel(
          model: json['model'] == null
              ? null
              : PropertyTransactionModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PropertyTransactionModelReturnModelToJson(
        PropertyTransactionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyTransactionUpdateModel _$PropertyTransactionUpdateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTransactionUpdateModel(
      propertyTransactionId: (json['propertyTransactionId'] as num?)?.toInt(),
      transactionDate: json['transactionDate'] == null
          ? null
          : DateTime.parse(json['transactionDate'] as String),
      transactionUserId: (json['transactionUserId'] as num?)?.toInt(),
      transactionToPerson: json['transactionToPerson'] as String?,
      propertyId: (json['propertyId'] as num?)?.toInt(),
      predefinedPropertyTransactionTypeId:
          (json['predefinedPropertyTransactionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      notes: json['notes'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyTransactionUpdateModelToJson(
        PropertyTransactionUpdateModel instance) =>
    <String, dynamic>{
      'propertyTransactionId': instance.propertyTransactionId,
      'transactionDate': instance.transactionDate?.toIso8601String(),
      'transactionUserId': instance.transactionUserId,
      'transactionToPerson': instance.transactionToPerson,
      'propertyId': instance.propertyId,
      'predefinedPropertyTransactionTypeId':
          instance.predefinedPropertyTransactionTypeId,
      'movieId': instance.movieId,
      'notes': instance.notes,
      'companyId': instance.companyId,
    };

PropertyTypeCreateModel _$PropertyTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeCreateModel(
      propertyTypeName: json['propertyTypeName'] as String?,
      predefinedPropertyTypeId:
          (json['predefinedPropertyTypeId'] as num?)?.toInt(),
      propertyGroupTypeId: (json['propertyGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newPropertyTypeRates: (json['newPropertyTypeRates'] as List<dynamic>?)
              ?.map((e) => PropertyTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingPropertyTypeRates:
          (json['existingPropertyTypeRates'] as List<dynamic>?)
                  ?.map((e) => PropertyTypeRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$PropertyTypeCreateModelToJson(
        PropertyTypeCreateModel instance) =>
    <String, dynamic>{
      'propertyTypeName': instance.propertyTypeName,
      'predefinedPropertyTypeId': instance.predefinedPropertyTypeId,
      'propertyGroupTypeId': instance.propertyGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newPropertyTypeRates':
          instance.newPropertyTypeRates?.map((e) => e.toJson()).toList(),
      'existingPropertyTypeRates':
          instance.existingPropertyTypeRates?.map((e) => e.toJson()).toList(),
    };

PropertyTypeCreateWithMovieModel _$PropertyTypeCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeCreateWithMovieModel(
      propertyTypeName: json['propertyTypeName'] as String?,
      predefinedPropertyTypeId:
          (json['predefinedPropertyTypeId'] as num?)?.toInt(),
      propertyGroupTypeId: (json['propertyGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newPropertyTypeRates: (json['newPropertyTypeRates'] as List<dynamic>?)
              ?.map((e) => PropertyTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingPropertyTypeRates:
          (json['existingPropertyTypeRates'] as List<dynamic>?)
                  ?.map((e) => PropertyTypeRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyTypeCreateWithMovieModelToJson(
        PropertyTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'propertyTypeName': instance.propertyTypeName,
      'predefinedPropertyTypeId': instance.predefinedPropertyTypeId,
      'propertyGroupTypeId': instance.propertyGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newPropertyTypeRates':
          instance.newPropertyTypeRates?.map((e) => e.toJson()).toList(),
      'existingPropertyTypeRates':
          instance.existingPropertyTypeRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

PropertyTypeModel _$PropertyTypeModelFromJson(Map<String, dynamic> json) =>
    PropertyTypeModel(
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      propertyTypeName: json['propertyTypeName'] as String?,
      predefinedPropertyTypeId:
          (json['predefinedPropertyTypeId'] as num?)?.toInt(),
      propertyGroupTypeId: (json['propertyGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      propertyGroupTypeName: json['propertyGroupTypeName'] as String?,
      predefinedPropertyTypeName: json['predefinedPropertyTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingPropertyTypeRates:
          (json['existingPropertyTypeRates'] as List<dynamic>?)
                  ?.map((e) =>
                      PropertyTypeRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$PropertyTypeModelToJson(PropertyTypeModel instance) =>
    <String, dynamic>{
      'propertyTypeId': instance.propertyTypeId,
      'propertyTypeName': instance.propertyTypeName,
      'predefinedPropertyTypeId': instance.predefinedPropertyTypeId,
      'propertyGroupTypeId': instance.propertyGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'propertyGroupTypeName': instance.propertyGroupTypeName,
      'predefinedPropertyTypeName': instance.predefinedPropertyTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingPropertyTypeRates':
          instance.existingPropertyTypeRates?.map((e) => e.toJson()).toList(),
    };

PropertyTypeModelReturnListModel _$PropertyTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => PropertyTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyTypeModelReturnListModelToJson(
        PropertyTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyTypeModelReturnModel _$PropertyTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : PropertyTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyTypeModelReturnModelToJson(
        PropertyTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyTypeRateCreateModel _$PropertyTypeRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeRateCreateModel(
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyTypeRateCreateModelToJson(
        PropertyTypeRateCreateModel instance) =>
    <String, dynamic>{
      'propertyTypeId': instance.propertyTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

PropertyTypeRateCreateWithMovieModel
    _$PropertyTypeRateCreateWithMovieModelFromJson(Map<String, dynamic> json) =>
        PropertyTypeRateCreateWithMovieModel(
          propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
          predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
          rate: (json['rate'] as num?)?.toDouble(),
          predefinedCallSheetTypeId:
              (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PropertyTypeRateCreateWithMovieModelToJson(
        PropertyTypeRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'propertyTypeId': instance.propertyTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

PropertyTypeRateModel _$PropertyTypeRateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeRateModel(
      propertyTypeRateId: (json['propertyTypeRateId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      propertyTypeName: json['propertyTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$PropertyTypeRateModelToJson(
        PropertyTypeRateModel instance) =>
    <String, dynamic>{
      'propertyTypeRateId': instance.propertyTypeRateId,
      'propertyTypeId': instance.propertyTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'propertyTypeName': instance.propertyTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

PropertyTypeRateModelReturnListModel
    _$PropertyTypeRateModelReturnListModelFromJson(Map<String, dynamic> json) =>
        PropertyTypeRateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      PropertyTypeRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PropertyTypeRateModelReturnListModelToJson(
        PropertyTypeRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyTypeRateModelReturnModel _$PropertyTypeRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeRateModelReturnModel(
      model: json['model'] == null
          ? null
          : PropertyTypeRateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyTypeRateModelReturnModelToJson(
        PropertyTypeRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PropertyTypeRateUpdateModel _$PropertyTypeRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeRateUpdateModel(
      propertyTypeRateId: (json['propertyTypeRateId'] as num?)?.toInt(),
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PropertyTypeRateUpdateModelToJson(
        PropertyTypeRateUpdateModel instance) =>
    <String, dynamic>{
      'propertyTypeRateId': instance.propertyTypeRateId,
      'propertyTypeId': instance.propertyTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

PropertyTypeUpdateModel _$PropertyTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    PropertyTypeUpdateModel(
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      propertyTypeName: json['propertyTypeName'] as String?,
      predefinedPropertyTypeId:
          (json['predefinedPropertyTypeId'] as num?)?.toInt(),
      propertyGroupTypeId: (json['propertyGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newPropertyTypeRates: (json['newPropertyTypeRates'] as List<dynamic>?)
              ?.map((e) => PropertyTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingPropertyTypeRates:
          (json['existingPropertyTypeRates'] as List<dynamic>?)
                  ?.map((e) => PropertyTypeRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$PropertyTypeUpdateModelToJson(
        PropertyTypeUpdateModel instance) =>
    <String, dynamic>{
      'propertyTypeId': instance.propertyTypeId,
      'propertyTypeName': instance.propertyTypeName,
      'predefinedPropertyTypeId': instance.predefinedPropertyTypeId,
      'propertyGroupTypeId': instance.propertyGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newPropertyTypeRates':
          instance.newPropertyTypeRates?.map((e) => e.toJson()).toList(),
      'existingPropertyTypeRates':
          instance.existingPropertyTypeRates?.map((e) => e.toJson()).toList(),
    };

PropertyUpdateModel _$PropertyUpdateModelFromJson(Map<String, dynamic> json) =>
    PropertyUpdateModel(
      propertyId: (json['propertyId'] as num?)?.toInt(),
      propertyCode: json['propertyCode'] as String?,
      propertyName: json['propertyName'] as String?,
      vendorId: (json['vendorId'] as num?)?.toInt(),
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      specification: json['specification'] as String?,
      colorTypeId: (json['colorTypeId'] as num?)?.toInt(),
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      propertyTypeId: (json['propertyTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isOwn: json['isOwn'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newPropertyRates: (json['newPropertyRates'] as List<dynamic>?)
              ?.map((e) =>
                  PropertyRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingPropertyRates: (json['existingPropertyRates'] as List<dynamic>?)
              ?.map((e) =>
                  PropertyRateUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$PropertyUpdateModelToJson(
        PropertyUpdateModel instance) =>
    <String, dynamic>{
      'propertyId': instance.propertyId,
      'propertyCode': instance.propertyCode,
      'propertyName': instance.propertyName,
      'vendorId': instance.vendorId,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'specification': instance.specification,
      'colorTypeId': instance.colorTypeId,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'propertyTypeId': instance.propertyTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isOwn': instance.isOwn,
      'useDefaultRates': instance.useDefaultRates,
      'newPropertyRates':
          instance.newPropertyRates?.map((e) => e.toJson()).toList(),
      'existingPropertyRates':
          instance.existingPropertyRates?.map((e) => e.toJson()).toList(),
    };

PushNotificationServerCreateModel _$PushNotificationServerCreateModelFromJson(
        Map<String, dynamic> json) =>
    PushNotificationServerCreateModel(
      pushNotificationServerCode: json['pushNotificationServerCode'] as String?,
      pushNotificationServerName: json['pushNotificationServerName'] as String?,
      predefinedPushNotificationServerTypeId:
          (json['predefinedPushNotificationServerTypeId'] as num?)?.toInt(),
      projectId: json['projectId'] as String?,
      apiKey: json['apiKey'] as String?,
      apiSecret: json['apiSecret'] as String?,
      appleTeamId: json['appleTeamId'] as String?,
      appleKeyId: json['appleKeyId'] as String?,
      appleAuthKey: json['appleAuthKey'] as String?,
      isEnabled: json['isEnabled'] as bool?,
    );

Map<String, dynamic> _$PushNotificationServerCreateModelToJson(
        PushNotificationServerCreateModel instance) =>
    <String, dynamic>{
      'pushNotificationServerCode': instance.pushNotificationServerCode,
      'pushNotificationServerName': instance.pushNotificationServerName,
      'predefinedPushNotificationServerTypeId':
          instance.predefinedPushNotificationServerTypeId,
      'projectId': instance.projectId,
      'apiKey': instance.apiKey,
      'apiSecret': instance.apiSecret,
      'appleTeamId': instance.appleTeamId,
      'appleKeyId': instance.appleKeyId,
      'appleAuthKey': instance.appleAuthKey,
      'isEnabled': instance.isEnabled,
    };

PushNotificationServerModel _$PushNotificationServerModelFromJson(
        Map<String, dynamic> json) =>
    PushNotificationServerModel(
      pushNotificationServerId:
          (json['pushNotificationServerId'] as num?)?.toInt(),
      pushNotificationServerCode: json['pushNotificationServerCode'] as String?,
      pushNotificationServerName: json['pushNotificationServerName'] as String?,
      predefinedPushNotificationServerTypeId:
          (json['predefinedPushNotificationServerTypeId'] as num?)?.toInt(),
      projectId: json['projectId'] as String?,
      apiKey: json['apiKey'] as String?,
      apiSecret: json['apiSecret'] as String?,
      appleTeamId: json['appleTeamId'] as String?,
      appleKeyId: json['appleKeyId'] as String?,
      appleAuthKey: json['appleAuthKey'] as String?,
      isEnabled: json['isEnabled'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      projectName: json['projectName'] as String?,
      appleTeamName: json['appleTeamName'] as String?,
      appleKeyName: json['appleKeyName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$PushNotificationServerModelToJson(
        PushNotificationServerModel instance) =>
    <String, dynamic>{
      'pushNotificationServerId': instance.pushNotificationServerId,
      'pushNotificationServerCode': instance.pushNotificationServerCode,
      'pushNotificationServerName': instance.pushNotificationServerName,
      'predefinedPushNotificationServerTypeId':
          instance.predefinedPushNotificationServerTypeId,
      'projectId': instance.projectId,
      'apiKey': instance.apiKey,
      'apiSecret': instance.apiSecret,
      'appleTeamId': instance.appleTeamId,
      'appleKeyId': instance.appleKeyId,
      'appleAuthKey': instance.appleAuthKey,
      'isEnabled': instance.isEnabled,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'projectName': instance.projectName,
      'appleTeamName': instance.appleTeamName,
      'appleKeyName': instance.appleKeyName,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

PushNotificationServerModelReturnListModel
    _$PushNotificationServerModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        PushNotificationServerModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => PushNotificationServerModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PushNotificationServerModelReturnListModelToJson(
        PushNotificationServerModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PushNotificationServerModelReturnModel
    _$PushNotificationServerModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        PushNotificationServerModelReturnModel(
          model: json['model'] == null
              ? null
              : PushNotificationServerModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$PushNotificationServerModelReturnModelToJson(
        PushNotificationServerModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

PushNotificationServerUpdateModel _$PushNotificationServerUpdateModelFromJson(
        Map<String, dynamic> json) =>
    PushNotificationServerUpdateModel(
      pushNotificationServerId:
          (json['pushNotificationServerId'] as num?)?.toInt(),
      pushNotificationServerCode: json['pushNotificationServerCode'] as String?,
      pushNotificationServerName: json['pushNotificationServerName'] as String?,
      predefinedPushNotificationServerTypeId:
          (json['predefinedPushNotificationServerTypeId'] as num?)?.toInt(),
      projectId: json['projectId'] as String?,
      apiKey: json['apiKey'] as String?,
      apiSecret: json['apiSecret'] as String?,
      appleTeamId: json['appleTeamId'] as String?,
      appleKeyId: json['appleKeyId'] as String?,
      appleAuthKey: json['appleAuthKey'] as String?,
      isEnabled: json['isEnabled'] as bool?,
    );

Map<String, dynamic> _$PushNotificationServerUpdateModelToJson(
        PushNotificationServerUpdateModel instance) =>
    <String, dynamic>{
      'pushNotificationServerId': instance.pushNotificationServerId,
      'pushNotificationServerCode': instance.pushNotificationServerCode,
      'pushNotificationServerName': instance.pushNotificationServerName,
      'predefinedPushNotificationServerTypeId':
          instance.predefinedPushNotificationServerTypeId,
      'projectId': instance.projectId,
      'apiKey': instance.apiKey,
      'apiSecret': instance.apiSecret,
      'appleTeamId': instance.appleTeamId,
      'appleKeyId': instance.appleKeyId,
      'appleAuthKey': instance.appleAuthKey,
      'isEnabled': instance.isEnabled,
    };

RealtimeMessageCreateModel _$RealtimeMessageCreateModelFromJson(
        Map<String, dynamic> json) =>
    RealtimeMessageCreateModel(
      predefinedMessagePriorityTypeId:
          (json['predefinedMessagePriorityTypeId'] as num?)?.toInt(),
      messageDateTime: json['messageDateTime'] == null
          ? null
          : DateTime.parse(json['messageDateTime'] as String),
      messageSubject: json['messageSubject'] as String?,
      messageContent: json['messageContent'] as String?,
      messageSentDateTime: json['messageSentDateTime'] == null
          ? null
          : DateTime.parse(json['messageSentDateTime'] as String),
      messageViewedDateTime: json['messageViewedDateTime'] == null
          ? null
          : DateTime.parse(json['messageViewedDateTime'] as String),
      predefinedRealtimeMessageStatusTypeId:
          (json['predefinedRealtimeMessageStatusTypeId'] as num?)?.toInt(),
      predefinedNotificationMessageTypeId:
          (json['predefinedNotificationMessageTypeId'] as num?)?.toInt(),
      resourceName: json['resourceName'] as String?,
      predefinedResourceTypeId:
          (json['predefinedResourceTypeId'] as num?)?.toInt(),
      resourceId: (json['resourceId'] as num?)?.toInt(),
      errorMessage: json['errorMessage'] as String?,
      errorOccurredOn: json['errorOccurredOn'] == null
          ? null
          : DateTime.parse(json['errorOccurredOn'] as String),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$RealtimeMessageCreateModelToJson(
        RealtimeMessageCreateModel instance) =>
    <String, dynamic>{
      'predefinedMessagePriorityTypeId':
          instance.predefinedMessagePriorityTypeId,
      'messageDateTime': instance.messageDateTime?.toIso8601String(),
      'messageSubject': instance.messageSubject,
      'messageContent': instance.messageContent,
      'messageSentDateTime': instance.messageSentDateTime?.toIso8601String(),
      'messageViewedDateTime':
          instance.messageViewedDateTime?.toIso8601String(),
      'predefinedRealtimeMessageStatusTypeId':
          instance.predefinedRealtimeMessageStatusTypeId,
      'predefinedNotificationMessageTypeId':
          instance.predefinedNotificationMessageTypeId,
      'resourceName': instance.resourceName,
      'predefinedResourceTypeId': instance.predefinedResourceTypeId,
      'resourceId': instance.resourceId,
      'errorMessage': instance.errorMessage,
      'errorOccurredOn': instance.errorOccurredOn?.toIso8601String(),
      'userId': instance.userId,
      'companyId': instance.companyId,
    };

RealtimeMessageIdsModel _$RealtimeMessageIdsModelFromJson(
        Map<String, dynamic> json) =>
    RealtimeMessageIdsModel(
      ids: (json['ids'] as List<dynamic>?)
              ?.map((e) => (e as num).toInt())
              .toList() ??
          [],
    );

Map<String, dynamic> _$RealtimeMessageIdsModelToJson(
        RealtimeMessageIdsModel instance) =>
    <String, dynamic>{
      'ids': instance.ids,
    };

RealtimeMessageModel _$RealtimeMessageModelFromJson(
        Map<String, dynamic> json) =>
    RealtimeMessageModel(
      realtimeMessageId: (json['realtimeMessageId'] as num?)?.toInt(),
      predefinedMessagePriorityTypeId:
          (json['predefinedMessagePriorityTypeId'] as num?)?.toInt(),
      messageDateTime: json['messageDateTime'] == null
          ? null
          : DateTime.parse(json['messageDateTime'] as String),
      messageSubject: json['messageSubject'] as String?,
      messageContent: json['messageContent'] as String?,
      messageSentDateTime: json['messageSentDateTime'] == null
          ? null
          : DateTime.parse(json['messageSentDateTime'] as String),
      messageViewedDateTime: json['messageViewedDateTime'] == null
          ? null
          : DateTime.parse(json['messageViewedDateTime'] as String),
      predefinedRealtimeMessageStatusTypeId:
          (json['predefinedRealtimeMessageStatusTypeId'] as num?)?.toInt(),
      predefinedNotificationMessageTypeId:
          (json['predefinedNotificationMessageTypeId'] as num?)?.toInt(),
      resourceName: json['resourceName'] as String?,
      predefinedResourceTypeId:
          (json['predefinedResourceTypeId'] as num?)?.toInt(),
      resourceId: (json['resourceId'] as num?)?.toInt(),
      errorMessage: json['errorMessage'] as String?,
      errorOccurredOn: json['errorOccurredOn'] == null
          ? null
          : DateTime.parse(json['errorOccurredOn'] as String),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedMessagePriorityTypeName:
          json['predefinedMessagePriorityTypeName'] as String?,
      predefinedRealtimeMessageStatusTypeName:
          json['predefinedRealtimeMessageStatusTypeName'] as String?,
      predefinedNotificationMessageTypeName:
          json['predefinedNotificationMessageTypeName'] as String?,
      predefinedResourceTypeName: json['predefinedResourceTypeName'] as String?,
      userName: json['userName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$RealtimeMessageModelToJson(
        RealtimeMessageModel instance) =>
    <String, dynamic>{
      'realtimeMessageId': instance.realtimeMessageId,
      'predefinedMessagePriorityTypeId':
          instance.predefinedMessagePriorityTypeId,
      'messageDateTime': instance.messageDateTime?.toIso8601String(),
      'messageSubject': instance.messageSubject,
      'messageContent': instance.messageContent,
      'messageSentDateTime': instance.messageSentDateTime?.toIso8601String(),
      'messageViewedDateTime':
          instance.messageViewedDateTime?.toIso8601String(),
      'predefinedRealtimeMessageStatusTypeId':
          instance.predefinedRealtimeMessageStatusTypeId,
      'predefinedNotificationMessageTypeId':
          instance.predefinedNotificationMessageTypeId,
      'resourceName': instance.resourceName,
      'predefinedResourceTypeId': instance.predefinedResourceTypeId,
      'resourceId': instance.resourceId,
      'errorMessage': instance.errorMessage,
      'errorOccurredOn': instance.errorOccurredOn?.toIso8601String(),
      'userId': instance.userId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedMessagePriorityTypeName':
          instance.predefinedMessagePriorityTypeName,
      'predefinedRealtimeMessageStatusTypeName':
          instance.predefinedRealtimeMessageStatusTypeName,
      'predefinedNotificationMessageTypeName':
          instance.predefinedNotificationMessageTypeName,
      'predefinedResourceTypeName': instance.predefinedResourceTypeName,
      'userName': instance.userName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

RealtimeMessageModelReturnListModel
    _$RealtimeMessageModelReturnListModelFromJson(Map<String, dynamic> json) =>
        RealtimeMessageModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      RealtimeMessageModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$RealtimeMessageModelReturnListModelToJson(
        RealtimeMessageModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

RealtimeMessageModelReturnModel _$RealtimeMessageModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    RealtimeMessageModelReturnModel(
      model: json['model'] == null
          ? null
          : RealtimeMessageModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$RealtimeMessageModelReturnModelToJson(
        RealtimeMessageModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

RealtimeMessageUpdateModel _$RealtimeMessageUpdateModelFromJson(
        Map<String, dynamic> json) =>
    RealtimeMessageUpdateModel(
      realtimeMessageId: (json['realtimeMessageId'] as num?)?.toInt(),
      predefinedMessagePriorityTypeId:
          (json['predefinedMessagePriorityTypeId'] as num?)?.toInt(),
      messageDateTime: json['messageDateTime'] == null
          ? null
          : DateTime.parse(json['messageDateTime'] as String),
      messageSubject: json['messageSubject'] as String?,
      messageContent: json['messageContent'] as String?,
      messageSentDateTime: json['messageSentDateTime'] == null
          ? null
          : DateTime.parse(json['messageSentDateTime'] as String),
      messageViewedDateTime: json['messageViewedDateTime'] == null
          ? null
          : DateTime.parse(json['messageViewedDateTime'] as String),
      predefinedRealtimeMessageStatusTypeId:
          (json['predefinedRealtimeMessageStatusTypeId'] as num?)?.toInt(),
      predefinedNotificationMessageTypeId:
          (json['predefinedNotificationMessageTypeId'] as num?)?.toInt(),
      resourceName: json['resourceName'] as String?,
      predefinedResourceTypeId:
          (json['predefinedResourceTypeId'] as num?)?.toInt(),
      resourceId: (json['resourceId'] as num?)?.toInt(),
      errorMessage: json['errorMessage'] as String?,
      errorOccurredOn: json['errorOccurredOn'] == null
          ? null
          : DateTime.parse(json['errorOccurredOn'] as String),
      userId: (json['userId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$RealtimeMessageUpdateModelToJson(
        RealtimeMessageUpdateModel instance) =>
    <String, dynamic>{
      'realtimeMessageId': instance.realtimeMessageId,
      'predefinedMessagePriorityTypeId':
          instance.predefinedMessagePriorityTypeId,
      'messageDateTime': instance.messageDateTime?.toIso8601String(),
      'messageSubject': instance.messageSubject,
      'messageContent': instance.messageContent,
      'messageSentDateTime': instance.messageSentDateTime?.toIso8601String(),
      'messageViewedDateTime':
          instance.messageViewedDateTime?.toIso8601String(),
      'predefinedRealtimeMessageStatusTypeId':
          instance.predefinedRealtimeMessageStatusTypeId,
      'predefinedNotificationMessageTypeId':
          instance.predefinedNotificationMessageTypeId,
      'resourceName': instance.resourceName,
      'predefinedResourceTypeId': instance.predefinedResourceTypeId,
      'resourceId': instance.resourceId,
      'errorMessage': instance.errorMessage,
      'errorOccurredOn': instance.errorOccurredOn?.toIso8601String(),
      'userId': instance.userId,
      'companyId': instance.companyId,
    };

RecoverDeletedRecordModel _$RecoverDeletedRecordModelFromJson(
        Map<String, dynamic> json) =>
    RecoverDeletedRecordModel(
      resourceId: (json['resourceId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$RecoverDeletedRecordModelToJson(
        RecoverDeletedRecordModel instance) =>
    <String, dynamic>{
      'resourceId': instance.resourceId,
    };

RecoverPasswordRequestModel _$RecoverPasswordRequestModelFromJson(
        Map<String, dynamic> json) =>
    RecoverPasswordRequestModel(
      userName: json['userName'] as String?,
      clientRedirectURL: json['clientRedirectURL'] as String?,
    );

Map<String, dynamic> _$RecoverPasswordRequestModelToJson(
        RecoverPasswordRequestModel instance) =>
    <String, dynamic>{
      'userName': instance.userName,
      'clientRedirectURL': instance.clientRedirectURL,
    };

ReportServerConfigurationModel _$ReportServerConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    ReportServerConfigurationModel(
      reportServerFileStorageConnectionString:
          json['reportServerFileStorageConnectionString'] as String?,
      reportServerQueueConnectionString:
          json['reportServerQueueConnectionString'] as String?,
      reportServerProcessThreadCount:
          (json['reportServerProcessThreadCount'] as num?)?.toInt(),
      enableReportServerAutoCleanup:
          json['enableReportServerAutoCleanup'] as bool?,
      reportServerAutoCleanUpAfterDays:
          (json['reportServerAutoCleanUpAfterDays'] as num?)?.toInt(),
      reportServerViewerWebPath: json['reportServerViewerWebPath'] as String?,
      reportStoragePrefix: json['reportStoragePrefix'] as String?,
      reportIntermediateDataFilePath:
          json['reportIntermediateDataFilePath'] as String?,
    );

Map<String, dynamic> _$ReportServerConfigurationModelToJson(
        ReportServerConfigurationModel instance) =>
    <String, dynamic>{
      'reportServerFileStorageConnectionString':
          instance.reportServerFileStorageConnectionString,
      'reportServerQueueConnectionString':
          instance.reportServerQueueConnectionString,
      'reportServerProcessThreadCount': instance.reportServerProcessThreadCount,
      'enableReportServerAutoCleanup': instance.enableReportServerAutoCleanup,
      'reportServerAutoCleanUpAfterDays':
          instance.reportServerAutoCleanUpAfterDays,
      'reportServerViewerWebPath': instance.reportServerViewerWebPath,
      'reportStoragePrefix': instance.reportStoragePrefix,
      'reportIntermediateDataFilePath': instance.reportIntermediateDataFilePath,
    };

ReportServerConfigurationModelReturnModel
    _$ReportServerConfigurationModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        ReportServerConfigurationModelReturnModel(
          model: json['model'] == null
              ? null
              : ReportServerConfigurationModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ReportServerConfigurationModelReturnModelToJson(
        ReportServerConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ResetPasswordRequestModel _$ResetPasswordRequestModelFromJson(
        Map<String, dynamic> json) =>
    ResetPasswordRequestModel(
      loginRedirecturl: json['loginRedirecturl'] as String?,
      token: json['token'] as String?,
      newPassword: json['newPassword'] as String?,
      confirmPassword: json['confirmPassword'] as String?,
    );

Map<String, dynamic> _$ResetPasswordRequestModelToJson(
        ResetPasswordRequestModel instance) =>
    <String, dynamic>{
      'loginRedirecturl': instance.loginRedirecturl,
      'token': instance.token,
      'newPassword': instance.newPassword,
      'confirmPassword': instance.confirmPassword,
    };

ResourceBiometricRecordCreateModel _$ResourceBiometricRecordCreateModelFromJson(
        Map<String, dynamic> json) =>
    ResourceBiometricRecordCreateModel(
      artistId: (json['artistId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      predefinedBiometricTypeId:
          (json['predefinedBiometricTypeId'] as num?)?.toInt(),
      documentLocation: json['documentLocation'] as String?,
      documentActualFileName: json['documentActualFileName'] as String?,
      documentActualFileSize: (json['documentActualFileSize'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ResourceBiometricRecordCreateModelToJson(
        ResourceBiometricRecordCreateModel instance) =>
    <String, dynamic>{
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'vendorId': instance.vendorId,
      'userId': instance.userId,
      'predefinedBiometricTypeId': instance.predefinedBiometricTypeId,
      'documentLocation': instance.documentLocation,
      'documentActualFileName': instance.documentActualFileName,
      'documentActualFileSize': instance.documentActualFileSize,
      'companyId': instance.companyId,
    };

ResourceBiometricRecordModel _$ResourceBiometricRecordModelFromJson(
        Map<String, dynamic> json) =>
    ResourceBiometricRecordModel(
      resourceBiometricRecordId:
          (json['resourceBiometricRecordId'] as num?)?.toInt(),
      artistId: (json['artistId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      predefinedBiometricTypeId:
          (json['predefinedBiometricTypeId'] as num?)?.toInt(),
      documentLocation: json['documentLocation'] as String?,
      documentActualFileName: json['documentActualFileName'] as String?,
      documentActualFileSize: (json['documentActualFileSize'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      userName: json['userName'] as String?,
      userFirstName: json['userFirstName'] as String?,
      userLastName: json['userLastName'] as String?,
      predefinedBiometricTypeName:
          json['predefinedBiometricTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ResourceBiometricRecordModelToJson(
        ResourceBiometricRecordModel instance) =>
    <String, dynamic>{
      'resourceBiometricRecordId': instance.resourceBiometricRecordId,
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'vendorId': instance.vendorId,
      'userId': instance.userId,
      'predefinedBiometricTypeId': instance.predefinedBiometricTypeId,
      'documentLocation': instance.documentLocation,
      'documentActualFileName': instance.documentActualFileName,
      'documentActualFileSize': instance.documentActualFileSize,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'userName': instance.userName,
      'userFirstName': instance.userFirstName,
      'userLastName': instance.userLastName,
      'predefinedBiometricTypeName': instance.predefinedBiometricTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ResourceBiometricRecordModelReturnListModel
    _$ResourceBiometricRecordModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        ResourceBiometricRecordModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => ResourceBiometricRecordModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ResourceBiometricRecordModelReturnListModelToJson(
        ResourceBiometricRecordModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ResourceBiometricRecordModelReturnModel
    _$ResourceBiometricRecordModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        ResourceBiometricRecordModelReturnModel(
          model: json['model'] == null
              ? null
              : ResourceBiometricRecordModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ResourceBiometricRecordModelReturnModelToJson(
        ResourceBiometricRecordModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ResourceIdentificationDocumentCreateModel
    _$ResourceIdentificationDocumentCreateModelFromJson(
            Map<String, dynamic> json) =>
        ResourceIdentificationDocumentCreateModel(
          artistId: (json['artistId'] as num?)?.toInt(),
          technicianId: (json['technicianId'] as num?)?.toInt(),
          vendorId: (json['vendorId'] as num?)?.toInt(),
          userId: (json['userId'] as num?)?.toInt(),
          predefinedIdentificationDocumentTypeId:
              (json['predefinedIdentificationDocumentTypeId'] as num?)?.toInt(),
          documentLocation: json['documentLocation'] as String?,
          documentActualFileName: json['documentActualFileName'] as String?,
          documentActualFileSize:
              (json['documentActualFileSize'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ResourceIdentificationDocumentCreateModelToJson(
        ResourceIdentificationDocumentCreateModel instance) =>
    <String, dynamic>{
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'vendorId': instance.vendorId,
      'userId': instance.userId,
      'predefinedIdentificationDocumentTypeId':
          instance.predefinedIdentificationDocumentTypeId,
      'documentLocation': instance.documentLocation,
      'documentActualFileName': instance.documentActualFileName,
      'documentActualFileSize': instance.documentActualFileSize,
      'companyId': instance.companyId,
    };

ResourceIdentificationDocumentModel
    _$ResourceIdentificationDocumentModelFromJson(Map<String, dynamic> json) =>
        ResourceIdentificationDocumentModel(
          resourceIdentificationDocumentId:
              (json['resourceIdentificationDocumentId'] as num?)?.toInt(),
          artistId: (json['artistId'] as num?)?.toInt(),
          technicianId: (json['technicianId'] as num?)?.toInt(),
          vendorId: (json['vendorId'] as num?)?.toInt(),
          userId: (json['userId'] as num?)?.toInt(),
          predefinedIdentificationDocumentTypeId:
              (json['predefinedIdentificationDocumentTypeId'] as num?)?.toInt(),
          documentLocation: json['documentLocation'] as String?,
          documentActualFileName: json['documentActualFileName'] as String?,
          documentActualFileSize:
              (json['documentActualFileSize'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          isDeleted: json['isDeleted'] as bool?,
          createdDate: json['createdDate'] == null
              ? null
              : DateTime.parse(json['createdDate'] as String),
          createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
          modifiedDate: json['modifiedDate'] == null
              ? null
              : DateTime.parse(json['modifiedDate'] as String),
          modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
          userName: json['userName'] as String?,
          userFirstName: json['userFirstName'] as String?,
          userLastName: json['userLastName'] as String?,
          predefinedIdentificationDocumentTypeName:
              json['predefinedIdentificationDocumentTypeName'] as String?,
          companyName: json['companyName'] as String?,
          createdByUserFirstName: json['createdByUserFirstName'] as String?,
          createdByUserLastName: json['createdByUserLastName'] as String?,
          createdByUserEmail: json['createdByUserEmail'] as String?,
          modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
          createdBy: json['createdBy'] as String?,
          modifiedBy: json['modifiedBy'] as String?,
        );

Map<String, dynamic> _$ResourceIdentificationDocumentModelToJson(
        ResourceIdentificationDocumentModel instance) =>
    <String, dynamic>{
      'resourceIdentificationDocumentId':
          instance.resourceIdentificationDocumentId,
      'artistId': instance.artistId,
      'technicianId': instance.technicianId,
      'vendorId': instance.vendorId,
      'userId': instance.userId,
      'predefinedIdentificationDocumentTypeId':
          instance.predefinedIdentificationDocumentTypeId,
      'documentLocation': instance.documentLocation,
      'documentActualFileName': instance.documentActualFileName,
      'documentActualFileSize': instance.documentActualFileSize,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'userName': instance.userName,
      'userFirstName': instance.userFirstName,
      'userLastName': instance.userLastName,
      'predefinedIdentificationDocumentTypeName':
          instance.predefinedIdentificationDocumentTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ResourceIdentificationDocumentModelReturnListModel
    _$ResourceIdentificationDocumentModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        ResourceIdentificationDocumentModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => ResourceIdentificationDocumentModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ResourceIdentificationDocumentModelReturnListModelToJson(
        ResourceIdentificationDocumentModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ResourceIdentificationDocumentModelReturnModel
    _$ResourceIdentificationDocumentModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        ResourceIdentificationDocumentModelReturnModel(
          model: json['model'] == null
              ? null
              : ResourceIdentificationDocumentModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ResourceIdentificationDocumentModelReturnModelToJson(
        ResourceIdentificationDocumentModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ReturnError _$ReturnErrorFromJson(Map<String, dynamic> json) => ReturnError(
      friendlyMessage: json['friendlyMessage'] as String?,
      internalErrorMessage: json['internalErrorMessage'] as String?,
      errorItemList: (json['errorItemList'] as List<dynamic>?)
              ?.map((e) => ReturnErrorItem.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      exception: json['exception'] == null
          ? null
          : ReturnException.fromJson(json['exception'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ReturnErrorToJson(ReturnError instance) =>
    <String, dynamic>{
      'friendlyMessage': instance.friendlyMessage,
      'internalErrorMessage': instance.internalErrorMessage,
      'errorItemList': instance.errorItemList?.map((e) => e.toJson()).toList(),
      'exception': instance.exception?.toJson(),
    };

ReturnErrorItem _$ReturnErrorItemFromJson(Map<String, dynamic> json) =>
    ReturnErrorItem(
      key: json['key'] as String?,
      $value: json['value'] as String?,
      tags:
          (json['tags'] as List<dynamic>?)?.map((e) => e as String).toList() ??
              [],
    );

Map<String, dynamic> _$ReturnErrorItemToJson(ReturnErrorItem instance) =>
    <String, dynamic>{
      'key': instance.key,
      'value': instance.$value,
      'tags': instance.tags,
    };

ReturnException _$ReturnExceptionFromJson(Map<String, dynamic> json) =>
    ReturnException(
      stackTrace: json['stackTrace'] as String?,
      source: json['source'] as String?,
      message: json['message'] as String?,
      innerException: json['innerException'] == null
          ? null
          : ReturnException.fromJson(
              json['innerException'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$ReturnExceptionToJson(ReturnException instance) =>
    <String, dynamic>{
      'stackTrace': instance.stackTrace,
      'source': instance.source,
      'message': instance.message,
      'innerException': instance.innerException?.toJson(),
    };

SavedJobCreateModel _$SavedJobCreateModelFromJson(Map<String, dynamic> json) =>
    SavedJobCreateModel(
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      submittedDate: json['submittedDate'] == null
          ? null
          : DateTime.parse(json['submittedDate'] as String),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      jobName: json['jobName'] as String?,
      userId: (json['userId'] as num?)?.toInt(),
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
    );

Map<String, dynamic> _$SavedJobCreateModelToJson(
        SavedJobCreateModel instance) =>
    <String, dynamic>{
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'jobTemplateId': instance.jobTemplateId,
      'companyId': instance.companyId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'submittedDate': instance.submittedDate?.toIso8601String(),
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'jobName': instance.jobName,
      'userId': instance.userId,
      'includeDataSourceFile': instance.includeDataSourceFile,
    };

SavedJobModel _$SavedJobModelFromJson(Map<String, dynamic> json) =>
    SavedJobModel(
      savedJobId: (json['savedJobId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      submittedDate: json['submittedDate'] == null
          ? null
          : DateTime.parse(json['submittedDate'] as String),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      jobName: json['jobName'] as String?,
      userId: (json['userId'] as num?)?.toInt(),
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedJobTypeName: json['predefinedJobTypeName'] as String?,
      predefinedJobOrReportTypeName:
          json['predefinedJobOrReportTypeName'] as String?,
      companyName: json['companyName'] as String?,
      submittedByUserName: json['submittedByUserName'] as String?,
      userName: json['userName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      notificationEmails: (json['notificationEmails'] as List<dynamic>?)
              ?.map((e) => SavedJobNotificationEmailModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$SavedJobModelToJson(SavedJobModel instance) =>
    <String, dynamic>{
      'savedJobId': instance.savedJobId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'jobTemplateId': instance.jobTemplateId,
      'companyId': instance.companyId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'submittedDate': instance.submittedDate?.toIso8601String(),
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'jobName': instance.jobName,
      'userId': instance.userId,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedJobTypeName': instance.predefinedJobTypeName,
      'predefinedJobOrReportTypeName': instance.predefinedJobOrReportTypeName,
      'companyName': instance.companyName,
      'submittedByUserName': instance.submittedByUserName,
      'userName': instance.userName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'notificationEmails':
          instance.notificationEmails?.map((e) => e.toJson()).toList(),
    };

SavedJobModelReturnListModel _$SavedJobModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    SavedJobModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => SavedJobModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$SavedJobModelReturnListModelToJson(
        SavedJobModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SavedJobModelReturnModel _$SavedJobModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    SavedJobModelReturnModel(
      model: json['model'] == null
          ? null
          : SavedJobModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$SavedJobModelReturnModelToJson(
        SavedJobModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SavedJobNotificationEmailCreateModel
    _$SavedJobNotificationEmailCreateModelFromJson(Map<String, dynamic> json) =>
        SavedJobNotificationEmailCreateModel(
          savedJobId: (json['savedJobId'] as num?)?.toInt(),
          email: json['email'] as String?,
          sendStatus: (json['sendStatus'] as num?)?.toInt(),
          message: json['message'] as String?,
        );

Map<String, dynamic> _$SavedJobNotificationEmailCreateModelToJson(
        SavedJobNotificationEmailCreateModel instance) =>
    <String, dynamic>{
      'savedJobId': instance.savedJobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
    };

SavedJobNotificationEmailModel _$SavedJobNotificationEmailModelFromJson(
        Map<String, dynamic> json) =>
    SavedJobNotificationEmailModel(
      savedJobNotificationEmailId:
          (json['savedJobNotificationEmailId'] as num?)?.toInt(),
      savedJobId: (json['savedJobId'] as num?)?.toInt(),
      email: json['email'] as String?,
      sendStatus: (json['sendStatus'] as num?)?.toInt(),
      message: json['message'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$SavedJobNotificationEmailModelToJson(
        SavedJobNotificationEmailModel instance) =>
    <String, dynamic>{
      'savedJobNotificationEmailId': instance.savedJobNotificationEmailId,
      'savedJobId': instance.savedJobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

SavedJobNotificationEmailModelReturnListModel
    _$SavedJobNotificationEmailModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        SavedJobNotificationEmailModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => SavedJobNotificationEmailModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$SavedJobNotificationEmailModelReturnListModelToJson(
        SavedJobNotificationEmailModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SavedJobNotificationEmailModelReturnModel
    _$SavedJobNotificationEmailModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        SavedJobNotificationEmailModelReturnModel(
          model: json['model'] == null
              ? null
              : SavedJobNotificationEmailModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$SavedJobNotificationEmailModelReturnModelToJson(
        SavedJobNotificationEmailModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SavedJobNotificationEmailUpdateModel
    _$SavedJobNotificationEmailUpdateModelFromJson(Map<String, dynamic> json) =>
        SavedJobNotificationEmailUpdateModel(
          savedJobNotificationEmailId:
              (json['savedJobNotificationEmailId'] as num?)?.toInt(),
          savedJobId: (json['savedJobId'] as num?)?.toInt(),
          email: json['email'] as String?,
          sendStatus: (json['sendStatus'] as num?)?.toInt(),
          message: json['message'] as String?,
        );

Map<String, dynamic> _$SavedJobNotificationEmailUpdateModelToJson(
        SavedJobNotificationEmailUpdateModel instance) =>
    <String, dynamic>{
      'savedJobNotificationEmailId': instance.savedJobNotificationEmailId,
      'savedJobId': instance.savedJobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
    };

SavedJobUpdateModel _$SavedJobUpdateModelFromJson(Map<String, dynamic> json) =>
    SavedJobUpdateModel(
      savedJobId: (json['savedJobId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      completedDate: json['completedDate'] == null
          ? null
          : DateTime.parse(json['completedDate'] as String),
      submittedDate: json['submittedDate'] == null
          ? null
          : DateTime.parse(json['submittedDate'] as String),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      jobName: json['jobName'] as String?,
      userId: (json['userId'] as num?)?.toInt(),
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
    );

Map<String, dynamic> _$SavedJobUpdateModelToJson(
        SavedJobUpdateModel instance) =>
    <String, dynamic>{
      'savedJobId': instance.savedJobId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'jobTemplateId': instance.jobTemplateId,
      'companyId': instance.companyId,
      'completedDate': instance.completedDate?.toIso8601String(),
      'submittedDate': instance.submittedDate?.toIso8601String(),
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'jobName': instance.jobName,
      'userId': instance.userId,
      'includeDataSourceFile': instance.includeDataSourceFile,
    };

ScheduledJobCreateModel _$ScheduledJobCreateModelFromJson(
        Map<String, dynamic> json) =>
    ScheduledJobCreateModel(
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupTime: (json['pickupTime'] as num?)?.toInt(),
      jobName: json['jobName'] as String?,
      runAsUserId: (json['runAsUserId'] as num?)?.toInt(),
      startDate: json['startDate'] == null
          ? null
          : DateTime.parse(json['startDate'] as String),
      endDate: json['endDate'] == null
          ? null
          : DateTime.parse(json['endDate'] as String),
      startTime: json['startTime'] == null
          ? null
          : DateTime.parse(json['startTime'] as String),
      recurring: json['recurring'] as bool?,
      runMonday: json['runMonday'] as bool?,
      runTuesday: json['runTuesday'] as bool?,
      runWednesday: json['runWednesday'] as bool?,
      runThursday: json['runThursday'] as bool?,
      runFriday: json['runFriday'] as bool?,
      runSaturday: json['runSaturday'] as bool?,
      runSunday: json['runSunday'] as bool?,
      active: json['active'] as bool?,
      isMonthly: json['isMonthly'] as bool?,
      runMonthlyDay: (json['runMonthlyDay'] as num?)?.toInt(),
      runMonthlyTime: json['runMonthlyTime'] == null
          ? null
          : DateTime.parse(json['runMonthlyTime'] as String),
      isHourly: json['isHourly'] as bool?,
      isDaily: json['isDaily'] as bool?,
      runDailyTime: json['runDailyTime'] == null
          ? null
          : DateTime.parse(json['runDailyTime'] as String),
      isWeekly: json['isWeekly'] as bool?,
      runHourlyMinute: (json['runHourlyMinute'] as num?)?.toInt(),
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      runOnWeekNumber: (json['runOnWeekNumber'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ScheduledJobCreateModelToJson(
        ScheduledJobCreateModel instance) =>
    <String, dynamic>{
      'jobTemplateId': instance.jobTemplateId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'companyId': instance.companyId,
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupTime': instance.pickupTime,
      'jobName': instance.jobName,
      'runAsUserId': instance.runAsUserId,
      'startDate': instance.startDate?.toIso8601String(),
      'endDate': instance.endDate?.toIso8601String(),
      'startTime': instance.startTime?.toIso8601String(),
      'recurring': instance.recurring,
      'runMonday': instance.runMonday,
      'runTuesday': instance.runTuesday,
      'runWednesday': instance.runWednesday,
      'runThursday': instance.runThursday,
      'runFriday': instance.runFriday,
      'runSaturday': instance.runSaturday,
      'runSunday': instance.runSunday,
      'active': instance.active,
      'isMonthly': instance.isMonthly,
      'runMonthlyDay': instance.runMonthlyDay,
      'runMonthlyTime': instance.runMonthlyTime?.toIso8601String(),
      'isHourly': instance.isHourly,
      'isDaily': instance.isDaily,
      'runDailyTime': instance.runDailyTime?.toIso8601String(),
      'isWeekly': instance.isWeekly,
      'runHourlyMinute': instance.runHourlyMinute,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'runOnWeekNumber': instance.runOnWeekNumber,
    };

ScheduledJobHistoryCreateModel _$ScheduledJobHistoryCreateModelFromJson(
        Map<String, dynamic> json) =>
    ScheduledJobHistoryCreateModel(
      scheduledJobId: (json['scheduledJobId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupMachineName: json['pickupMachineName'] as String?,
      pickupProcessId: (json['pickupProcessId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ScheduledJobHistoryCreateModelToJson(
        ScheduledJobHistoryCreateModel instance) =>
    <String, dynamic>{
      'scheduledJobId': instance.scheduledJobId,
      'companyId': instance.companyId,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupMachineName': instance.pickupMachineName,
      'pickupProcessId': instance.pickupProcessId,
    };

ScheduledJobHistoryModel _$ScheduledJobHistoryModelFromJson(
        Map<String, dynamic> json) =>
    ScheduledJobHistoryModel(
      scheduledJobHistoryId: (json['scheduledJobHistoryId'] as num?)?.toInt(),
      scheduledJobId: (json['scheduledJobId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupMachineName: json['pickupMachineName'] as String?,
      pickupProcessId: (json['pickupProcessId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      pickupProcessName: json['pickupProcessName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ScheduledJobHistoryModelToJson(
        ScheduledJobHistoryModel instance) =>
    <String, dynamic>{
      'scheduledJobHistoryId': instance.scheduledJobHistoryId,
      'scheduledJobId': instance.scheduledJobId,
      'companyId': instance.companyId,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupMachineName': instance.pickupMachineName,
      'pickupProcessId': instance.pickupProcessId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'pickupProcessName': instance.pickupProcessName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ScheduledJobHistoryModelReturnListModel
    _$ScheduledJobHistoryModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        ScheduledJobHistoryModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => ScheduledJobHistoryModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ScheduledJobHistoryModelReturnListModelToJson(
        ScheduledJobHistoryModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ScheduledJobHistoryModelReturnModel
    _$ScheduledJobHistoryModelReturnModelFromJson(Map<String, dynamic> json) =>
        ScheduledJobHistoryModelReturnModel(
          model: json['model'] == null
              ? null
              : ScheduledJobHistoryModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ScheduledJobHistoryModelReturnModelToJson(
        ScheduledJobHistoryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ScheduledJobHistoryUpdateModel _$ScheduledJobHistoryUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ScheduledJobHistoryUpdateModel(
      scheduledJobHistoryId: (json['scheduledJobHistoryId'] as num?)?.toInt(),
      scheduledJobId: (json['scheduledJobId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupMachineName: json['pickupMachineName'] as String?,
      pickupProcessId: (json['pickupProcessId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ScheduledJobHistoryUpdateModelToJson(
        ScheduledJobHistoryUpdateModel instance) =>
    <String, dynamic>{
      'scheduledJobHistoryId': instance.scheduledJobHistoryId,
      'scheduledJobId': instance.scheduledJobId,
      'companyId': instance.companyId,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupMachineName': instance.pickupMachineName,
      'pickupProcessId': instance.pickupProcessId,
    };

ScheduledJobModel _$ScheduledJobModelFromJson(Map<String, dynamic> json) =>
    ScheduledJobModel(
      scheduledJobId: (json['scheduledJobId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupTime: (json['pickupTime'] as num?)?.toInt(),
      jobName: json['jobName'] as String?,
      runAsUserId: (json['runAsUserId'] as num?)?.toInt(),
      startDate: json['startDate'] == null
          ? null
          : DateTime.parse(json['startDate'] as String),
      endDate: json['endDate'] == null
          ? null
          : DateTime.parse(json['endDate'] as String),
      startTime: json['startTime'] == null
          ? null
          : DateTime.parse(json['startTime'] as String),
      recurring: json['recurring'] as bool?,
      runMonday: json['runMonday'] as bool?,
      runTuesday: json['runTuesday'] as bool?,
      runWednesday: json['runWednesday'] as bool?,
      runThursday: json['runThursday'] as bool?,
      runFriday: json['runFriday'] as bool?,
      runSaturday: json['runSaturday'] as bool?,
      runSunday: json['runSunday'] as bool?,
      active: json['active'] as bool?,
      isMonthly: json['isMonthly'] as bool?,
      runMonthlyDay: (json['runMonthlyDay'] as num?)?.toInt(),
      runMonthlyTime: json['runMonthlyTime'] == null
          ? null
          : DateTime.parse(json['runMonthlyTime'] as String),
      isHourly: json['isHourly'] as bool?,
      isDaily: json['isDaily'] as bool?,
      runDailyTime: json['runDailyTime'] == null
          ? null
          : DateTime.parse(json['runDailyTime'] as String),
      isWeekly: json['isWeekly'] as bool?,
      runHourlyMinute: (json['runHourlyMinute'] as num?)?.toInt(),
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      runOnWeekNumber: (json['runOnWeekNumber'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      enumTypeName: json['enumTypeName'] as String?,
      companyName: json['companyName'] as String?,
      submittedByUserName: json['submittedByUserName'] as String?,
      runAsUserName: json['runAsUserName'] as String?,
      predefinedJobTypeName: json['predefinedJobTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      notificationEmails: (json['notificationEmails'] as List<dynamic>?)
              ?.map((e) => ScheduledJobNotificationEmailModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$ScheduledJobModelToJson(ScheduledJobModel instance) =>
    <String, dynamic>{
      'scheduledJobId': instance.scheduledJobId,
      'jobTemplateId': instance.jobTemplateId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'companyId': instance.companyId,
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupTime': instance.pickupTime,
      'jobName': instance.jobName,
      'runAsUserId': instance.runAsUserId,
      'startDate': instance.startDate?.toIso8601String(),
      'endDate': instance.endDate?.toIso8601String(),
      'startTime': instance.startTime?.toIso8601String(),
      'recurring': instance.recurring,
      'runMonday': instance.runMonday,
      'runTuesday': instance.runTuesday,
      'runWednesday': instance.runWednesday,
      'runThursday': instance.runThursday,
      'runFriday': instance.runFriday,
      'runSaturday': instance.runSaturday,
      'runSunday': instance.runSunday,
      'active': instance.active,
      'isMonthly': instance.isMonthly,
      'runMonthlyDay': instance.runMonthlyDay,
      'runMonthlyTime': instance.runMonthlyTime?.toIso8601String(),
      'isHourly': instance.isHourly,
      'isDaily': instance.isDaily,
      'runDailyTime': instance.runDailyTime?.toIso8601String(),
      'isWeekly': instance.isWeekly,
      'runHourlyMinute': instance.runHourlyMinute,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'runOnWeekNumber': instance.runOnWeekNumber,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'enumTypeName': instance.enumTypeName,
      'companyName': instance.companyName,
      'submittedByUserName': instance.submittedByUserName,
      'runAsUserName': instance.runAsUserName,
      'predefinedJobTypeName': instance.predefinedJobTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'notificationEmails':
          instance.notificationEmails?.map((e) => e.toJson()).toList(),
    };

ScheduledJobModelReturnListModel _$ScheduledJobModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    ScheduledJobModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map(
                  (e) => ScheduledJobModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ScheduledJobModelReturnListModelToJson(
        ScheduledJobModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ScheduledJobModelReturnModel _$ScheduledJobModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    ScheduledJobModelReturnModel(
      model: json['model'] == null
          ? null
          : ScheduledJobModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ScheduledJobModelReturnModelToJson(
        ScheduledJobModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ScheduledJobNotificationEmailCreateModel
    _$ScheduledJobNotificationEmailCreateModelFromJson(
            Map<String, dynamic> json) =>
        ScheduledJobNotificationEmailCreateModel(
          scheduledJobId: (json['scheduledJobId'] as num?)?.toInt(),
          email: json['email'] as String?,
          sendStatus: (json['sendStatus'] as num?)?.toInt(),
          message: json['message'] as String?,
        );

Map<String, dynamic> _$ScheduledJobNotificationEmailCreateModelToJson(
        ScheduledJobNotificationEmailCreateModel instance) =>
    <String, dynamic>{
      'scheduledJobId': instance.scheduledJobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
    };

ScheduledJobNotificationEmailModel _$ScheduledJobNotificationEmailModelFromJson(
        Map<String, dynamic> json) =>
    ScheduledJobNotificationEmailModel(
      scheduledJobNotificationEmailId:
          (json['scheduledJobNotificationEmailId'] as num?)?.toInt(),
      scheduledJobId: (json['scheduledJobId'] as num?)?.toInt(),
      email: json['email'] as String?,
      sendStatus: (json['sendStatus'] as num?)?.toInt(),
      message: json['message'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$ScheduledJobNotificationEmailModelToJson(
        ScheduledJobNotificationEmailModel instance) =>
    <String, dynamic>{
      'scheduledJobNotificationEmailId':
          instance.scheduledJobNotificationEmailId,
      'scheduledJobId': instance.scheduledJobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

ScheduledJobNotificationEmailModelReturnListModel
    _$ScheduledJobNotificationEmailModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        ScheduledJobNotificationEmailModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => ScheduledJobNotificationEmailModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ScheduledJobNotificationEmailModelReturnListModelToJson(
        ScheduledJobNotificationEmailModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ScheduledJobNotificationEmailModelReturnModel
    _$ScheduledJobNotificationEmailModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        ScheduledJobNotificationEmailModelReturnModel(
          model: json['model'] == null
              ? null
              : ScheduledJobNotificationEmailModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ScheduledJobNotificationEmailModelReturnModelToJson(
        ScheduledJobNotificationEmailModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

ScheduledJobNotificationEmailUpdateModel
    _$ScheduledJobNotificationEmailUpdateModelFromJson(
            Map<String, dynamic> json) =>
        ScheduledJobNotificationEmailUpdateModel(
          scheduledJobNotificationEmailId:
              (json['scheduledJobNotificationEmailId'] as num?)?.toInt(),
          scheduledJobId: (json['scheduledJobId'] as num?)?.toInt(),
          email: json['email'] as String?,
          sendStatus: (json['sendStatus'] as num?)?.toInt(),
          message: json['message'] as String?,
        );

Map<String, dynamic> _$ScheduledJobNotificationEmailUpdateModelToJson(
        ScheduledJobNotificationEmailUpdateModel instance) =>
    <String, dynamic>{
      'scheduledJobNotificationEmailId':
          instance.scheduledJobNotificationEmailId,
      'scheduledJobId': instance.scheduledJobId,
      'email': instance.email,
      'sendStatus': instance.sendStatus,
      'message': instance.message,
    };

ScheduledJobUpdateModel _$ScheduledJobUpdateModelFromJson(
        Map<String, dynamic> json) =>
    ScheduledJobUpdateModel(
      scheduledJobId: (json['scheduledJobId'] as num?)?.toInt(),
      jobTemplateId: (json['jobTemplateId'] as num?)?.toInt(),
      predefinedJobTypeId: (json['predefinedJobTypeId'] as num?)?.toInt(),
      predefinedJobOrReportTypeId:
          (json['predefinedJobOrReportTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      submittedByUserId: (json['submittedByUserId'] as num?)?.toInt(),
      executableFolder: json['executableFolder'] as String?,
      executableName: json['executableName'] as String?,
      executableParameter: json['executableParameter'] as String?,
      serializedJobParameter: json['serializedJobParameter'] as String?,
      reportTemplateFile: json['reportTemplateFile'] as String?,
      exportDoc: json['exportDoc'] as bool?,
      exportXls: json['exportXls'] as bool?,
      exportPpt: json['exportPpt'] as bool?,
      exportCsv: json['exportCsv'] as bool?,
      exportXml: json['exportXml'] as bool?,
      exportPdf: json['exportPdf'] as bool?,
      exportCustom: json['exportCustom'] as bool?,
      customExportName: json['customExportName'] as String?,
      pickupDate: json['pickupDate'] == null
          ? null
          : DateTime.parse(json['pickupDate'] as String),
      pickupTime: (json['pickupTime'] as num?)?.toInt(),
      jobName: json['jobName'] as String?,
      runAsUserId: (json['runAsUserId'] as num?)?.toInt(),
      startDate: json['startDate'] == null
          ? null
          : DateTime.parse(json['startDate'] as String),
      endDate: json['endDate'] == null
          ? null
          : DateTime.parse(json['endDate'] as String),
      startTime: json['startTime'] == null
          ? null
          : DateTime.parse(json['startTime'] as String),
      recurring: json['recurring'] as bool?,
      runMonday: json['runMonday'] as bool?,
      runTuesday: json['runTuesday'] as bool?,
      runWednesday: json['runWednesday'] as bool?,
      runThursday: json['runThursday'] as bool?,
      runFriday: json['runFriday'] as bool?,
      runSaturday: json['runSaturday'] as bool?,
      runSunday: json['runSunday'] as bool?,
      active: json['active'] as bool?,
      isMonthly: json['isMonthly'] as bool?,
      runMonthlyDay: (json['runMonthlyDay'] as num?)?.toInt(),
      runMonthlyTime: json['runMonthlyTime'] == null
          ? null
          : DateTime.parse(json['runMonthlyTime'] as String),
      isHourly: json['isHourly'] as bool?,
      isDaily: json['isDaily'] as bool?,
      runDailyTime: json['runDailyTime'] == null
          ? null
          : DateTime.parse(json['runDailyTime'] as String),
      isWeekly: json['isWeekly'] as bool?,
      runHourlyMinute: (json['runHourlyMinute'] as num?)?.toInt(),
      includeDataSourceFile: json['includeDataSourceFile'] as bool?,
      runOnWeekNumber: (json['runOnWeekNumber'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ScheduledJobUpdateModelToJson(
        ScheduledJobUpdateModel instance) =>
    <String, dynamic>{
      'scheduledJobId': instance.scheduledJobId,
      'jobTemplateId': instance.jobTemplateId,
      'predefinedJobTypeId': instance.predefinedJobTypeId,
      'predefinedJobOrReportTypeId': instance.predefinedJobOrReportTypeId,
      'companyId': instance.companyId,
      'submittedByUserId': instance.submittedByUserId,
      'executableFolder': instance.executableFolder,
      'executableName': instance.executableName,
      'executableParameter': instance.executableParameter,
      'serializedJobParameter': instance.serializedJobParameter,
      'reportTemplateFile': instance.reportTemplateFile,
      'exportDoc': instance.exportDoc,
      'exportXls': instance.exportXls,
      'exportPpt': instance.exportPpt,
      'exportCsv': instance.exportCsv,
      'exportXml': instance.exportXml,
      'exportPdf': instance.exportPdf,
      'exportCustom': instance.exportCustom,
      'customExportName': instance.customExportName,
      'pickupDate': instance.pickupDate?.toIso8601String(),
      'pickupTime': instance.pickupTime,
      'jobName': instance.jobName,
      'runAsUserId': instance.runAsUserId,
      'startDate': instance.startDate?.toIso8601String(),
      'endDate': instance.endDate?.toIso8601String(),
      'startTime': instance.startTime?.toIso8601String(),
      'recurring': instance.recurring,
      'runMonday': instance.runMonday,
      'runTuesday': instance.runTuesday,
      'runWednesday': instance.runWednesday,
      'runThursday': instance.runThursday,
      'runFriday': instance.runFriday,
      'runSaturday': instance.runSaturday,
      'runSunday': instance.runSunday,
      'active': instance.active,
      'isMonthly': instance.isMonthly,
      'runMonthlyDay': instance.runMonthlyDay,
      'runMonthlyTime': instance.runMonthlyTime?.toIso8601String(),
      'isHourly': instance.isHourly,
      'isDaily': instance.isDaily,
      'runDailyTime': instance.runDailyTime?.toIso8601String(),
      'isWeekly': instance.isWeekly,
      'runHourlyMinute': instance.runHourlyMinute,
      'includeDataSourceFile': instance.includeDataSourceFile,
      'runOnWeekNumber': instance.runOnWeekNumber,
    };

SearchConfigurationModel _$SearchConfigurationModelFromJson(
        Map<String, dynamic> json) =>
    SearchConfigurationModel(
      indexProcessThreadCount:
          (json['indexProcessThreadCount'] as num?)?.toInt(),
      searchQueueConnectionString:
          json['searchQueueConnectionString'] as String?,
      searchQueueRetryCount: (json['searchQueueRetryCount'] as num?)?.toInt(),
      searchQueueRetryTimeInMinutes:
          (json['searchQueueRetryTimeInMinutes'] as num?)?.toInt(),
      searchIndexServerType: (json['searchIndexServerType'] as num?)?.toInt(),
      indexDataLocation: json['indexDataLocation'] as String?,
      indexServerName: json['indexServerName'] as String?,
      indexServerPort: json['indexServerPort'] as String?,
      indexServerPath: json['indexServerPath'] as String?,
      indexCollectionName: json['indexCollectionName'] as String?,
      supportedDocTypes: json['supportedDocTypes'] as String?,
    );

Map<String, dynamic> _$SearchConfigurationModelToJson(
        SearchConfigurationModel instance) =>
    <String, dynamic>{
      'indexProcessThreadCount': instance.indexProcessThreadCount,
      'searchQueueConnectionString': instance.searchQueueConnectionString,
      'searchQueueRetryCount': instance.searchQueueRetryCount,
      'searchQueueRetryTimeInMinutes': instance.searchQueueRetryTimeInMinutes,
      'searchIndexServerType': instance.searchIndexServerType,
      'indexDataLocation': instance.indexDataLocation,
      'indexServerName': instance.indexServerName,
      'indexServerPort': instance.indexServerPort,
      'indexServerPath': instance.indexServerPath,
      'indexCollectionName': instance.indexCollectionName,
      'supportedDocTypes': instance.supportedDocTypes,
    };

SearchConfigurationModelReturnModel
    _$SearchConfigurationModelReturnModelFromJson(Map<String, dynamic> json) =>
        SearchConfigurationModelReturnModel(
          model: json['model'] == null
              ? null
              : SearchConfigurationModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$SearchConfigurationModelReturnModelToJson(
        SearchConfigurationModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SingleSignOnServerCreateModel _$SingleSignOnServerCreateModelFromJson(
        Map<String, dynamic> json) =>
    SingleSignOnServerCreateModel(
      singleSignOnServerName: json['singleSignOnServerName'] as String?,
      singleSignOnServerCode: json['singleSignOnServerCode'] as String?,
      predefinedSingleSignOnServerTypeId:
          (json['predefinedSingleSignOnServerTypeId'] as num?)?.toInt(),
      host: json['host'] as String?,
      clientId: json['clientId'] as String?,
      clientTenantId: json['clientTenantId'] as String?,
      clientSecret: json['clientSecret'] as String?,
      forAllCompany: json['forAllCompany'] as bool?,
      isDefault: json['isDefault'] as bool?,
    );

Map<String, dynamic> _$SingleSignOnServerCreateModelToJson(
        SingleSignOnServerCreateModel instance) =>
    <String, dynamic>{
      'singleSignOnServerName': instance.singleSignOnServerName,
      'singleSignOnServerCode': instance.singleSignOnServerCode,
      'predefinedSingleSignOnServerTypeId':
          instance.predefinedSingleSignOnServerTypeId,
      'host': instance.host,
      'clientId': instance.clientId,
      'clientTenantId': instance.clientTenantId,
      'clientSecret': instance.clientSecret,
      'forAllCompany': instance.forAllCompany,
      'isDefault': instance.isDefault,
    };

SingleSignOnServerModel _$SingleSignOnServerModelFromJson(
        Map<String, dynamic> json) =>
    SingleSignOnServerModel(
      singleSignOnServerId: (json['singleSignOnServerId'] as num?)?.toInt(),
      singleSignOnServerName: json['singleSignOnServerName'] as String?,
      singleSignOnServerCode: json['singleSignOnServerCode'] as String?,
      predefinedSingleSignOnServerTypeId:
          (json['predefinedSingleSignOnServerTypeId'] as num?)?.toInt(),
      host: json['host'] as String?,
      clientId: json['clientId'] as String?,
      clientTenantId: json['clientTenantId'] as String?,
      clientSecret: json['clientSecret'] as String?,
      forAllCompany: json['forAllCompany'] as bool?,
      isDefault: json['isDefault'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      singleSignOnServerTypeName: json['singleSignOnServerTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$SingleSignOnServerModelToJson(
        SingleSignOnServerModel instance) =>
    <String, dynamic>{
      'singleSignOnServerId': instance.singleSignOnServerId,
      'singleSignOnServerName': instance.singleSignOnServerName,
      'singleSignOnServerCode': instance.singleSignOnServerCode,
      'predefinedSingleSignOnServerTypeId':
          instance.predefinedSingleSignOnServerTypeId,
      'host': instance.host,
      'clientId': instance.clientId,
      'clientTenantId': instance.clientTenantId,
      'clientSecret': instance.clientSecret,
      'forAllCompany': instance.forAllCompany,
      'isDefault': instance.isDefault,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'singleSignOnServerTypeName': instance.singleSignOnServerTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

SingleSignOnServerModelReturnListModel
    _$SingleSignOnServerModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        SingleSignOnServerModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => SingleSignOnServerModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$SingleSignOnServerModelReturnListModelToJson(
        SingleSignOnServerModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SingleSignOnServerModelReturnModel _$SingleSignOnServerModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    SingleSignOnServerModelReturnModel(
      model: json['model'] == null
          ? null
          : SingleSignOnServerModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$SingleSignOnServerModelReturnModelToJson(
        SingleSignOnServerModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SingleSignOnServerUpdateModel _$SingleSignOnServerUpdateModelFromJson(
        Map<String, dynamic> json) =>
    SingleSignOnServerUpdateModel(
      singleSignOnServerId: (json['singleSignOnServerId'] as num?)?.toInt(),
      singleSignOnServerName: json['singleSignOnServerName'] as String?,
      singleSignOnServerCode: json['singleSignOnServerCode'] as String?,
      predefinedSingleSignOnServerTypeId:
          (json['predefinedSingleSignOnServerTypeId'] as num?)?.toInt(),
      host: json['host'] as String?,
      clientId: json['clientId'] as String?,
      clientTenantId: json['clientTenantId'] as String?,
      clientSecret: json['clientSecret'] as String?,
      forAllCompany: json['forAllCompany'] as bool?,
      isDefault: json['isDefault'] as bool?,
    );

Map<String, dynamic> _$SingleSignOnServerUpdateModelToJson(
        SingleSignOnServerUpdateModel instance) =>
    <String, dynamic>{
      'singleSignOnServerId': instance.singleSignOnServerId,
      'singleSignOnServerName': instance.singleSignOnServerName,
      'singleSignOnServerCode': instance.singleSignOnServerCode,
      'predefinedSingleSignOnServerTypeId':
          instance.predefinedSingleSignOnServerTypeId,
      'host': instance.host,
      'clientId': instance.clientId,
      'clientTenantId': instance.clientTenantId,
      'clientSecret': instance.clientSecret,
      'forAllCompany': instance.forAllCompany,
      'isDefault': instance.isDefault,
    };

SmsServerCreateModel _$SmsServerCreateModelFromJson(
        Map<String, dynamic> json) =>
    SmsServerCreateModel(
      smsServerCode: json['smsServerCode'] as String?,
      smsServerName: json['smsServerName'] as String?,
      host: json['host'] as String?,
      port: (json['port'] as num?)?.toInt(),
      senderName: json['senderName'] as String?,
      senderEmail: json['senderEmail'] as String?,
      userName: json['userName'] as String?,
      password: json['password'] as String?,
      isSecure: json['isSecure'] as bool?,
      isDefault: json['isDefault'] as bool?,
      predefinedSmsAndVoiceServerTypeId:
          (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
      twilioAccountSid: json['twilioAccountSid'] as String?,
      twilioAccountAuthToken: json['twilioAccountAuthToken'] as String?,
      twilioAccountPhoneNumber: json['twilioAccountPhoneNumber'] as String?,
    );

Map<String, dynamic> _$SmsServerCreateModelToJson(
        SmsServerCreateModel instance) =>
    <String, dynamic>{
      'smsServerCode': instance.smsServerCode,
      'smsServerName': instance.smsServerName,
      'host': instance.host,
      'port': instance.port,
      'senderName': instance.senderName,
      'senderEmail': instance.senderEmail,
      'userName': instance.userName,
      'password': instance.password,
      'isSecure': instance.isSecure,
      'isDefault': instance.isDefault,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'twilioAccountSid': instance.twilioAccountSid,
      'twilioAccountAuthToken': instance.twilioAccountAuthToken,
      'twilioAccountPhoneNumber': instance.twilioAccountPhoneNumber,
    };

SmsServerModel _$SmsServerModelFromJson(Map<String, dynamic> json) =>
    SmsServerModel(
      smsServerId: (json['smsServerId'] as num?)?.toInt(),
      smsServerCode: json['smsServerCode'] as String?,
      smsServerName: json['smsServerName'] as String?,
      host: json['host'] as String?,
      port: (json['port'] as num?)?.toInt(),
      senderName: json['senderName'] as String?,
      senderEmail: json['senderEmail'] as String?,
      userName: json['userName'] as String?,
      password: json['password'] as String?,
      isSecure: json['isSecure'] as bool?,
      isDefault: json['isDefault'] as bool?,
      predefinedSmsAndVoiceServerTypeId:
          (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
      twilioAccountSid: json['twilioAccountSid'] as String?,
      twilioAccountAuthToken: json['twilioAccountAuthToken'] as String?,
      twilioAccountPhoneNumber: json['twilioAccountPhoneNumber'] as String?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedSmsAndVoiceServerTypeName:
          json['predefinedSmsAndVoiceServerTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$SmsServerModelToJson(SmsServerModel instance) =>
    <String, dynamic>{
      'smsServerId': instance.smsServerId,
      'smsServerCode': instance.smsServerCode,
      'smsServerName': instance.smsServerName,
      'host': instance.host,
      'port': instance.port,
      'senderName': instance.senderName,
      'senderEmail': instance.senderEmail,
      'userName': instance.userName,
      'password': instance.password,
      'isSecure': instance.isSecure,
      'isDefault': instance.isDefault,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'twilioAccountSid': instance.twilioAccountSid,
      'twilioAccountAuthToken': instance.twilioAccountAuthToken,
      'twilioAccountPhoneNumber': instance.twilioAccountPhoneNumber,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedSmsAndVoiceServerTypeName':
          instance.predefinedSmsAndVoiceServerTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

SmsServerModelReturnListModel _$SmsServerModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    SmsServerModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => SmsServerModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$SmsServerModelReturnListModelToJson(
        SmsServerModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SmsServerModelReturnModel _$SmsServerModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    SmsServerModelReturnModel(
      model: json['model'] == null
          ? null
          : SmsServerModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$SmsServerModelReturnModelToJson(
        SmsServerModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SmsServerUpdateModel _$SmsServerUpdateModelFromJson(
        Map<String, dynamic> json) =>
    SmsServerUpdateModel(
      smsServerId: (json['smsServerId'] as num?)?.toInt(),
      smsServerCode: json['smsServerCode'] as String?,
      smsServerName: json['smsServerName'] as String?,
      host: json['host'] as String?,
      port: (json['port'] as num?)?.toInt(),
      senderName: json['senderName'] as String?,
      senderEmail: json['senderEmail'] as String?,
      userName: json['userName'] as String?,
      password: json['password'] as String?,
      isSecure: json['isSecure'] as bool?,
      isDefault: json['isDefault'] as bool?,
      predefinedSmsAndVoiceServerTypeId:
          (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
      twilioAccountSid: json['twilioAccountSid'] as String?,
      twilioAccountAuthToken: json['twilioAccountAuthToken'] as String?,
      twilioAccountPhoneNumber: json['twilioAccountPhoneNumber'] as String?,
    );

Map<String, dynamic> _$SmsServerUpdateModelToJson(
        SmsServerUpdateModel instance) =>
    <String, dynamic>{
      'smsServerId': instance.smsServerId,
      'smsServerCode': instance.smsServerCode,
      'smsServerName': instance.smsServerName,
      'host': instance.host,
      'port': instance.port,
      'senderName': instance.senderName,
      'senderEmail': instance.senderEmail,
      'userName': instance.userName,
      'password': instance.password,
      'isSecure': instance.isSecure,
      'isDefault': instance.isDefault,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'twilioAccountSid': instance.twilioAccountSid,
      'twilioAccountAuthToken': instance.twilioAccountAuthToken,
      'twilioAccountPhoneNumber': instance.twilioAccountPhoneNumber,
    };

StateModel _$StateModelFromJson(Map<String, dynamic> json) => StateModel(
      stateId: (json['stateId'] as num?)?.toInt(),
      stateName: json['stateName'] as String?,
      stateCode: json['stateCode'] as String?,
      countryId: (json['countryId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      countryName: json['countryName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$StateModelToJson(StateModel instance) =>
    <String, dynamic>{
      'stateId': instance.stateId,
      'stateName': instance.stateName,
      'stateCode': instance.stateCode,
      'countryId': instance.countryId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'countryName': instance.countryName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

StateModelReturnListModel _$StateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    StateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => StateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$StateModelReturnListModelToJson(
        StateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

StateModelReturnModel _$StateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    StateModelReturnModel(
      model: json['model'] == null
          ? null
          : StateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$StateModelReturnModelToJson(
        StateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

StatementTemplateCreateModel _$StatementTemplateCreateModelFromJson(
        Map<String, dynamic> json) =>
    StatementTemplateCreateModel(
      companyId: (json['companyId'] as num?)?.toInt(),
      predefinedStatementTemplateTypeId:
          (json['predefinedStatementTemplateTypeId'] as num?)?.toInt(),
      statementTemplateName: json['statementTemplateName'] as String?,
      description: json['description'] as String?,
      statementTemplateFileName: json['statementTemplateFileName'] as String?,
      statementTemplateFileLocation:
          json['statementTemplateFileLocation'] as String?,
      statementTemplatePreviewFileLocation:
          json['statementTemplatePreviewFileLocation'] as String?,
      isDefault: json['isDefault'] as bool?,
    );

Map<String, dynamic> _$StatementTemplateCreateModelToJson(
        StatementTemplateCreateModel instance) =>
    <String, dynamic>{
      'companyId': instance.companyId,
      'predefinedStatementTemplateTypeId':
          instance.predefinedStatementTemplateTypeId,
      'statementTemplateName': instance.statementTemplateName,
      'description': instance.description,
      'statementTemplateFileName': instance.statementTemplateFileName,
      'statementTemplateFileLocation': instance.statementTemplateFileLocation,
      'statementTemplatePreviewFileLocation':
          instance.statementTemplatePreviewFileLocation,
      'isDefault': instance.isDefault,
    };

StatementTemplateModel _$StatementTemplateModelFromJson(
        Map<String, dynamic> json) =>
    StatementTemplateModel(
      statementTemplateId: (json['statementTemplateId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      predefinedStatementTemplateTypeId:
          (json['predefinedStatementTemplateTypeId'] as num?)?.toInt(),
      statementTemplateName: json['statementTemplateName'] as String?,
      description: json['description'] as String?,
      statementTemplateFileName: json['statementTemplateFileName'] as String?,
      statementTemplateFileLocation:
          json['statementTemplateFileLocation'] as String?,
      statementTemplatePreviewFileLocation:
          json['statementTemplatePreviewFileLocation'] as String?,
      isDefault: json['isDefault'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      predefinedStatementTemplateTypeName:
          json['predefinedStatementTemplateTypeName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$StatementTemplateModelToJson(
        StatementTemplateModel instance) =>
    <String, dynamic>{
      'statementTemplateId': instance.statementTemplateId,
      'companyId': instance.companyId,
      'predefinedStatementTemplateTypeId':
          instance.predefinedStatementTemplateTypeId,
      'statementTemplateName': instance.statementTemplateName,
      'description': instance.description,
      'statementTemplateFileName': instance.statementTemplateFileName,
      'statementTemplateFileLocation': instance.statementTemplateFileLocation,
      'statementTemplatePreviewFileLocation':
          instance.statementTemplatePreviewFileLocation,
      'isDefault': instance.isDefault,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'companyName': instance.companyName,
      'predefinedStatementTemplateTypeName':
          instance.predefinedStatementTemplateTypeName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

StatementTemplateModelReturnListModel
    _$StatementTemplateModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        StatementTemplateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => StatementTemplateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$StatementTemplateModelReturnListModelToJson(
        StatementTemplateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

StatementTemplateModelReturnModel _$StatementTemplateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    StatementTemplateModelReturnModel(
      model: json['model'] == null
          ? null
          : StatementTemplateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$StatementTemplateModelReturnModelToJson(
        StatementTemplateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

StringReturnListModel _$StringReturnListModelFromJson(
        Map<String, dynamic> json) =>
    StringReturnListModel(
      model:
          (json['model'] as List<dynamic>?)?.map((e) => e as String).toList() ??
              [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$StringReturnListModelToJson(
        StringReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model,
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SubstitutionTemplatePropertyModel _$SubstitutionTemplatePropertyModelFromJson(
        Map<String, dynamic> json) =>
    SubstitutionTemplatePropertyModel(
      name: json['name'] as String?,
      description: json['description'] as String?,
    );

Map<String, dynamic> _$SubstitutionTemplatePropertyModelToJson(
        SubstitutionTemplatePropertyModel instance) =>
    <String, dynamic>{
      'name': instance.name,
      'description': instance.description,
    };

SubstitutionTemplatePropertyModelReturnListModel
    _$SubstitutionTemplatePropertyModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        SubstitutionTemplatePropertyModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => SubstitutionTemplatePropertyModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$SubstitutionTemplatePropertyModelReturnListModelToJson(
        SubstitutionTemplatePropertyModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

SystemSummaryModel _$SystemSummaryModelFromJson(Map<String, dynamic> json) =>
    SystemSummaryModel(
      companiesCount: (json['companiesCount'] as num?)?.toInt(),
      usersCount: (json['usersCount'] as num?)?.toInt(),
      currentRunningJobsCount:
          (json['currentRunningJobsCount'] as num?)?.toInt(),
      messageToSendTotalCount:
          (json['messageToSendTotalCount'] as num?)?.toInt(),
      messageToSendSuccessCount:
          (json['messageToSendSuccessCount'] as num?)?.toInt(),
      messageToSendErrorCount:
          (json['messageToSendErrorCount'] as num?)?.toInt(),
      totalJobCount: (json['totalJobCount'] as num?)?.toInt(),
      jobSuccessCount: (json['jobSuccessCount'] as num?)?.toInt(),
      jobErrorCount: (json['jobErrorCount'] as num?)?.toInt(),
    );

Map<String, dynamic> _$SystemSummaryModelToJson(SystemSummaryModel instance) =>
    <String, dynamic>{
      'companiesCount': instance.companiesCount,
      'usersCount': instance.usersCount,
      'currentRunningJobsCount': instance.currentRunningJobsCount,
      'messageToSendTotalCount': instance.messageToSendTotalCount,
      'messageToSendSuccessCount': instance.messageToSendSuccessCount,
      'messageToSendErrorCount': instance.messageToSendErrorCount,
      'totalJobCount': instance.totalJobCount,
      'jobSuccessCount': instance.jobSuccessCount,
      'jobErrorCount': instance.jobErrorCount,
    };

SystemSummaryModelReturnModel _$SystemSummaryModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    SystemSummaryModelReturnModel(
      model: json['model'] == null
          ? null
          : SystemSummaryModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$SystemSummaryModelReturnModelToJson(
        SystemSummaryModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianCreateModel _$TechnicianCreateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianCreateModel(
      technicianCode: json['technicianCode'] as String?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newTechnicianRates: (json['newTechnicianRates'] as List<dynamic>?)
              ?.map((e) =>
                  TechnicianRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$TechnicianCreateModelToJson(
        TechnicianCreateModel instance) =>
    <String, dynamic>{
      'technicianCode': instance.technicianCode,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'technicianTypeId': instance.technicianTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'useDefaultRates': instance.useDefaultRates,
      'newTechnicianRates':
          instance.newTechnicianRates?.map((e) => e.toJson()).toList(),
    };

TechnicianCreateWithMovieModel _$TechnicianCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianCreateWithMovieModel(
      technicianCode: json['technicianCode'] as String?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newTechnicianRates: (json['newTechnicianRates'] as List<dynamic>?)
              ?.map((e) =>
                  TechnicianRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianCreateWithMovieModelToJson(
        TechnicianCreateWithMovieModel instance) =>
    <String, dynamic>{
      'technicianCode': instance.technicianCode,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'technicianTypeId': instance.technicianTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'useDefaultRates': instance.useDefaultRates,
      'newTechnicianRates':
          instance.newTechnicianRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

TechnicianGroupTypeCreateModel _$TechnicianGroupTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianGroupTypeCreateModel(
      technicianGroupTypeName: json['technicianGroupTypeName'] as String?,
      predefinedTechnicianGroupTypeId:
          (json['predefinedTechnicianGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianGroupTypeCreateModelToJson(
        TechnicianGroupTypeCreateModel instance) =>
    <String, dynamic>{
      'technicianGroupTypeName': instance.technicianGroupTypeName,
      'predefinedTechnicianGroupTypeId':
          instance.predefinedTechnicianGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

TechnicianGroupTypeCreateWithMovieModel
    _$TechnicianGroupTypeCreateWithMovieModelFromJson(
            Map<String, dynamic> json) =>
        TechnicianGroupTypeCreateWithMovieModel(
          technicianGroupTypeName: json['technicianGroupTypeName'] as String?,
          predefinedTechnicianGroupTypeId:
              (json['predefinedTechnicianGroupTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$TechnicianGroupTypeCreateWithMovieModelToJson(
        TechnicianGroupTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'technicianGroupTypeName': instance.technicianGroupTypeName,
      'predefinedTechnicianGroupTypeId':
          instance.predefinedTechnicianGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

TechnicianGroupTypeModel _$TechnicianGroupTypeModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianGroupTypeModel(
      technicianGroupTypeId: (json['technicianGroupTypeId'] as num?)?.toInt(),
      technicianGroupTypeName: json['technicianGroupTypeName'] as String?,
      predefinedTechnicianGroupTypeId:
          (json['predefinedTechnicianGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedTechnicianGroupTypeName:
          json['predefinedTechnicianGroupTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingTechnicianTypes:
          (json['existingTechnicianTypes'] as List<dynamic>?)
                  ?.map((e) =>
                      TechnicianTypeModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$TechnicianGroupTypeModelToJson(
        TechnicianGroupTypeModel instance) =>
    <String, dynamic>{
      'technicianGroupTypeId': instance.technicianGroupTypeId,
      'technicianGroupTypeName': instance.technicianGroupTypeName,
      'predefinedTechnicianGroupTypeId':
          instance.predefinedTechnicianGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedTechnicianGroupTypeName':
          instance.predefinedTechnicianGroupTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingTechnicianTypes':
          instance.existingTechnicianTypes?.map((e) => e.toJson()).toList(),
    };

TechnicianGroupTypeModelReturnListModel
    _$TechnicianGroupTypeModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        TechnicianGroupTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => TechnicianGroupTypeModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$TechnicianGroupTypeModelReturnListModelToJson(
        TechnicianGroupTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianGroupTypeModelReturnModel
    _$TechnicianGroupTypeModelReturnModelFromJson(Map<String, dynamic> json) =>
        TechnicianGroupTypeModelReturnModel(
          model: json['model'] == null
              ? null
              : TechnicianGroupTypeModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$TechnicianGroupTypeModelReturnModelToJson(
        TechnicianGroupTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianGroupTypeUpdateModel _$TechnicianGroupTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianGroupTypeUpdateModel(
      technicianGroupTypeId: (json['technicianGroupTypeId'] as num?)?.toInt(),
      technicianGroupTypeName: json['technicianGroupTypeName'] as String?,
      predefinedTechnicianGroupTypeId:
          (json['predefinedTechnicianGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianGroupTypeUpdateModelToJson(
        TechnicianGroupTypeUpdateModel instance) =>
    <String, dynamic>{
      'technicianGroupTypeId': instance.technicianGroupTypeId,
      'technicianGroupTypeName': instance.technicianGroupTypeName,
      'predefinedTechnicianGroupTypeId':
          instance.predefinedTechnicianGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

TechnicianModel _$TechnicianModelFromJson(Map<String, dynamic> json) =>
    TechnicianModel(
      technicianId: (json['technicianId'] as num?)?.toInt(),
      technicianCode: json['technicianCode'] as String?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      defaultPreProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPreProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultProductionPredefinedBudgetCategoryTypeId:
          (json['defaultProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPostProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPostProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      technicianTypeName: json['technicianTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingTechnicianRates:
          (json['existingTechnicianRates'] as List<dynamic>?)
                  ?.map((e) =>
                      TechnicianRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$TechnicianModelToJson(TechnicianModel instance) =>
    <String, dynamic>{
      'technicianId': instance.technicianId,
      'technicianCode': instance.technicianCode,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'technicianTypeId': instance.technicianTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'departmentName': instance.departmentName,
      'defaultPreProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPreProductionPredefinedBudgetCategoryTypeId,
      'defaultProductionPredefinedBudgetCategoryTypeId':
          instance.defaultProductionPredefinedBudgetCategoryTypeId,
      'defaultPostProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPostProductionPredefinedBudgetCategoryTypeId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'technicianTypeName': instance.technicianTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingTechnicianRates':
          instance.existingTechnicianRates?.map((e) => e.toJson()).toList(),
    };

TechnicianModelReturnListModel _$TechnicianModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => TechnicianModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianModelReturnListModelToJson(
        TechnicianModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianModelReturnModel _$TechnicianModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianModelReturnModel(
      model: json['model'] == null
          ? null
          : TechnicianModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianModelReturnModelToJson(
        TechnicianModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianRateCreateModel _$TechnicianRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianRateCreateModel(
      technicianId: (json['technicianId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianRateCreateModelToJson(
        TechnicianRateCreateModel instance) =>
    <String, dynamic>{
      'technicianId': instance.technicianId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

TechnicianRateCreateWithMovieModel _$TechnicianRateCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianRateCreateWithMovieModel(
      technicianId: (json['technicianId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianRateCreateWithMovieModelToJson(
        TechnicianRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'technicianId': instance.technicianId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

TechnicianRateModel _$TechnicianRateModelFromJson(Map<String, dynamic> json) =>
    TechnicianRateModel(
      technicianRateId: (json['technicianRateId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      technicianName: json['technicianName'] as String?,
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      companyName: json['companyName'] as String?,
      technicianCode: json['technicianCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$TechnicianRateModelToJson(
        TechnicianRateModel instance) =>
    <String, dynamic>{
      'technicianRateId': instance.technicianRateId,
      'technicianId': instance.technicianId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'technicianName': instance.technicianName,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'companyName': instance.companyName,
      'technicianCode': instance.technicianCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

TechnicianRateModelReturnListModel _$TechnicianRateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianRateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  TechnicianRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianRateModelReturnListModelToJson(
        TechnicianRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianRateModelReturnModel _$TechnicianRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianRateModelReturnModel(
      model: json['model'] == null
          ? null
          : TechnicianRateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianRateModelReturnModelToJson(
        TechnicianRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianRateUpdateModel _$TechnicianRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianRateUpdateModel(
      technicianRateId: (json['technicianRateId'] as num?)?.toInt(),
      technicianId: (json['technicianId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianRateUpdateModelToJson(
        TechnicianRateUpdateModel instance) =>
    <String, dynamic>{
      'technicianRateId': instance.technicianRateId,
      'technicianId': instance.technicianId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

TechnicianTypeCreateModel _$TechnicianTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeCreateModel(
      technicianTypeName: json['technicianTypeName'] as String?,
      predefinedTechnicianTypeId:
          (json['predefinedTechnicianTypeId'] as num?)?.toInt(),
      technicianGroupTypeId: (json['technicianGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newTechnicianTypeRates: (json['newTechnicianTypeRates'] as List<dynamic>?)
              ?.map((e) => TechnicianTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$TechnicianTypeCreateModelToJson(
        TechnicianTypeCreateModel instance) =>
    <String, dynamic>{
      'technicianTypeName': instance.technicianTypeName,
      'predefinedTechnicianTypeId': instance.predefinedTechnicianTypeId,
      'technicianGroupTypeId': instance.technicianGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newTechnicianTypeRates':
          instance.newTechnicianTypeRates?.map((e) => e.toJson()).toList(),
    };

TechnicianTypeCreateWithMovieModel _$TechnicianTypeCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeCreateWithMovieModel(
      technicianTypeName: json['technicianTypeName'] as String?,
      predefinedTechnicianTypeId:
          (json['predefinedTechnicianTypeId'] as num?)?.toInt(),
      technicianGroupTypeId: (json['technicianGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newTechnicianTypeRates: (json['newTechnicianTypeRates'] as List<dynamic>?)
              ?.map((e) => TechnicianTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianTypeCreateWithMovieModelToJson(
        TechnicianTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'technicianTypeName': instance.technicianTypeName,
      'predefinedTechnicianTypeId': instance.predefinedTechnicianTypeId,
      'technicianGroupTypeId': instance.technicianGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newTechnicianTypeRates':
          instance.newTechnicianTypeRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

TechnicianTypeModel _$TechnicianTypeModelFromJson(Map<String, dynamic> json) =>
    TechnicianTypeModel(
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      technicianTypeName: json['technicianTypeName'] as String?,
      predefinedTechnicianTypeId:
          (json['predefinedTechnicianTypeId'] as num?)?.toInt(),
      technicianGroupTypeId: (json['technicianGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      technicianGroupTypeName: json['technicianGroupTypeName'] as String?,
      predefinedTechnicianTypeName:
          json['predefinedTechnicianTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingTechnicianTypeRates: (json['existingTechnicianTypeRates']
                  as List<dynamic>?)
              ?.map((e) =>
                  TechnicianTypeRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$TechnicianTypeModelToJson(
        TechnicianTypeModel instance) =>
    <String, dynamic>{
      'technicianTypeId': instance.technicianTypeId,
      'technicianTypeName': instance.technicianTypeName,
      'predefinedTechnicianTypeId': instance.predefinedTechnicianTypeId,
      'technicianGroupTypeId': instance.technicianGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'technicianGroupTypeName': instance.technicianGroupTypeName,
      'predefinedTechnicianTypeName': instance.predefinedTechnicianTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingTechnicianTypeRates':
          instance.existingTechnicianTypeRates?.map((e) => e.toJson()).toList(),
    };

TechnicianTypeModelReturnListModel _$TechnicianTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  TechnicianTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianTypeModelReturnListModelToJson(
        TechnicianTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianTypeModelReturnModel _$TechnicianTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : TechnicianTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianTypeModelReturnModelToJson(
        TechnicianTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianTypeRateCreateModel _$TechnicianTypeRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeRateCreateModel(
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianTypeRateCreateModelToJson(
        TechnicianTypeRateCreateModel instance) =>
    <String, dynamic>{
      'technicianTypeId': instance.technicianTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

TechnicianTypeRateCreateWithMovieModel
    _$TechnicianTypeRateCreateWithMovieModelFromJson(
            Map<String, dynamic> json) =>
        TechnicianTypeRateCreateWithMovieModel(
          technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
          predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
          rate: (json['rate'] as num?)?.toDouble(),
          predefinedCallSheetTypeId:
              (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$TechnicianTypeRateCreateWithMovieModelToJson(
        TechnicianTypeRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'technicianTypeId': instance.technicianTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

TechnicianTypeRateModel _$TechnicianTypeRateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeRateModel(
      technicianTypeRateId: (json['technicianTypeRateId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      technicianTypeName: json['technicianTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$TechnicianTypeRateModelToJson(
        TechnicianTypeRateModel instance) =>
    <String, dynamic>{
      'technicianTypeRateId': instance.technicianTypeRateId,
      'technicianTypeId': instance.technicianTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'technicianTypeName': instance.technicianTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

TechnicianTypeRateModelReturnListModel
    _$TechnicianTypeRateModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        TechnicianTypeRateModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => TechnicianTypeRateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$TechnicianTypeRateModelReturnListModelToJson(
        TechnicianTypeRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianTypeRateModelReturnModel _$TechnicianTypeRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeRateModelReturnModel(
      model: json['model'] == null
          ? null
          : TechnicianTypeRateModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianTypeRateModelReturnModelToJson(
        TechnicianTypeRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

TechnicianTypeRateUpdateModel _$TechnicianTypeRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeRateUpdateModel(
      technicianTypeRateId: (json['technicianTypeRateId'] as num?)?.toInt(),
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$TechnicianTypeRateUpdateModelToJson(
        TechnicianTypeRateUpdateModel instance) =>
    <String, dynamic>{
      'technicianTypeRateId': instance.technicianTypeRateId,
      'technicianTypeId': instance.technicianTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

TechnicianTypeUpdateModel _$TechnicianTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianTypeUpdateModel(
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      technicianTypeName: json['technicianTypeName'] as String?,
      predefinedTechnicianTypeId:
          (json['predefinedTechnicianTypeId'] as num?)?.toInt(),
      technicianGroupTypeId: (json['technicianGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newTechnicianTypeRates: (json['newTechnicianTypeRates'] as List<dynamic>?)
              ?.map((e) => TechnicianTypeRateCreateModel.fromJson(
                  e as Map<String, dynamic>))
              .toList() ??
          [],
      existingTechnicianTypeRates:
          (json['existingTechnicianTypeRates'] as List<dynamic>?)
                  ?.map((e) => TechnicianTypeRateUpdateModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$TechnicianTypeUpdateModelToJson(
        TechnicianTypeUpdateModel instance) =>
    <String, dynamic>{
      'technicianTypeId': instance.technicianTypeId,
      'technicianTypeName': instance.technicianTypeName,
      'predefinedTechnicianTypeId': instance.predefinedTechnicianTypeId,
      'technicianGroupTypeId': instance.technicianGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newTechnicianTypeRates':
          instance.newTechnicianTypeRates?.map((e) => e.toJson()).toList(),
      'existingTechnicianTypeRates':
          instance.existingTechnicianTypeRates?.map((e) => e.toJson()).toList(),
    };

TechnicianUpdateModel _$TechnicianUpdateModelFromJson(
        Map<String, dynamic> json) =>
    TechnicianUpdateModel(
      technicianId: (json['technicianId'] as num?)?.toInt(),
      technicianCode: json['technicianCode'] as String?,
      technicianFirstName: json['technicianFirstName'] as String?,
      technicianLastName: json['technicianLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      assistantName: json['assistantName'] as String?,
      assistantPhone: json['assistantPhone'] as String?,
      assistantEmail: json['assistantEmail'] as String?,
      technicianTypeId: (json['technicianTypeId'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDisabled: json['isDisabled'] as bool?,
      useDefaultRates: json['useDefaultRates'] as bool?,
      newTechnicianRates: (json['newTechnicianRates'] as List<dynamic>?)
              ?.map((e) =>
                  TechnicianRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingTechnicianRates: (json['existingTechnicianRates']
                  as List<dynamic>?)
              ?.map((e) =>
                  TechnicianRateUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$TechnicianUpdateModelToJson(
        TechnicianUpdateModel instance) =>
    <String, dynamic>{
      'technicianId': instance.technicianId,
      'technicianCode': instance.technicianCode,
      'technicianFirstName': instance.technicianFirstName,
      'technicianLastName': instance.technicianLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'assistantName': instance.assistantName,
      'assistantPhone': instance.assistantPhone,
      'assistantEmail': instance.assistantEmail,
      'technicianTypeId': instance.technicianTypeId,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'position': instance.position,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'companyId': instance.companyId,
      'isDisabled': instance.isDisabled,
      'useDefaultRates': instance.useDefaultRates,
      'newTechnicianRates':
          instance.newTechnicianRates?.map((e) => e.toJson()).toList(),
      'existingTechnicianRates':
          instance.existingTechnicianRates?.map((e) => e.toJson()).toList(),
    };

TextWithValue _$TextWithValueFromJson(Map<String, dynamic> json) =>
    TextWithValue(
      text: json['text'] as String?,
      $value: json['value'] as String?,
      code: json['code'] as String?,
    );

Map<String, dynamic> _$TextWithValueToJson(TextWithValue instance) =>
    <String, dynamic>{
      'text': instance.text,
      'value': instance.$value,
      'code': instance.code,
    };

UpdateMultipleMovieCommitmentTaskStatusWithNoteModel
    _$UpdateMultipleMovieCommitmentTaskStatusWithNoteModelFromJson(
            Map<String, dynamic> json) =>
        UpdateMultipleMovieCommitmentTaskStatusWithNoteModel(
          movieCommitmentTaskIds:
              (json['movieCommitmentTaskIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
          movieCommitmentTaskStatusTypeId:
              (json['movieCommitmentTaskStatusTypeId'] as num?)?.toInt(),
          note: json['note'] as String?,
        );

Map<String, dynamic>
    _$UpdateMultipleMovieCommitmentTaskStatusWithNoteModelToJson(
            UpdateMultipleMovieCommitmentTaskStatusWithNoteModel instance) =>
        <String, dynamic>{
          'movieCommitmentTaskIds': instance.movieCommitmentTaskIds,
          'movieCommitmentTaskStatusTypeId':
              instance.movieCommitmentTaskStatusTypeId,
          'note': instance.note,
        };

UserModel _$UserModelFromJson(Map<String, dynamic> json) => UserModel(
      userId: (json['userId'] as num?)?.toInt(),
      userGuid: json['userGuid'] as String?,
      userName: json['userName'] as String?,
      predefinedUserTypeId: (json['predefinedUserTypeId'] as num?)?.toInt(),
      email: json['email'] as String?,
      firstName: json['firstName'] as String?,
      lastName: json['lastName'] as String?,
      workPhone: json['workPhone'] as String?,
      workPhoneExt: json['workPhoneExt'] as String?,
      cellPhone: json['cellPhone'] as String?,
      active: json['active'] as bool?,
      notificationThroughEmail: json['notificationThroughEmail'] as bool?,
      isAccountLocked: json['isAccountLocked'] as bool?,
      accountLockedUntil: json['accountLockedUntil'] == null
          ? null
          : DateTime.parse(json['accountLockedUntil'] as String),
      canConfigureCompany: json['canConfigureCompany'] as bool?,
      canViewCompany: json['canViewCompany'] as bool?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedUserTypeName: json['predefinedUserTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      existingPermissionTypeIds:
          (json['existingPermissionTypeIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
    );

Map<String, dynamic> _$UserModelToJson(UserModel instance) => <String, dynamic>{
      'userId': instance.userId,
      'userGuid': instance.userGuid,
      'userName': instance.userName,
      'predefinedUserTypeId': instance.predefinedUserTypeId,
      'email': instance.email,
      'firstName': instance.firstName,
      'lastName': instance.lastName,
      'workPhone': instance.workPhone,
      'workPhoneExt': instance.workPhoneExt,
      'cellPhone': instance.cellPhone,
      'active': instance.active,
      'notificationThroughEmail': instance.notificationThroughEmail,
      'isAccountLocked': instance.isAccountLocked,
      'accountLockedUntil': instance.accountLockedUntil?.toIso8601String(),
      'canConfigureCompany': instance.canConfigureCompany,
      'canViewCompany': instance.canViewCompany,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedUserTypeName': instance.predefinedUserTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'existingPermissionTypeIds': instance.existingPermissionTypeIds,
    };

UserModelReturnListModel _$UserModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    UserModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => UserModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$UserModelReturnListModelToJson(
        UserModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

UserModelReturnModel _$UserModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    UserModelReturnModel(
      model: json['model'] == null
          ? null
          : UserModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$UserModelReturnModelToJson(
        UserModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

UserPermissionCreateModel _$UserPermissionCreateModelFromJson(
        Map<String, dynamic> json) =>
    UserPermissionCreateModel(
      userId: (json['userId'] as num?)?.toInt(),
      predefinedUserPermissionTypeId:
          (json['predefinedUserPermissionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$UserPermissionCreateModelToJson(
        UserPermissionCreateModel instance) =>
    <String, dynamic>{
      'userId': instance.userId,
      'predefinedUserPermissionTypeId': instance.predefinedUserPermissionTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

UserPermissionModel _$UserPermissionModelFromJson(Map<String, dynamic> json) =>
    UserPermissionModel(
      userPermissionId: (json['userPermissionId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      predefinedUserPermissionTypeId:
          (json['predefinedUserPermissionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      movieTitle: json['movieTitle'] as String?,
      userName: json['userName'] as String?,
      predefinedUserPermissionTypeName:
          json['predefinedUserPermissionTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$UserPermissionModelToJson(
        UserPermissionModel instance) =>
    <String, dynamic>{
      'userPermissionId': instance.userPermissionId,
      'userId': instance.userId,
      'predefinedUserPermissionTypeId': instance.predefinedUserPermissionTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'movieTitle': instance.movieTitle,
      'userName': instance.userName,
      'predefinedUserPermissionTypeName':
          instance.predefinedUserPermissionTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

UserPermissionModelReturnListModel _$UserPermissionModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    UserPermissionModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  UserPermissionModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$UserPermissionModelReturnListModelToJson(
        UserPermissionModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

UserPermissionModelReturnModel _$UserPermissionModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    UserPermissionModelReturnModel(
      model: json['model'] == null
          ? null
          : UserPermissionModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$UserPermissionModelReturnModelToJson(
        UserPermissionModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

UserPermissionUpdateModel _$UserPermissionUpdateModelFromJson(
        Map<String, dynamic> json) =>
    UserPermissionUpdateModel(
      userPermissionId: (json['userPermissionId'] as num?)?.toInt(),
      userId: (json['userId'] as num?)?.toInt(),
      predefinedUserPermissionTypeId:
          (json['predefinedUserPermissionTypeId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$UserPermissionUpdateModelToJson(
        UserPermissionUpdateModel instance) =>
    <String, dynamic>{
      'userPermissionId': instance.userPermissionId,
      'userId': instance.userId,
      'predefinedUserPermissionTypeId': instance.predefinedUserPermissionTypeId,
      'movieId': instance.movieId,
      'companyId': instance.companyId,
    };

VendorCreateModel _$VendorCreateModelFromJson(Map<String, dynamic> json) =>
    VendorCreateModel(
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      vendorCode: json['vendorCode'] as String?,
      vendorName: json['vendorName'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      contactLastName: json['contactLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      position: (json['position'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      isDisabled: json['isDisabled'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      newVendorRates: (json['newVendorRates'] as List<dynamic>?)
              ?.map((e) =>
                  VendorRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$VendorCreateModelToJson(VendorCreateModel instance) =>
    <String, dynamic>{
      'vendorTypeId': instance.vendorTypeId,
      'vendorCode': instance.vendorCode,
      'vendorName': instance.vendorName,
      'contactFirstName': instance.contactFirstName,
      'contactLastName': instance.contactLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'state': instance.state,
      'country': instance.country,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'isDisabled': instance.isDisabled,
      'companyId': instance.companyId,
      'useDefaultRates': instance.useDefaultRates,
      'newVendorRates':
          instance.newVendorRates?.map((e) => e.toJson()).toList(),
    };

VendorCreateWithMovieModel _$VendorCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    VendorCreateWithMovieModel(
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      vendorCode: json['vendorCode'] as String?,
      vendorName: json['vendorName'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      contactLastName: json['contactLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      position: (json['position'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      isDisabled: json['isDisabled'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      newVendorRates: (json['newVendorRates'] as List<dynamic>?)
              ?.map((e) =>
                  VendorRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorCreateWithMovieModelToJson(
        VendorCreateWithMovieModel instance) =>
    <String, dynamic>{
      'vendorTypeId': instance.vendorTypeId,
      'vendorCode': instance.vendorCode,
      'vendorName': instance.vendorName,
      'contactFirstName': instance.contactFirstName,
      'contactLastName': instance.contactLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'state': instance.state,
      'country': instance.country,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'isDisabled': instance.isDisabled,
      'companyId': instance.companyId,
      'useDefaultRates': instance.useDefaultRates,
      'newVendorRates':
          instance.newVendorRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

VendorGroupTypeCreateModel _$VendorGroupTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    VendorGroupTypeCreateModel(
      vendorGroupTypeName: json['vendorGroupTypeName'] as String?,
      predefinedVendorGroupTypeId:
          (json['predefinedVendorGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorGroupTypeCreateModelToJson(
        VendorGroupTypeCreateModel instance) =>
    <String, dynamic>{
      'vendorGroupTypeName': instance.vendorGroupTypeName,
      'predefinedVendorGroupTypeId': instance.predefinedVendorGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

VendorGroupTypeCreateWithMovieModel
    _$VendorGroupTypeCreateWithMovieModelFromJson(Map<String, dynamic> json) =>
        VendorGroupTypeCreateWithMovieModel(
          vendorGroupTypeName: json['vendorGroupTypeName'] as String?,
          predefinedVendorGroupTypeId:
              (json['predefinedVendorGroupTypeId'] as num?)?.toInt(),
          position: (json['position'] as num?)?.toInt(),
          companyId: (json['companyId'] as num?)?.toInt(),
          movieId: (json['movieId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$VendorGroupTypeCreateWithMovieModelToJson(
        VendorGroupTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'vendorGroupTypeName': instance.vendorGroupTypeName,
      'predefinedVendorGroupTypeId': instance.predefinedVendorGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

VendorGroupTypeModel _$VendorGroupTypeModelFromJson(
        Map<String, dynamic> json) =>
    VendorGroupTypeModel(
      vendorGroupTypeId: (json['vendorGroupTypeId'] as num?)?.toInt(),
      vendorGroupTypeName: json['vendorGroupTypeName'] as String?,
      predefinedVendorGroupTypeId:
          (json['predefinedVendorGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedVendorGroupTypeName:
          json['predefinedVendorGroupTypeName'] as String?,
      enumTypeName: json['enumTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$VendorGroupTypeModelToJson(
        VendorGroupTypeModel instance) =>
    <String, dynamic>{
      'vendorGroupTypeId': instance.vendorGroupTypeId,
      'vendorGroupTypeName': instance.vendorGroupTypeName,
      'predefinedVendorGroupTypeId': instance.predefinedVendorGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedVendorGroupTypeName': instance.predefinedVendorGroupTypeName,
      'enumTypeName': instance.enumTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

VendorGroupTypeModelReturnListModel
    _$VendorGroupTypeModelReturnListModelFromJson(Map<String, dynamic> json) =>
        VendorGroupTypeModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) =>
                      VendorGroupTypeModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$VendorGroupTypeModelReturnListModelToJson(
        VendorGroupTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorGroupTypeModelReturnModel _$VendorGroupTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    VendorGroupTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : VendorGroupTypeModel.fromJson(
              json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorGroupTypeModelReturnModelToJson(
        VendorGroupTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorGroupTypeUpdateModel _$VendorGroupTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    VendorGroupTypeUpdateModel(
      vendorGroupTypeId: (json['vendorGroupTypeId'] as num?)?.toInt(),
      vendorGroupTypeName: json['vendorGroupTypeName'] as String?,
      predefinedVendorGroupTypeId:
          (json['predefinedVendorGroupTypeId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorGroupTypeUpdateModelToJson(
        VendorGroupTypeUpdateModel instance) =>
    <String, dynamic>{
      'vendorGroupTypeId': instance.vendorGroupTypeId,
      'vendorGroupTypeName': instance.vendorGroupTypeName,
      'predefinedVendorGroupTypeId': instance.predefinedVendorGroupTypeId,
      'position': instance.position,
      'companyId': instance.companyId,
    };

VendorModel _$VendorModelFromJson(Map<String, dynamic> json) => VendorModel(
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      vendorCode: json['vendorCode'] as String?,
      vendorName: json['vendorName'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      contactLastName: json['contactLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      position: (json['position'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      isDisabled: json['isDisabled'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      departmentName: json['departmentName'] as String?,
      defaultPreProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPreProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultProductionPredefinedBudgetCategoryTypeId:
          (json['defaultProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPostProductionPredefinedBudgetCategoryTypeId:
          (json['defaultPostProductionPredefinedBudgetCategoryTypeId'] as num?)
              ?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      vendorTypeName: json['vendorTypeName'] as String?,
      companyName: json['companyName'] as String?,
      companyCode: json['companyCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingVendorRates: (json['existingVendorRates'] as List<dynamic>?)
              ?.map((e) => VendorRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$VendorModelToJson(VendorModel instance) =>
    <String, dynamic>{
      'vendorId': instance.vendorId,
      'vendorTypeId': instance.vendorTypeId,
      'vendorCode': instance.vendorCode,
      'vendorName': instance.vendorName,
      'contactFirstName': instance.contactFirstName,
      'contactLastName': instance.contactLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'state': instance.state,
      'country': instance.country,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'isDisabled': instance.isDisabled,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'departmentName': instance.departmentName,
      'defaultPreProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPreProductionPredefinedBudgetCategoryTypeId,
      'defaultProductionPredefinedBudgetCategoryTypeId':
          instance.defaultProductionPredefinedBudgetCategoryTypeId,
      'defaultPostProductionPredefinedBudgetCategoryTypeId':
          instance.defaultPostProductionPredefinedBudgetCategoryTypeId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'vendorTypeName': instance.vendorTypeName,
      'companyName': instance.companyName,
      'companyCode': instance.companyCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingVendorRates':
          instance.existingVendorRates?.map((e) => e.toJson()).toList(),
    };

VendorModelReturnListModel _$VendorModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    VendorModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => VendorModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorModelReturnListModelToJson(
        VendorModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorModelReturnModel _$VendorModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    VendorModelReturnModel(
      model: json['model'] == null
          ? null
          : VendorModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorModelReturnModelToJson(
        VendorModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorRateCreateModel _$VendorRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    VendorRateCreateModel(
      vendorId: (json['vendorId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorRateCreateModelToJson(
        VendorRateCreateModel instance) =>
    <String, dynamic>{
      'vendorId': instance.vendorId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

VendorRateCreateWithMovieModel _$VendorRateCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    VendorRateCreateWithMovieModel(
      vendorId: (json['vendorId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorRateCreateWithMovieModelToJson(
        VendorRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'vendorId': instance.vendorId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

VendorRateModel _$VendorRateModelFromJson(Map<String, dynamic> json) =>
    VendorRateModel(
      vendorRateId: (json['vendorRateId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      companyName: json['companyName'] as String?,
      vendorCode: json['vendorCode'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$VendorRateModelToJson(VendorRateModel instance) =>
    <String, dynamic>{
      'vendorRateId': instance.vendorRateId,
      'vendorId': instance.vendorId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'companyName': instance.companyName,
      'vendorCode': instance.vendorCode,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

VendorRateModelReturnListModel _$VendorRateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    VendorRateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => VendorRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorRateModelReturnListModelToJson(
        VendorRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorRateModelReturnModel _$VendorRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    VendorRateModelReturnModel(
      model: json['model'] == null
          ? null
          : VendorRateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorRateModelReturnModelToJson(
        VendorRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorRateUpdateModel _$VendorRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    VendorRateUpdateModel(
      vendorRateId: (json['vendorRateId'] as num?)?.toInt(),
      vendorId: (json['vendorId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorRateUpdateModelToJson(
        VendorRateUpdateModel instance) =>
    <String, dynamic>{
      'vendorRateId': instance.vendorRateId,
      'vendorId': instance.vendorId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

VendorTypeCreateModel _$VendorTypeCreateModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeCreateModel(
      vendorTypeName: json['vendorTypeName'] as String?,
      predefinedVendorTypeId: (json['predefinedVendorTypeId'] as num?)?.toInt(),
      vendorGroupTypeId: (json['vendorGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newVendorTypeRates: (json['newVendorTypeRates'] as List<dynamic>?)
              ?.map((e) =>
                  VendorTypeRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$VendorTypeCreateModelToJson(
        VendorTypeCreateModel instance) =>
    <String, dynamic>{
      'vendorTypeName': instance.vendorTypeName,
      'predefinedVendorTypeId': instance.predefinedVendorTypeId,
      'vendorGroupTypeId': instance.vendorGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newVendorTypeRates':
          instance.newVendorTypeRates?.map((e) => e.toJson()).toList(),
    };

VendorTypeCreateWithMovieModel _$VendorTypeCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeCreateWithMovieModel(
      vendorTypeName: json['vendorTypeName'] as String?,
      predefinedVendorTypeId: (json['predefinedVendorTypeId'] as num?)?.toInt(),
      vendorGroupTypeId: (json['vendorGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newVendorTypeRates: (json['newVendorTypeRates'] as List<dynamic>?)
              ?.map((e) =>
                  VendorTypeRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorTypeCreateWithMovieModelToJson(
        VendorTypeCreateWithMovieModel instance) =>
    <String, dynamic>{
      'vendorTypeName': instance.vendorTypeName,
      'predefinedVendorTypeId': instance.predefinedVendorTypeId,
      'vendorGroupTypeId': instance.vendorGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newVendorTypeRates':
          instance.newVendorTypeRates?.map((e) => e.toJson()).toList(),
      'movieId': instance.movieId,
    };

VendorTypeModel _$VendorTypeModelFromJson(Map<String, dynamic> json) =>
    VendorTypeModel(
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      vendorTypeName: json['vendorTypeName'] as String?,
      predefinedVendorTypeId: (json['predefinedVendorTypeId'] as num?)?.toInt(),
      vendorGroupTypeId: (json['vendorGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryName:
          json['defaultPreProductionBudgetCategoryName'] as String?,
      defaultProductionBudgetCategoryName:
          json['defaultProductionBudgetCategoryName'] as String?,
      defaultPostProductionBudgetCategoryName:
          json['defaultPostProductionBudgetCategoryName'] as String?,
      vendorGroupTypeName: json['vendorGroupTypeName'] as String?,
      predefinedVendorTypeName: json['predefinedVendorTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
      existingVendorTypeRates:
          (json['existingVendorTypeRates'] as List<dynamic>?)
                  ?.map((e) =>
                      VendorTypeRateModel.fromJson(e as Map<String, dynamic>))
                  .toList() ??
              [],
    );

Map<String, dynamic> _$VendorTypeModelToJson(VendorTypeModel instance) =>
    <String, dynamic>{
      'vendorTypeId': instance.vendorTypeId,
      'vendorTypeName': instance.vendorTypeName,
      'predefinedVendorTypeId': instance.predefinedVendorTypeId,
      'vendorGroupTypeId': instance.vendorGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'defaultPreProductionBudgetCategoryName':
          instance.defaultPreProductionBudgetCategoryName,
      'defaultProductionBudgetCategoryName':
          instance.defaultProductionBudgetCategoryName,
      'defaultPostProductionBudgetCategoryName':
          instance.defaultPostProductionBudgetCategoryName,
      'vendorGroupTypeName': instance.vendorGroupTypeName,
      'predefinedVendorTypeName': instance.predefinedVendorTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
      'existingVendorTypeRates':
          instance.existingVendorTypeRates?.map((e) => e.toJson()).toList(),
    };

VendorTypeModelReturnListModel _$VendorTypeModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) => VendorTypeModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorTypeModelReturnListModelToJson(
        VendorTypeModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorTypeModelReturnModel _$VendorTypeModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeModelReturnModel(
      model: json['model'] == null
          ? null
          : VendorTypeModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorTypeModelReturnModelToJson(
        VendorTypeModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorTypeRateCreateModel _$VendorTypeRateCreateModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeRateCreateModel(
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorTypeRateCreateModelToJson(
        VendorTypeRateCreateModel instance) =>
    <String, dynamic>{
      'vendorTypeId': instance.vendorTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

VendorTypeRateCreateWithMovieModel _$VendorTypeRateCreateWithMovieModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeRateCreateWithMovieModel(
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      movieId: (json['movieId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorTypeRateCreateWithMovieModelToJson(
        VendorTypeRateCreateWithMovieModel instance) =>
    <String, dynamic>{
      'vendorTypeId': instance.vendorTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'movieId': instance.movieId,
    };

VendorTypeRateModel _$VendorTypeRateModelFromJson(Map<String, dynamic> json) =>
    VendorTypeRateModel(
      vendorTypeRateId: (json['vendorTypeRateId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      predefinedRateTypeName: json['predefinedRateTypeName'] as String?,
      predefinedCallSheetTypeName:
          json['predefinedCallSheetTypeName'] as String?,
      vendorTypeName: json['vendorTypeName'] as String?,
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$VendorTypeRateModelToJson(
        VendorTypeRateModel instance) =>
    <String, dynamic>{
      'vendorTypeRateId': instance.vendorTypeRateId,
      'vendorTypeId': instance.vendorTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'predefinedRateTypeName': instance.predefinedRateTypeName,
      'predefinedCallSheetTypeName': instance.predefinedCallSheetTypeName,
      'vendorTypeName': instance.vendorTypeName,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

VendorTypeRateModelReturnListModel _$VendorTypeRateModelReturnListModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeRateModelReturnListModel(
      model: (json['model'] as List<dynamic>?)
              ?.map((e) =>
                  VendorTypeRateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      search: json['search'] == null
          ? null
          : BaseSearchCriteria.fromJson(json['search'] as Map<String, dynamic>),
      totalRecords: (json['totalRecords'] as num?)?.toInt(),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorTypeRateModelReturnListModelToJson(
        VendorTypeRateModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorTypeRateModelReturnModel _$VendorTypeRateModelReturnModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeRateModelReturnModel(
      model: json['model'] == null
          ? null
          : VendorTypeRateModel.fromJson(json['model'] as Map<String, dynamic>),
      isSuccess: json['isSuccess'] as bool?,
      successMessage: json['successMessage'] as String?,
      errorHolder: json['errorHolder'] == null
          ? null
          : ReturnError.fromJson(json['errorHolder'] as Map<String, dynamic>),
      activityId: json['activityId'] as String?,
      activityDateTime: json['activityDateTime'] == null
          ? null
          : DateTime.parse(json['activityDateTime'] as String),
      server: json['server'] as String?,
      processId: (json['processId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorTypeRateModelReturnModelToJson(
        VendorTypeRateModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VendorTypeRateUpdateModel _$VendorTypeRateUpdateModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeRateUpdateModel(
      vendorTypeRateId: (json['vendorTypeRateId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      predefinedRateTypeId: (json['predefinedRateTypeId'] as num?)?.toInt(),
      rate: (json['rate'] as num?)?.toDouble(),
      predefinedCallSheetTypeId:
          (json['predefinedCallSheetTypeId'] as num?)?.toInt(),
      companyId: (json['companyId'] as num?)?.toInt(),
    );

Map<String, dynamic> _$VendorTypeRateUpdateModelToJson(
        VendorTypeRateUpdateModel instance) =>
    <String, dynamic>{
      'vendorTypeRateId': instance.vendorTypeRateId,
      'vendorTypeId': instance.vendorTypeId,
      'predefinedRateTypeId': instance.predefinedRateTypeId,
      'rate': instance.rate,
      'predefinedCallSheetTypeId': instance.predefinedCallSheetTypeId,
      'companyId': instance.companyId,
    };

VendorTypeUpdateModel _$VendorTypeUpdateModelFromJson(
        Map<String, dynamic> json) =>
    VendorTypeUpdateModel(
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      vendorTypeName: json['vendorTypeName'] as String?,
      predefinedVendorTypeId: (json['predefinedVendorTypeId'] as num?)?.toInt(),
      vendorGroupTypeId: (json['vendorGroupTypeId'] as num?)?.toInt(),
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      position: (json['position'] as num?)?.toInt(),
      canHaveAdditionalCount: json['canHaveAdditionalCount'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      newVendorTypeRates: (json['newVendorTypeRates'] as List<dynamic>?)
              ?.map((e) =>
                  VendorTypeRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingVendorTypeRates: (json['existingVendorTypeRates']
                  as List<dynamic>?)
              ?.map((e) =>
                  VendorTypeRateUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$VendorTypeUpdateModelToJson(
        VendorTypeUpdateModel instance) =>
    <String, dynamic>{
      'vendorTypeId': instance.vendorTypeId,
      'vendorTypeName': instance.vendorTypeName,
      'predefinedVendorTypeId': instance.predefinedVendorTypeId,
      'vendorGroupTypeId': instance.vendorGroupTypeId,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'position': instance.position,
      'canHaveAdditionalCount': instance.canHaveAdditionalCount,
      'companyId': instance.companyId,
      'newVendorTypeRates':
          instance.newVendorTypeRates?.map((e) => e.toJson()).toList(),
      'existingVendorTypeRates':
          instance.existingVendorTypeRates?.map((e) => e.toJson()).toList(),
    };

VendorUpdateModel _$VendorUpdateModelFromJson(Map<String, dynamic> json) =>
    VendorUpdateModel(
      vendorId: (json['vendorId'] as num?)?.toInt(),
      vendorTypeId: (json['vendorTypeId'] as num?)?.toInt(),
      vendorCode: json['vendorCode'] as String?,
      vendorName: json['vendorName'] as String?,
      contactFirstName: json['contactFirstName'] as String?,
      contactLastName: json['contactLastName'] as String?,
      workPhone: json['workPhone'] as String?,
      cellPhone: json['cellPhone'] as String?,
      email: json['email'] as String?,
      address1: json['address1'] as String?,
      address2: json['address2'] as String?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      position: (json['position'] as num?)?.toInt(),
      profileImageLocation: json['profileImageLocation'] as String?,
      profileImageActualFileName: json['profileImageActualFileName'] as String?,
      defaultPreProductionBudgetCategoryId:
          (json['defaultPreProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultProductionBudgetCategoryId:
          (json['defaultProductionBudgetCategoryId'] as num?)?.toInt(),
      defaultPostProductionBudgetCategoryId:
          (json['defaultPostProductionBudgetCategoryId'] as num?)?.toInt(),
      departmentId: (json['departmentId'] as num?)?.toInt(),
      doNotIncludeInCallSheet: json['doNotIncludeInCallSheet'] as bool?,
      isDisabled: json['isDisabled'] as bool?,
      companyId: (json['companyId'] as num?)?.toInt(),
      useDefaultRates: json['useDefaultRates'] as bool?,
      newVendorRates: (json['newVendorRates'] as List<dynamic>?)
              ?.map((e) =>
                  VendorRateCreateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
      existingVendorRates: (json['existingVendorRates'] as List<dynamic>?)
              ?.map((e) =>
                  VendorRateUpdateModel.fromJson(e as Map<String, dynamic>))
              .toList() ??
          [],
    );

Map<String, dynamic> _$VendorUpdateModelToJson(VendorUpdateModel instance) =>
    <String, dynamic>{
      'vendorId': instance.vendorId,
      'vendorTypeId': instance.vendorTypeId,
      'vendorCode': instance.vendorCode,
      'vendorName': instance.vendorName,
      'contactFirstName': instance.contactFirstName,
      'contactLastName': instance.contactLastName,
      'workPhone': instance.workPhone,
      'cellPhone': instance.cellPhone,
      'email': instance.email,
      'address1': instance.address1,
      'address2': instance.address2,
      'city': instance.city,
      'state': instance.state,
      'country': instance.country,
      'position': instance.position,
      'profileImageLocation': instance.profileImageLocation,
      'profileImageActualFileName': instance.profileImageActualFileName,
      'defaultPreProductionBudgetCategoryId':
          instance.defaultPreProductionBudgetCategoryId,
      'defaultProductionBudgetCategoryId':
          instance.defaultProductionBudgetCategoryId,
      'defaultPostProductionBudgetCategoryId':
          instance.defaultPostProductionBudgetCategoryId,
      'departmentId': instance.departmentId,
      'doNotIncludeInCallSheet': instance.doNotIncludeInCallSheet,
      'isDisabled': instance.isDisabled,
      'companyId': instance.companyId,
      'useDefaultRates': instance.useDefaultRates,
      'newVendorRates':
          instance.newVendorRates?.map((e) => e.toJson()).toList(),
      'existingVendorRates':
          instance.existingVendorRates?.map((e) => e.toJson()).toList(),
    };

VoiceNotificationServerCreateModel _$VoiceNotificationServerCreateModelFromJson(
        Map<String, dynamic> json) =>
    VoiceNotificationServerCreateModel(
      voiceNotificationServerCode:
          json['voiceNotificationServerCode'] as String?,
      voiceNotificationServerName:
          json['voiceNotificationServerName'] as String?,
      predefinedSmsAndVoiceServerTypeId:
          (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
      twilioAccountSid: json['twilioAccountSid'] as String?,
      twilioAccountAuthToken: json['twilioAccountAuthToken'] as String?,
      twilioAccountPhoneNumber: json['twilioAccountPhoneNumber'] as String?,
      isEnabled: json['isEnabled'] as bool?,
    );

Map<String, dynamic> _$VoiceNotificationServerCreateModelToJson(
        VoiceNotificationServerCreateModel instance) =>
    <String, dynamic>{
      'voiceNotificationServerCode': instance.voiceNotificationServerCode,
      'voiceNotificationServerName': instance.voiceNotificationServerName,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'twilioAccountSid': instance.twilioAccountSid,
      'twilioAccountAuthToken': instance.twilioAccountAuthToken,
      'twilioAccountPhoneNumber': instance.twilioAccountPhoneNumber,
      'isEnabled': instance.isEnabled,
    };

VoiceNotificationServerModel _$VoiceNotificationServerModelFromJson(
        Map<String, dynamic> json) =>
    VoiceNotificationServerModel(
      voiceNotificationServerId:
          (json['voiceNotificationServerId'] as num?)?.toInt(),
      voiceNotificationServerCode:
          json['voiceNotificationServerCode'] as String?,
      voiceNotificationServerName:
          json['voiceNotificationServerName'] as String?,
      predefinedSmsAndVoiceServerTypeId:
          (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
      twilioAccountSid: json['twilioAccountSid'] as String?,
      twilioAccountAuthToken: json['twilioAccountAuthToken'] as String?,
      twilioAccountPhoneNumber: json['twilioAccountPhoneNumber'] as String?,
      isEnabled: json['isEnabled'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      enumTypeName: json['enumTypeName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$VoiceNotificationServerModelToJson(
        VoiceNotificationServerModel instance) =>
    <String, dynamic>{
      'voiceNotificationServerId': instance.voiceNotificationServerId,
      'voiceNotificationServerCode': instance.voiceNotificationServerCode,
      'voiceNotificationServerName': instance.voiceNotificationServerName,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'twilioAccountSid': instance.twilioAccountSid,
      'twilioAccountAuthToken': instance.twilioAccountAuthToken,
      'twilioAccountPhoneNumber': instance.twilioAccountPhoneNumber,
      'isEnabled': instance.isEnabled,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'enumTypeName': instance.enumTypeName,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

VoiceNotificationServerModelReturnListModel
    _$VoiceNotificationServerModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        VoiceNotificationServerModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => VoiceNotificationServerModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$VoiceNotificationServerModelReturnListModelToJson(
        VoiceNotificationServerModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VoiceNotificationServerModelReturnModel
    _$VoiceNotificationServerModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        VoiceNotificationServerModelReturnModel(
          model: json['model'] == null
              ? null
              : VoiceNotificationServerModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$VoiceNotificationServerModelReturnModelToJson(
        VoiceNotificationServerModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

VoiceNotificationServerUpdateModel _$VoiceNotificationServerUpdateModelFromJson(
        Map<String, dynamic> json) =>
    VoiceNotificationServerUpdateModel(
      voiceNotificationServerId:
          (json['voiceNotificationServerId'] as num?)?.toInt(),
      voiceNotificationServerCode:
          json['voiceNotificationServerCode'] as String?,
      voiceNotificationServerName:
          json['voiceNotificationServerName'] as String?,
      predefinedSmsAndVoiceServerTypeId:
          (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
      twilioAccountSid: json['twilioAccountSid'] as String?,
      twilioAccountAuthToken: json['twilioAccountAuthToken'] as String?,
      twilioAccountPhoneNumber: json['twilioAccountPhoneNumber'] as String?,
      isEnabled: json['isEnabled'] as bool?,
    );

Map<String, dynamic> _$VoiceNotificationServerUpdateModelToJson(
        VoiceNotificationServerUpdateModel instance) =>
    <String, dynamic>{
      'voiceNotificationServerId': instance.voiceNotificationServerId,
      'voiceNotificationServerCode': instance.voiceNotificationServerCode,
      'voiceNotificationServerName': instance.voiceNotificationServerName,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'twilioAccountSid': instance.twilioAccountSid,
      'twilioAccountAuthToken': instance.twilioAccountAuthToken,
      'twilioAccountPhoneNumber': instance.twilioAccountPhoneNumber,
      'isEnabled': instance.isEnabled,
    };

WhatsAppNotificationServerCreateModel
    _$WhatsAppNotificationServerCreateModelFromJson(
            Map<String, dynamic> json) =>
        WhatsAppNotificationServerCreateModel(
          whatsAppNotificationServerCode:
              json['whatsAppNotificationServerCode'] as String?,
          whatsAppNotificationServerName:
              json['whatsAppNotificationServerName'] as String?,
          predefinedSmsAndVoiceServerTypeId:
              (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
          apiKey: json['apiKey'] as String?,
          apiSecret: json['apiSecret'] as String?,
          accessToken: json['accessToken'] as String?,
          versionNumber: json['versionNumber'] as String?,
          phoneNumberId: json['phoneNumberId'] as String?,
          businessAccountId: json['businessAccountId'] as String?,
          senderPhoneNumber: json['senderPhoneNumber'] as String?,
          isEnabled: json['isEnabled'] as bool?,
        );

Map<String, dynamic> _$WhatsAppNotificationServerCreateModelToJson(
        WhatsAppNotificationServerCreateModel instance) =>
    <String, dynamic>{
      'whatsAppNotificationServerCode': instance.whatsAppNotificationServerCode,
      'whatsAppNotificationServerName': instance.whatsAppNotificationServerName,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'apiKey': instance.apiKey,
      'apiSecret': instance.apiSecret,
      'accessToken': instance.accessToken,
      'versionNumber': instance.versionNumber,
      'phoneNumberId': instance.phoneNumberId,
      'businessAccountId': instance.businessAccountId,
      'senderPhoneNumber': instance.senderPhoneNumber,
      'isEnabled': instance.isEnabled,
    };

WhatsAppNotificationServerModel _$WhatsAppNotificationServerModelFromJson(
        Map<String, dynamic> json) =>
    WhatsAppNotificationServerModel(
      whatsAppNotificationServerId:
          (json['whatsAppNotificationServerId'] as num?)?.toInt(),
      whatsAppNotificationServerCode:
          json['whatsAppNotificationServerCode'] as String?,
      whatsAppNotificationServerName:
          json['whatsAppNotificationServerName'] as String?,
      predefinedSmsAndVoiceServerTypeId:
          (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
      apiKey: json['apiKey'] as String?,
      apiSecret: json['apiSecret'] as String?,
      accessToken: json['accessToken'] as String?,
      versionNumber: json['versionNumber'] as String?,
      phoneNumberId: json['phoneNumberId'] as String?,
      businessAccountId: json['businessAccountId'] as String?,
      senderPhoneNumber: json['senderPhoneNumber'] as String?,
      isEnabled: json['isEnabled'] as bool?,
      isDeleted: json['isDeleted'] as bool?,
      createdDate: json['createdDate'] == null
          ? null
          : DateTime.parse(json['createdDate'] as String),
      createdByUserId: (json['createdByUserId'] as num?)?.toInt(),
      modifiedDate: json['modifiedDate'] == null
          ? null
          : DateTime.parse(json['modifiedDate'] as String),
      modifiedByUserId: (json['modifiedByUserId'] as num?)?.toInt(),
      enumTypeName: json['enumTypeName'] as String?,
      phoneNumberName: json['phoneNumberName'] as String?,
      businessAccountName: json['businessAccountName'] as String?,
      companyId: (json['companyId'] as num?)?.toInt(),
      companyName: json['companyName'] as String?,
      createdByUserFirstName: json['createdByUserFirstName'] as String?,
      createdByUserLastName: json['createdByUserLastName'] as String?,
      createdByUserEmail: json['createdByUserEmail'] as String?,
      modifiedByUserFirstName: json['modifiedByUserFirstName'] as String?,
      modifiedByUserLastName: json['modifiedByUserLastName'] as String?,
      modifiedByUserEmail: json['modifiedByUserEmail'] as String?,
      createdBy: json['createdBy'] as String?,
      modifiedBy: json['modifiedBy'] as String?,
    );

Map<String, dynamic> _$WhatsAppNotificationServerModelToJson(
        WhatsAppNotificationServerModel instance) =>
    <String, dynamic>{
      'whatsAppNotificationServerId': instance.whatsAppNotificationServerId,
      'whatsAppNotificationServerCode': instance.whatsAppNotificationServerCode,
      'whatsAppNotificationServerName': instance.whatsAppNotificationServerName,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'apiKey': instance.apiKey,
      'apiSecret': instance.apiSecret,
      'accessToken': instance.accessToken,
      'versionNumber': instance.versionNumber,
      'phoneNumberId': instance.phoneNumberId,
      'businessAccountId': instance.businessAccountId,
      'senderPhoneNumber': instance.senderPhoneNumber,
      'isEnabled': instance.isEnabled,
      'isDeleted': instance.isDeleted,
      'createdDate': instance.createdDate?.toIso8601String(),
      'createdByUserId': instance.createdByUserId,
      'modifiedDate': instance.modifiedDate?.toIso8601String(),
      'modifiedByUserId': instance.modifiedByUserId,
      'enumTypeName': instance.enumTypeName,
      'phoneNumberName': instance.phoneNumberName,
      'businessAccountName': instance.businessAccountName,
      'companyId': instance.companyId,
      'companyName': instance.companyName,
      'createdByUserFirstName': instance.createdByUserFirstName,
      'createdByUserLastName': instance.createdByUserLastName,
      'createdByUserEmail': instance.createdByUserEmail,
      'modifiedByUserFirstName': instance.modifiedByUserFirstName,
      'modifiedByUserLastName': instance.modifiedByUserLastName,
      'modifiedByUserEmail': instance.modifiedByUserEmail,
      'createdBy': instance.createdBy,
      'modifiedBy': instance.modifiedBy,
    };

WhatsAppNotificationServerModelReturnListModel
    _$WhatsAppNotificationServerModelReturnListModelFromJson(
            Map<String, dynamic> json) =>
        WhatsAppNotificationServerModelReturnListModel(
          model: (json['model'] as List<dynamic>?)
                  ?.map((e) => WhatsAppNotificationServerModel.fromJson(
                      e as Map<String, dynamic>))
                  .toList() ??
              [],
          search: json['search'] == null
              ? null
              : BaseSearchCriteria.fromJson(
                  json['search'] as Map<String, dynamic>),
          totalRecords: (json['totalRecords'] as num?)?.toInt(),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$WhatsAppNotificationServerModelReturnListModelToJson(
        WhatsAppNotificationServerModelReturnListModel instance) =>
    <String, dynamic>{
      'model': instance.model?.map((e) => e.toJson()).toList(),
      'search': instance.search?.toJson(),
      'totalRecords': instance.totalRecords,
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

WhatsAppNotificationServerModelReturnModel
    _$WhatsAppNotificationServerModelReturnModelFromJson(
            Map<String, dynamic> json) =>
        WhatsAppNotificationServerModelReturnModel(
          model: json['model'] == null
              ? null
              : WhatsAppNotificationServerModel.fromJson(
                  json['model'] as Map<String, dynamic>),
          isSuccess: json['isSuccess'] as bool?,
          successMessage: json['successMessage'] as String?,
          errorHolder: json['errorHolder'] == null
              ? null
              : ReturnError.fromJson(
                  json['errorHolder'] as Map<String, dynamic>),
          activityId: json['activityId'] as String?,
          activityDateTime: json['activityDateTime'] == null
              ? null
              : DateTime.parse(json['activityDateTime'] as String),
          server: json['server'] as String?,
          processId: (json['processId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$WhatsAppNotificationServerModelReturnModelToJson(
        WhatsAppNotificationServerModelReturnModel instance) =>
    <String, dynamic>{
      'model': instance.model?.toJson(),
      'isSuccess': instance.isSuccess,
      'successMessage': instance.successMessage,
      'errorHolder': instance.errorHolder?.toJson(),
      'activityId': instance.activityId,
      'activityDateTime': instance.activityDateTime?.toIso8601String(),
      'server': instance.server,
      'processId': instance.processId,
    };

WhatsAppNotificationServerUpdateModel
    _$WhatsAppNotificationServerUpdateModelFromJson(
            Map<String, dynamic> json) =>
        WhatsAppNotificationServerUpdateModel(
          whatsAppNotificationServerId:
              (json['whatsAppNotificationServerId'] as num?)?.toInt(),
          whatsAppNotificationServerCode:
              json['whatsAppNotificationServerCode'] as String?,
          whatsAppNotificationServerName:
              json['whatsAppNotificationServerName'] as String?,
          predefinedSmsAndVoiceServerTypeId:
              (json['predefinedSmsAndVoiceServerTypeId'] as num?)?.toInt(),
          apiKey: json['apiKey'] as String?,
          apiSecret: json['apiSecret'] as String?,
          accessToken: json['accessToken'] as String?,
          versionNumber: json['versionNumber'] as String?,
          phoneNumberId: json['phoneNumberId'] as String?,
          businessAccountId: json['businessAccountId'] as String?,
          senderPhoneNumber: json['senderPhoneNumber'] as String?,
          isEnabled: json['isEnabled'] as bool?,
        );

Map<String, dynamic> _$WhatsAppNotificationServerUpdateModelToJson(
        WhatsAppNotificationServerUpdateModel instance) =>
    <String, dynamic>{
      'whatsAppNotificationServerId': instance.whatsAppNotificationServerId,
      'whatsAppNotificationServerCode': instance.whatsAppNotificationServerCode,
      'whatsAppNotificationServerName': instance.whatsAppNotificationServerName,
      'predefinedSmsAndVoiceServerTypeId':
          instance.predefinedSmsAndVoiceServerTypeId,
      'apiKey': instance.apiKey,
      'apiSecret': instance.apiSecret,
      'accessToken': instance.accessToken,
      'versionNumber': instance.versionNumber,
      'phoneNumberId': instance.phoneNumberId,
      'businessAccountId': instance.businessAccountId,
      'senderPhoneNumber': instance.senderPhoneNumber,
      'isEnabled': instance.isEnabled,
    };

ApiV1CompanyUploadcompanypicturePost$RequestBody
    _$ApiV1CompanyUploadcompanypicturePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploadcompanypicturePost$RequestBody(
          companyId: (json['CompanyId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1CompanyUploadcompanypicturePost$RequestBodyToJson(
        ApiV1CompanyUploadcompanypicturePost$RequestBody instance) =>
    <String, dynamic>{
      'CompanyId': instance.companyId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1CompanyCreatecompanyPost$RequestBody
    _$ApiV1CompanyCreatecompanyPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyCreatecompanyPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          createDummyData: json['CreateDummyData'] as bool?,
          createExtendedDummyData: json['CreateExtendedDummyData'] as bool?,
          initialPassword: json['InitialPassword'] as String?,
          companyCode: json['CompanyCode'] as String?,
          companyName: json['CompanyName'] as String?,
          subdomain: json['Subdomain'] as String?,
          predefinedCompanyTypeId:
              (json['PredefinedCompanyTypeId'] as num?)?.toInt(),
          addedDateTime: json['AddedDateTime'] == null
              ? null
              : DateTime.parse(json['AddedDateTime'] as String),
          email: json['Email'] as String?,
          contactFirstName: json['ContactFirstName'] as String?,
          website: json['Website'] as String?,
          contactLastName: json['ContactLastName'] as String?,
          workPhone: json['WorkPhone'] as String?,
          workPhoneExt: json['WorkPhoneExt'] as String?,
          cellPhone: json['CellPhone'] as String?,
          active: json['Active'] as bool?,
          address1: json['Address1'] as String?,
          address2: json['Address2'] as String?,
          city: json['City'] as String?,
          stateId: (json['StateId'] as num?)?.toInt(),
          countryId: (json['CountryId'] as num?)?.toInt(),
          mailServerId: (json['MailServerId'] as num?)?.toInt(),
          smsServerId: (json['SmsServerId'] as num?)?.toInt(),
          singleSignOnServerId: (json['SingleSignOnServerId'] as num?)?.toInt(),
          whatsAppNotificationServerId:
              (json['WhatsAppNotificationServerId'] as num?)?.toInt(),
          voiceNotificationServerId:
              (json['VoiceNotificationServerId'] as num?)?.toInt(),
          pushNotificationServerId:
              (json['PushNotificationServerId'] as num?)?.toInt(),
          profileImageLocation: json['ProfileImageLocation'] as String?,
          profileImageActualFileName:
              json['ProfileImageActualFileName'] as String?,
          predefinedCurrencyTypeId:
              (json['PredefinedCurrencyTypeId'] as num?)?.toInt(),
          useDigitalSignature: json['UseDigitalSignature'] as bool?,
          digitalSignatureServerId:
              (json['DigitalSignatureServerId'] as num?)?.toInt(),
          useSms: json['UseSms'] as bool?,
          useWhatsAppNotification: json['UseWhatsAppNotification'] as bool?,
          usePushNotification: json['UsePushNotification'] as bool?,
          useVoiceNotification: json['UseVoiceNotification'] as bool?,
          useMailNotification: json['UseMailNotification'] as bool?,
          numberOfPushNotificationsAllowed:
              (json['NumberOfPushNotificationsAllowed'] as num?)?.toInt(),
          numberOfSmsNotificationsAllowed:
              (json['NumberOfSmsNotificationsAllowed'] as num?)?.toInt(),
          numberOfWhatsAppNotificationsAllowed:
              (json['NumberOfWhatsAppNotificationsAllowed'] as num?)?.toInt(),
          numberOfVoiceNotificationsAllowed:
              (json['NumberOfVoiceNotificationsAllowed'] as num?)?.toInt(),
          numberOfMailNotificationsUsed:
              (json['NumberOfMailNotificationsUsed'] as num?)?.toInt(),
          numberOfPushNotificationsUsed:
              (json['NumberOfPushNotificationsUsed'] as num?)?.toInt(),
          numberOfSmsNotificationsUsed:
              (json['NumberOfSmsNotificationsUsed'] as num?)?.toInt(),
          numberOfWhatsAppNotificationsUsed:
              (json['NumberOfWhatsAppNotificationsUsed'] as num?)?.toInt(),
          numberOfVoiceNotificationsUsed:
              (json['NumberOfVoiceNotificationsUsed'] as num?)?.toInt(),
          numberOfMailNotificationsAllowed:
              (json['NumberOfMailNotificationsAllowed'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1CompanyCreatecompanyPost$RequestBodyToJson(
        ApiV1CompanyCreatecompanyPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CreateDummyData': instance.createDummyData,
      'CreateExtendedDummyData': instance.createExtendedDummyData,
      'InitialPassword': instance.initialPassword,
      'CompanyCode': instance.companyCode,
      'CompanyName': instance.companyName,
      'Subdomain': instance.subdomain,
      'PredefinedCompanyTypeId': instance.predefinedCompanyTypeId,
      'AddedDateTime': instance.addedDateTime?.toIso8601String(),
      'Email': instance.email,
      'ContactFirstName': instance.contactFirstName,
      'Website': instance.website,
      'ContactLastName': instance.contactLastName,
      'WorkPhone': instance.workPhone,
      'WorkPhoneExt': instance.workPhoneExt,
      'CellPhone': instance.cellPhone,
      'Active': instance.active,
      'Address1': instance.address1,
      'Address2': instance.address2,
      'City': instance.city,
      'StateId': instance.stateId,
      'CountryId': instance.countryId,
      'MailServerId': instance.mailServerId,
      'SmsServerId': instance.smsServerId,
      'SingleSignOnServerId': instance.singleSignOnServerId,
      'WhatsAppNotificationServerId': instance.whatsAppNotificationServerId,
      'VoiceNotificationServerId': instance.voiceNotificationServerId,
      'PushNotificationServerId': instance.pushNotificationServerId,
      'ProfileImageLocation': instance.profileImageLocation,
      'ProfileImageActualFileName': instance.profileImageActualFileName,
      'PredefinedCurrencyTypeId': instance.predefinedCurrencyTypeId,
      'UseDigitalSignature': instance.useDigitalSignature,
      'DigitalSignatureServerId': instance.digitalSignatureServerId,
      'UseSms': instance.useSms,
      'UseWhatsAppNotification': instance.useWhatsAppNotification,
      'UsePushNotification': instance.usePushNotification,
      'UseVoiceNotification': instance.useVoiceNotification,
      'UseMailNotification': instance.useMailNotification,
      'NumberOfPushNotificationsAllowed':
          instance.numberOfPushNotificationsAllowed,
      'NumberOfSmsNotificationsAllowed':
          instance.numberOfSmsNotificationsAllowed,
      'NumberOfWhatsAppNotificationsAllowed':
          instance.numberOfWhatsAppNotificationsAllowed,
      'NumberOfVoiceNotificationsAllowed':
          instance.numberOfVoiceNotificationsAllowed,
      'NumberOfMailNotificationsUsed': instance.numberOfMailNotificationsUsed,
      'NumberOfPushNotificationsUsed': instance.numberOfPushNotificationsUsed,
      'NumberOfSmsNotificationsUsed': instance.numberOfSmsNotificationsUsed,
      'NumberOfWhatsAppNotificationsUsed':
          instance.numberOfWhatsAppNotificationsUsed,
      'NumberOfVoiceNotificationsUsed': instance.numberOfVoiceNotificationsUsed,
      'NumberOfMailNotificationsAllowed':
          instance.numberOfMailNotificationsAllowed,
    };

ApiV1CompanyUpdatecompanyPost$RequestBody
    _$ApiV1CompanyUpdatecompanyPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUpdatecompanyPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
          companyCode: json['CompanyCode'] as String?,
          companyName: json['CompanyName'] as String?,
          subdomain: json['Subdomain'] as String?,
          predefinedCompanyTypeId:
              (json['PredefinedCompanyTypeId'] as num?)?.toInt(),
          addedDateTime: json['AddedDateTime'] == null
              ? null
              : DateTime.parse(json['AddedDateTime'] as String),
          email: json['Email'] as String?,
          contactFirstName: json['ContactFirstName'] as String?,
          website: json['Website'] as String?,
          contactLastName: json['ContactLastName'] as String?,
          workPhone: json['WorkPhone'] as String?,
          workPhoneExt: json['WorkPhoneExt'] as String?,
          cellPhone: json['CellPhone'] as String?,
          active: json['Active'] as bool?,
          address1: json['Address1'] as String?,
          address2: json['Address2'] as String?,
          city: json['City'] as String?,
          stateId: (json['StateId'] as num?)?.toInt(),
          countryId: (json['CountryId'] as num?)?.toInt(),
          mailServerId: (json['MailServerId'] as num?)?.toInt(),
          smsServerId: (json['SmsServerId'] as num?)?.toInt(),
          singleSignOnServerId: (json['SingleSignOnServerId'] as num?)?.toInt(),
          whatsAppNotificationServerId:
              (json['WhatsAppNotificationServerId'] as num?)?.toInt(),
          voiceNotificationServerId:
              (json['VoiceNotificationServerId'] as num?)?.toInt(),
          pushNotificationServerId:
              (json['PushNotificationServerId'] as num?)?.toInt(),
          profileImageLocation: json['ProfileImageLocation'] as String?,
          profileImageActualFileName:
              json['ProfileImageActualFileName'] as String?,
          predefinedCurrencyTypeId:
              (json['PredefinedCurrencyTypeId'] as num?)?.toInt(),
          useDigitalSignature: json['UseDigitalSignature'] as bool?,
          digitalSignatureServerId:
              (json['DigitalSignatureServerId'] as num?)?.toInt(),
          useSms: json['UseSms'] as bool?,
          useWhatsAppNotification: json['UseWhatsAppNotification'] as bool?,
          usePushNotification: json['UsePushNotification'] as bool?,
          useVoiceNotification: json['UseVoiceNotification'] as bool?,
          useMailNotification: json['UseMailNotification'] as bool?,
          numberOfPushNotificationsAllowed:
              (json['NumberOfPushNotificationsAllowed'] as num?)?.toInt(),
          numberOfSmsNotificationsAllowed:
              (json['NumberOfSmsNotificationsAllowed'] as num?)?.toInt(),
          numberOfWhatsAppNotificationsAllowed:
              (json['NumberOfWhatsAppNotificationsAllowed'] as num?)?.toInt(),
          numberOfVoiceNotificationsAllowed:
              (json['NumberOfVoiceNotificationsAllowed'] as num?)?.toInt(),
          numberOfMailNotificationsUsed:
              (json['NumberOfMailNotificationsUsed'] as num?)?.toInt(),
          numberOfPushNotificationsUsed:
              (json['NumberOfPushNotificationsUsed'] as num?)?.toInt(),
          numberOfSmsNotificationsUsed:
              (json['NumberOfSmsNotificationsUsed'] as num?)?.toInt(),
          numberOfWhatsAppNotificationsUsed:
              (json['NumberOfWhatsAppNotificationsUsed'] as num?)?.toInt(),
          numberOfVoiceNotificationsUsed:
              (json['NumberOfVoiceNotificationsUsed'] as num?)?.toInt(),
          numberOfMailNotificationsAllowed:
              (json['NumberOfMailNotificationsAllowed'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1CompanyUpdatecompanyPost$RequestBodyToJson(
        ApiV1CompanyUpdatecompanyPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CompanyId': instance.companyId,
      'CompanyCode': instance.companyCode,
      'CompanyName': instance.companyName,
      'Subdomain': instance.subdomain,
      'PredefinedCompanyTypeId': instance.predefinedCompanyTypeId,
      'AddedDateTime': instance.addedDateTime?.toIso8601String(),
      'Email': instance.email,
      'ContactFirstName': instance.contactFirstName,
      'Website': instance.website,
      'ContactLastName': instance.contactLastName,
      'WorkPhone': instance.workPhone,
      'WorkPhoneExt': instance.workPhoneExt,
      'CellPhone': instance.cellPhone,
      'Active': instance.active,
      'Address1': instance.address1,
      'Address2': instance.address2,
      'City': instance.city,
      'StateId': instance.stateId,
      'CountryId': instance.countryId,
      'MailServerId': instance.mailServerId,
      'SmsServerId': instance.smsServerId,
      'SingleSignOnServerId': instance.singleSignOnServerId,
      'WhatsAppNotificationServerId': instance.whatsAppNotificationServerId,
      'VoiceNotificationServerId': instance.voiceNotificationServerId,
      'PushNotificationServerId': instance.pushNotificationServerId,
      'ProfileImageLocation': instance.profileImageLocation,
      'ProfileImageActualFileName': instance.profileImageActualFileName,
      'PredefinedCurrencyTypeId': instance.predefinedCurrencyTypeId,
      'UseDigitalSignature': instance.useDigitalSignature,
      'DigitalSignatureServerId': instance.digitalSignatureServerId,
      'UseSms': instance.useSms,
      'UseWhatsAppNotification': instance.useWhatsAppNotification,
      'UsePushNotification': instance.usePushNotification,
      'UseVoiceNotification': instance.useVoiceNotification,
      'UseMailNotification': instance.useMailNotification,
      'NumberOfPushNotificationsAllowed':
          instance.numberOfPushNotificationsAllowed,
      'NumberOfSmsNotificationsAllowed':
          instance.numberOfSmsNotificationsAllowed,
      'NumberOfWhatsAppNotificationsAllowed':
          instance.numberOfWhatsAppNotificationsAllowed,
      'NumberOfVoiceNotificationsAllowed':
          instance.numberOfVoiceNotificationsAllowed,
      'NumberOfMailNotificationsUsed': instance.numberOfMailNotificationsUsed,
      'NumberOfPushNotificationsUsed': instance.numberOfPushNotificationsUsed,
      'NumberOfSmsNotificationsUsed': instance.numberOfSmsNotificationsUsed,
      'NumberOfWhatsAppNotificationsUsed':
          instance.numberOfWhatsAppNotificationsUsed,
      'NumberOfVoiceNotificationsUsed': instance.numberOfVoiceNotificationsUsed,
      'NumberOfMailNotificationsAllowed':
          instance.numberOfMailNotificationsAllowed,
    };

ApiV1CompanyCreatestatementtemplatePost$RequestBody
    _$ApiV1CompanyCreatestatementtemplatePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyCreatestatementtemplatePost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
          predefinedStatementTemplateTypeId:
              (json['PredefinedStatementTemplateTypeId'] as num?)?.toInt(),
          statementTemplateName: json['StatementTemplateName'] as String?,
          description: json['Description'] as String?,
          statementTemplateFileName:
              json['StatementTemplateFileName'] as String?,
          statementTemplateFileLocation:
              json['StatementTemplateFileLocation'] as String?,
          statementTemplatePreviewFileLocation:
              json['StatementTemplatePreviewFileLocation'] as String?,
          isDefault: json['IsDefault'] as bool?,
        );

Map<String, dynamic>
    _$ApiV1CompanyCreatestatementtemplatePost$RequestBodyToJson(
            ApiV1CompanyCreatestatementtemplatePost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
          'PredefinedStatementTemplateTypeId':
              instance.predefinedStatementTemplateTypeId,
          'StatementTemplateName': instance.statementTemplateName,
          'Description': instance.description,
          'StatementTemplateFileName': instance.statementTemplateFileName,
          'StatementTemplateFileLocation':
              instance.statementTemplateFileLocation,
          'StatementTemplatePreviewFileLocation':
              instance.statementTemplatePreviewFileLocation,
          'IsDefault': instance.isDefault,
        };

ApiV1CompanyUpdatestatementtemplatePost$RequestBody
    _$ApiV1CompanyUpdatestatementtemplatePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUpdatestatementtemplatePost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          statementTemplateId: (json['StatementTemplateId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
          predefinedStatementTemplateTypeId:
              (json['PredefinedStatementTemplateTypeId'] as num?)?.toInt(),
          statementTemplateName: json['StatementTemplateName'] as String?,
          description: json['Description'] as String?,
          statementTemplateFileName:
              json['StatementTemplateFileName'] as String?,
          statementTemplateFileLocation:
              json['StatementTemplateFileLocation'] as String?,
          statementTemplatePreviewFileLocation:
              json['StatementTemplatePreviewFileLocation'] as String?,
          isDefault: json['IsDefault'] as bool?,
        );

Map<String, dynamic>
    _$ApiV1CompanyUpdatestatementtemplatePost$RequestBodyToJson(
            ApiV1CompanyUpdatestatementtemplatePost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'StatementTemplateId': instance.statementTemplateId,
          'CompanyId': instance.companyId,
          'PredefinedStatementTemplateTypeId':
              instance.predefinedStatementTemplateTypeId,
          'StatementTemplateName': instance.statementTemplateName,
          'Description': instance.description,
          'StatementTemplateFileName': instance.statementTemplateFileName,
          'StatementTemplateFileLocation':
              instance.statementTemplateFileLocation,
          'StatementTemplatePreviewFileLocation':
              instance.statementTemplatePreviewFileLocation,
          'IsDefault': instance.isDefault,
        };

ApiV1CompanyUploaduserpicturePost$RequestBody
    _$ApiV1CompanyUploaduserpicturePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploaduserpicturePost$RequestBody(
          userId: (json['UserId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1CompanyUploaduserpicturePost$RequestBodyToJson(
        ApiV1CompanyUploaduserpicturePost$RequestBody instance) =>
    <String, dynamic>{
      'UserId': instance.userId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1CompanyCreateuserPost$RequestBody
    _$ApiV1CompanyCreateuserPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyCreateuserPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          newPermissionTypeIds: (json['NewPermissionTypeIds'] as List<dynamic>?)
                  ?.map((e) => (e as num).toInt())
                  .toList() ??
              [],
          initialPassword: json['InitialPassword'] as String?,
          companyName: json['CompanyName'] as String?,
          companyCode: json['CompanyCode'] as String?,
          modifiedByUserFirstName: json['ModifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['ModifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['ModifiedByUserEmail'] as String?,
          userGuid: json['UserGuid'] as String?,
          userName: json['UserName'] as String?,
          predefinedUserTypeId: (json['PredefinedUserTypeId'] as num?)?.toInt(),
          passwordHash: json['PasswordHash'] as String?,
          passwordChangedDate: json['PasswordChangedDate'] == null
              ? null
              : DateTime.parse(json['PasswordChangedDate'] as String),
          email: json['Email'] as String?,
          firstName: json['FirstName'] as String?,
          lastName: json['LastName'] as String?,
          workPhone: json['WorkPhone'] as String?,
          workPhoneExt: json['WorkPhoneExt'] as String?,
          cellPhone: json['CellPhone'] as String?,
          active: json['Active'] as bool?,
          notificationThroughEmail: json['NotificationThroughEmail'] as bool?,
          oneTimeToken: json['OneTimeToken'] as String?,
          oneTimeExpireDateTime: json['OneTimeExpireDateTime'] == null
              ? null
              : DateTime.parse(json['OneTimeExpireDateTime'] as String),
          loginFailedAttempt: (json['LoginFailedAttempt'] as num?)?.toInt(),
          isAccountLocked: json['IsAccountLocked'] as bool?,
          accountLockedUntil: json['AccountLockedUntil'] == null
              ? null
              : DateTime.parse(json['AccountLockedUntil'] as String),
          newUserActivationGuid: json['NewUserActivationGuid'] as String?,
          newUserActivationCompletedOn: json['NewUserActivationCompletedOn'] ==
                  null
              ? null
              : DateTime.parse(json['NewUserActivationCompletedOn'] as String),
          canConfigureCompany: json['CanConfigureCompany'] as bool?,
          canViewCompany: json['CanViewCompany'] as bool?,
          profileImageLocation: json['ProfileImageLocation'] as String?,
          profileImageActualFileName:
              json['ProfileImageActualFileName'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
          isDeleted: json['IsDeleted'] as bool?,
        );

Map<String, dynamic> _$ApiV1CompanyCreateuserPost$RequestBodyToJson(
        ApiV1CompanyCreateuserPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'NewPermissionTypeIds': instance.newPermissionTypeIds,
      'InitialPassword': instance.initialPassword,
      'CompanyName': instance.companyName,
      'CompanyCode': instance.companyCode,
      'ModifiedByUserFirstName': instance.modifiedByUserFirstName,
      'ModifiedByUserLastName': instance.modifiedByUserLastName,
      'ModifiedByUserEmail': instance.modifiedByUserEmail,
      'UserGuid': instance.userGuid,
      'UserName': instance.userName,
      'PredefinedUserTypeId': instance.predefinedUserTypeId,
      'PasswordHash': instance.passwordHash,
      'PasswordChangedDate': instance.passwordChangedDate?.toIso8601String(),
      'Email': instance.email,
      'FirstName': instance.firstName,
      'LastName': instance.lastName,
      'WorkPhone': instance.workPhone,
      'WorkPhoneExt': instance.workPhoneExt,
      'CellPhone': instance.cellPhone,
      'Active': instance.active,
      'NotificationThroughEmail': instance.notificationThroughEmail,
      'OneTimeToken': instance.oneTimeToken,
      'OneTimeExpireDateTime':
          instance.oneTimeExpireDateTime?.toIso8601String(),
      'LoginFailedAttempt': instance.loginFailedAttempt,
      'IsAccountLocked': instance.isAccountLocked,
      'AccountLockedUntil': instance.accountLockedUntil?.toIso8601String(),
      'NewUserActivationGuid': instance.newUserActivationGuid,
      'NewUserActivationCompletedOn':
          instance.newUserActivationCompletedOn?.toIso8601String(),
      'CanConfigureCompany': instance.canConfigureCompany,
      'CanViewCompany': instance.canViewCompany,
      'ProfileImageLocation': instance.profileImageLocation,
      'ProfileImageActualFileName': instance.profileImageActualFileName,
      'CompanyId': instance.companyId,
      'IsDeleted': instance.isDeleted,
    };

ApiV1CompanyUpdateuserbyadminPost$RequestBody
    _$ApiV1CompanyUpdateuserbyadminPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUpdateuserbyadminPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          existingPermissionTypeIds:
              (json['ExistingPermissionTypeIds'] as List<dynamic>?)
                      ?.map((e) => (e as num).toInt())
                      .toList() ??
                  [],
          companyName: json['CompanyName'] as String?,
          companyCode: json['CompanyCode'] as String?,
          modifiedByUserFirstName: json['ModifiedByUserFirstName'] as String?,
          modifiedByUserLastName: json['ModifiedByUserLastName'] as String?,
          modifiedByUserEmail: json['ModifiedByUserEmail'] as String?,
          userId: (json['UserId'] as num?)?.toInt(),
          userGuid: json['UserGuid'] as String?,
          userName: json['UserName'] as String?,
          predefinedUserTypeId: (json['PredefinedUserTypeId'] as num?)?.toInt(),
          passwordHash: json['PasswordHash'] as String?,
          passwordChangedDate: json['PasswordChangedDate'] == null
              ? null
              : DateTime.parse(json['PasswordChangedDate'] as String),
          email: json['Email'] as String?,
          firstName: json['FirstName'] as String?,
          lastName: json['LastName'] as String?,
          workPhone: json['WorkPhone'] as String?,
          workPhoneExt: json['WorkPhoneExt'] as String?,
          cellPhone: json['CellPhone'] as String?,
          active: json['Active'] as bool?,
          notificationThroughEmail: json['NotificationThroughEmail'] as bool?,
          oneTimeToken: json['OneTimeToken'] as String?,
          oneTimeExpireDateTime: json['OneTimeExpireDateTime'] == null
              ? null
              : DateTime.parse(json['OneTimeExpireDateTime'] as String),
          loginFailedAttempt: (json['LoginFailedAttempt'] as num?)?.toInt(),
          isAccountLocked: json['IsAccountLocked'] as bool?,
          accountLockedUntil: json['AccountLockedUntil'] == null
              ? null
              : DateTime.parse(json['AccountLockedUntil'] as String),
          newUserActivationGuid: json['NewUserActivationGuid'] as String?,
          newUserActivationCompletedOn: json['NewUserActivationCompletedOn'] ==
                  null
              ? null
              : DateTime.parse(json['NewUserActivationCompletedOn'] as String),
          canConfigureCompany: json['CanConfigureCompany'] as bool?,
          canViewCompany: json['CanViewCompany'] as bool?,
          profileImageLocation: json['ProfileImageLocation'] as String?,
          profileImageActualFileName:
              json['ProfileImageActualFileName'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
          isDeleted: json['IsDeleted'] as bool?,
        );

Map<String, dynamic> _$ApiV1CompanyUpdateuserbyadminPost$RequestBodyToJson(
        ApiV1CompanyUpdateuserbyadminPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'ExistingPermissionTypeIds': instance.existingPermissionTypeIds,
      'CompanyName': instance.companyName,
      'CompanyCode': instance.companyCode,
      'ModifiedByUserFirstName': instance.modifiedByUserFirstName,
      'ModifiedByUserLastName': instance.modifiedByUserLastName,
      'ModifiedByUserEmail': instance.modifiedByUserEmail,
      'UserId': instance.userId,
      'UserGuid': instance.userGuid,
      'UserName': instance.userName,
      'PredefinedUserTypeId': instance.predefinedUserTypeId,
      'PasswordHash': instance.passwordHash,
      'PasswordChangedDate': instance.passwordChangedDate?.toIso8601String(),
      'Email': instance.email,
      'FirstName': instance.firstName,
      'LastName': instance.lastName,
      'WorkPhone': instance.workPhone,
      'WorkPhoneExt': instance.workPhoneExt,
      'CellPhone': instance.cellPhone,
      'Active': instance.active,
      'NotificationThroughEmail': instance.notificationThroughEmail,
      'OneTimeToken': instance.oneTimeToken,
      'OneTimeExpireDateTime':
          instance.oneTimeExpireDateTime?.toIso8601String(),
      'LoginFailedAttempt': instance.loginFailedAttempt,
      'IsAccountLocked': instance.isAccountLocked,
      'AccountLockedUntil': instance.accountLockedUntil?.toIso8601String(),
      'NewUserActivationGuid': instance.newUserActivationGuid,
      'NewUserActivationCompletedOn':
          instance.newUserActivationCompletedOn?.toIso8601String(),
      'CanConfigureCompany': instance.canConfigureCompany,
      'CanViewCompany': instance.canViewCompany,
      'ProfileImageLocation': instance.profileImageLocation,
      'ProfileImageActualFileName': instance.profileImageActualFileName,
      'CompanyId': instance.companyId,
      'IsDeleted': instance.isDeleted,
    };

ApiV1CompanyUploadvendorpicturePost$RequestBody
    _$ApiV1CompanyUploadvendorpicturePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploadvendorpicturePost$RequestBody(
          vendorId: (json['VendorId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1CompanyUploadvendorpicturePost$RequestBodyToJson(
        ApiV1CompanyUploadvendorpicturePost$RequestBody instance) =>
    <String, dynamic>{
      'VendorId': instance.vendorId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1CompanyUploadartistpicturePost$RequestBody
    _$ApiV1CompanyUploadartistpicturePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploadartistpicturePost$RequestBody(
          artistId: (json['ArtistId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1CompanyUploadartistpicturePost$RequestBodyToJson(
        ApiV1CompanyUploadartistpicturePost$RequestBody instance) =>
    <String, dynamic>{
      'ArtistId': instance.artistId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1CompanyCreatecontracttemplatePost$RequestBody
    _$ApiV1CompanyCreatecontracttemplatePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyCreatecontracttemplatePost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          predefinedContractTemplateForTypeId:
              (json['PredefinedContractTemplateForTypeId'] as num?)?.toInt(),
          artistTypeId: (json['ArtistTypeId'] as num?)?.toInt(),
          technicianTypeId: (json['TechnicianTypeId'] as num?)?.toInt(),
          equipmentTypeId: (json['EquipmentTypeId'] as num?)?.toInt(),
          vendorTypeId: (json['VendorTypeId'] as num?)?.toInt(),
          propertyTypeId: (json['PropertyTypeId'] as num?)?.toInt(),
          contractTemplateName: json['ContractTemplateName'] as String?,
          description: json['Description'] as String?,
          contractTemplateFileName: json['ContractTemplateFileName'] as String?,
          contractTemplateFileLocation:
              json['ContractTemplateFileLocation'] as String?,
          contractTemplatePreviewFileLocation:
              json['ContractTemplatePreviewFileLocation'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
          isPreviewFileAvailable: json['IsPreviewFileAvailable'] as bool?,
        );

Map<String, dynamic> _$ApiV1CompanyCreatecontracttemplatePost$RequestBodyToJson(
        ApiV1CompanyCreatecontracttemplatePost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'PredefinedContractTemplateForTypeId':
          instance.predefinedContractTemplateForTypeId,
      'ArtistTypeId': instance.artistTypeId,
      'TechnicianTypeId': instance.technicianTypeId,
      'EquipmentTypeId': instance.equipmentTypeId,
      'VendorTypeId': instance.vendorTypeId,
      'PropertyTypeId': instance.propertyTypeId,
      'ContractTemplateName': instance.contractTemplateName,
      'Description': instance.description,
      'ContractTemplateFileName': instance.contractTemplateFileName,
      'ContractTemplateFileLocation': instance.contractTemplateFileLocation,
      'ContractTemplatePreviewFileLocation':
          instance.contractTemplatePreviewFileLocation,
      'CompanyId': instance.companyId,
      'IsPreviewFileAvailable': instance.isPreviewFileAvailable,
    };

ApiV1CompanyUpdatecontracttemplatePost$RequestBody
    _$ApiV1CompanyUpdatecontracttemplatePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUpdatecontracttemplatePost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          contractTemplateId: (json['ContractTemplateId'] as num?)?.toInt(),
          predefinedContractTemplateForTypeId:
              (json['PredefinedContractTemplateForTypeId'] as num?)?.toInt(),
          artistTypeId: (json['ArtistTypeId'] as num?)?.toInt(),
          technicianTypeId: (json['TechnicianTypeId'] as num?)?.toInt(),
          equipmentTypeId: (json['EquipmentTypeId'] as num?)?.toInt(),
          vendorTypeId: (json['VendorTypeId'] as num?)?.toInt(),
          propertyTypeId: (json['PropertyTypeId'] as num?)?.toInt(),
          contractTemplateName: json['ContractTemplateName'] as String?,
          description: json['Description'] as String?,
          contractTemplateFileName: json['ContractTemplateFileName'] as String?,
          contractTemplateFileLocation:
              json['ContractTemplateFileLocation'] as String?,
          contractTemplatePreviewFileLocation:
              json['ContractTemplatePreviewFileLocation'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
          isPreviewFileAvailable: json['IsPreviewFileAvailable'] as bool?,
        );

Map<String, dynamic> _$ApiV1CompanyUpdatecontracttemplatePost$RequestBodyToJson(
        ApiV1CompanyUpdatecontracttemplatePost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'ContractTemplateId': instance.contractTemplateId,
      'PredefinedContractTemplateForTypeId':
          instance.predefinedContractTemplateForTypeId,
      'ArtistTypeId': instance.artistTypeId,
      'TechnicianTypeId': instance.technicianTypeId,
      'EquipmentTypeId': instance.equipmentTypeId,
      'VendorTypeId': instance.vendorTypeId,
      'PropertyTypeId': instance.propertyTypeId,
      'ContractTemplateName': instance.contractTemplateName,
      'Description': instance.description,
      'ContractTemplateFileName': instance.contractTemplateFileName,
      'ContractTemplateFileLocation': instance.contractTemplateFileLocation,
      'ContractTemplatePreviewFileLocation':
          instance.contractTemplatePreviewFileLocation,
      'CompanyId': instance.companyId,
      'IsPreviewFileAvailable': instance.isPreviewFileAvailable,
    };

ApiV1CompanyUploadtechnicianpicturePost$RequestBody
    _$ApiV1CompanyUploadtechnicianpicturePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploadtechnicianpicturePost$RequestBody(
          technicianId: (json['TechnicianId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic>
    _$ApiV1CompanyUploadtechnicianpicturePost$RequestBodyToJson(
            ApiV1CompanyUploadtechnicianpicturePost$RequestBody instance) =>
        <String, dynamic>{
          'TechnicianId': instance.technicianId,
          'UploadedFile': instance.uploadedFile,
        };

ApiV1CompanyUploadequipmentpicturePost$RequestBody
    _$ApiV1CompanyUploadequipmentpicturePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploadequipmentpicturePost$RequestBody(
          equipmentId: (json['EquipmentId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1CompanyUploadequipmentpicturePost$RequestBodyToJson(
        ApiV1CompanyUploadequipmentpicturePost$RequestBody instance) =>
    <String, dynamic>{
      'EquipmentId': instance.equipmentId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1CompanyUploadpropertypicturePost$RequestBody
    _$ApiV1CompanyUploadpropertypicturePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploadpropertypicturePost$RequestBody(
          propertyId: (json['PropertyId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1CompanyUploadpropertypicturePost$RequestBodyToJson(
        ApiV1CompanyUploadpropertypicturePost$RequestBody instance) =>
    <String, dynamic>{
      'PropertyId': instance.propertyId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1CompanyCreateresourcebiometricrecordPost$RequestBody
    _$ApiV1CompanyCreateresourcebiometricrecordPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyCreateresourcebiometricrecordPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          artistId: (json['ArtistId'] as num?)?.toInt(),
          technicianId: (json['TechnicianId'] as num?)?.toInt(),
          vendorId: (json['VendorId'] as num?)?.toInt(),
          userId: (json['UserId'] as num?)?.toInt(),
          predefinedBiometricTypeId:
              (json['PredefinedBiometricTypeId'] as num?)?.toInt(),
          documentLocation: json['DocumentLocation'] as String?,
          documentActualFileName: json['DocumentActualFileName'] as String?,
          documentActualFileSize:
              (json['DocumentActualFileSize'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String,
    dynamic> _$ApiV1CompanyCreateresourcebiometricrecordPost$RequestBodyToJson(
        ApiV1CompanyCreateresourcebiometricrecordPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'ArtistId': instance.artistId,
      'TechnicianId': instance.technicianId,
      'VendorId': instance.vendorId,
      'UserId': instance.userId,
      'PredefinedBiometricTypeId': instance.predefinedBiometricTypeId,
      'DocumentLocation': instance.documentLocation,
      'DocumentActualFileName': instance.documentActualFileName,
      'DocumentActualFileSize': instance.documentActualFileSize,
      'CompanyId': instance.companyId,
    };

ApiV1CompanyUpdateresourcebiometricrecordPost$RequestBody
    _$ApiV1CompanyUpdateresourcebiometricrecordPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUpdateresourcebiometricrecordPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          resourceBiometricRecordId:
              (json['ResourceBiometricRecordId'] as num?)?.toInt(),
          artistId: (json['ArtistId'] as num?)?.toInt(),
          technicianId: (json['TechnicianId'] as num?)?.toInt(),
          vendorId: (json['VendorId'] as num?)?.toInt(),
          userId: (json['UserId'] as num?)?.toInt(),
          predefinedBiometricTypeId:
              (json['PredefinedBiometricTypeId'] as num?)?.toInt(),
          documentLocation: json['DocumentLocation'] as String?,
          documentActualFileName: json['DocumentActualFileName'] as String?,
          documentActualFileSize:
              (json['DocumentActualFileSize'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String,
    dynamic> _$ApiV1CompanyUpdateresourcebiometricrecordPost$RequestBodyToJson(
        ApiV1CompanyUpdateresourcebiometricrecordPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'ResourceBiometricRecordId': instance.resourceBiometricRecordId,
      'ArtistId': instance.artistId,
      'TechnicianId': instance.technicianId,
      'VendorId': instance.vendorId,
      'UserId': instance.userId,
      'PredefinedBiometricTypeId': instance.predefinedBiometricTypeId,
      'DocumentLocation': instance.documentLocation,
      'DocumentActualFileName': instance.documentActualFileName,
      'DocumentActualFileSize': instance.documentActualFileSize,
      'CompanyId': instance.companyId,
    };

ApiV1CompanyUploadresourcebiometricrecordfilePost$RequestBody
    _$ApiV1CompanyUploadresourcebiometricrecordfilePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploadresourcebiometricrecordfilePost$RequestBody(
          resourceBiometricRecordId:
              (json['ResourceBiometricRecordId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic>
    _$ApiV1CompanyUploadresourcebiometricrecordfilePost$RequestBodyToJson(
            ApiV1CompanyUploadresourcebiometricrecordfilePost$RequestBody
                instance) =>
        <String, dynamic>{
          'ResourceBiometricRecordId': instance.resourceBiometricRecordId,
          'UploadedFile': instance.uploadedFile,
        };

ApiV1CompanyCreateresourceidentificationdocumentPost$RequestBody
    _$ApiV1CompanyCreateresourceidentificationdocumentPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyCreateresourceidentificationdocumentPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          artistId: (json['ArtistId'] as num?)?.toInt(),
          technicianId: (json['TechnicianId'] as num?)?.toInt(),
          vendorId: (json['VendorId'] as num?)?.toInt(),
          userId: (json['UserId'] as num?)?.toInt(),
          predefinedIdentificationDocumentTypeId:
              (json['PredefinedIdentificationDocumentTypeId'] as num?)?.toInt(),
          documentLocation: json['DocumentLocation'] as String?,
          documentActualFileName: json['DocumentActualFileName'] as String?,
          documentActualFileSize:
              (json['DocumentActualFileSize'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1CompanyCreateresourceidentificationdocumentPost$RequestBodyToJson(
            ApiV1CompanyCreateresourceidentificationdocumentPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'ArtistId': instance.artistId,
          'TechnicianId': instance.technicianId,
          'VendorId': instance.vendorId,
          'UserId': instance.userId,
          'PredefinedIdentificationDocumentTypeId':
              instance.predefinedIdentificationDocumentTypeId,
          'DocumentLocation': instance.documentLocation,
          'DocumentActualFileName': instance.documentActualFileName,
          'DocumentActualFileSize': instance.documentActualFileSize,
          'CompanyId': instance.companyId,
        };

ApiV1CompanyUpdateresourceidentificationdocumentPost$RequestBody
    _$ApiV1CompanyUpdateresourceidentificationdocumentPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUpdateresourceidentificationdocumentPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          resourceIdentificationDocumentId:
              (json['ResourceIdentificationDocumentId'] as num?)?.toInt(),
          artistId: (json['ArtistId'] as num?)?.toInt(),
          technicianId: (json['TechnicianId'] as num?)?.toInt(),
          vendorId: (json['VendorId'] as num?)?.toInt(),
          userId: (json['UserId'] as num?)?.toInt(),
          predefinedIdentificationDocumentTypeId:
              (json['PredefinedIdentificationDocumentTypeId'] as num?)?.toInt(),
          documentLocation: json['DocumentLocation'] as String?,
          documentActualFileName: json['DocumentActualFileName'] as String?,
          documentActualFileSize:
              (json['DocumentActualFileSize'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1CompanyUpdateresourceidentificationdocumentPost$RequestBodyToJson(
            ApiV1CompanyUpdateresourceidentificationdocumentPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'ResourceIdentificationDocumentId':
              instance.resourceIdentificationDocumentId,
          'ArtistId': instance.artistId,
          'TechnicianId': instance.technicianId,
          'VendorId': instance.vendorId,
          'UserId': instance.userId,
          'PredefinedIdentificationDocumentTypeId':
              instance.predefinedIdentificationDocumentTypeId,
          'DocumentLocation': instance.documentLocation,
          'DocumentActualFileName': instance.documentActualFileName,
          'DocumentActualFileSize': instance.documentActualFileSize,
          'CompanyId': instance.companyId,
        };

ApiV1CompanyUploadresourceidentificationdocumentfilePost$RequestBody
    _$ApiV1CompanyUploadresourceidentificationdocumentfilePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1CompanyUploadresourceidentificationdocumentfilePost$RequestBody(
          resourceIdentificationDocumentId:
              (json['ResourceIdentificationDocumentId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic>
    _$ApiV1CompanyUploadresourceidentificationdocumentfilePost$RequestBodyToJson(
            ApiV1CompanyUploadresourceidentificationdocumentfilePost$RequestBody
                instance) =>
        <String, dynamic>{
          'ResourceIdentificationDocumentId':
              instance.resourceIdentificationDocumentId,
          'UploadedFile': instance.uploadedFile,
        };

ApiV1MovieUploadmoviepictureforsecondcompanyPost$RequestBody
    _$ApiV1MovieUploadmoviepictureforsecondcompanyPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUploadmoviepictureforsecondcompanyPost$RequestBody(
          movieId: (json['MovieId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic>
    _$ApiV1MovieUploadmoviepictureforsecondcompanyPost$RequestBodyToJson(
            ApiV1MovieUploadmoviepictureforsecondcompanyPost$RequestBody
                instance) =>
        <String, dynamic>{
          'MovieId': instance.movieId,
          'UploadedFile': instance.uploadedFile,
        };

ApiV1MovieUploadmoviepicturePost$RequestBody
    _$ApiV1MovieUploadmoviepicturePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUploadmoviepicturePost$RequestBody(
          movieId: (json['MovieId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1MovieUploadmoviepicturePost$RequestBodyToJson(
        ApiV1MovieUploadmoviepicturePost$RequestBody instance) =>
    <String, dynamic>{
      'MovieId': instance.movieId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1MovieCreatemovievoucherPost$RequestBody
    _$ApiV1MovieCreatemovievoucherPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatemovievoucherPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          movieVoucherDate: json['MovieVoucherDate'] == null
              ? null
              : DateTime.parse(json['MovieVoucherDate'] as String),
          movieVoucherAmount: (json['MovieVoucherAmount'] as num?)?.toDouble(),
          movieShootDayExpenseId:
              (json['MovieShootDayExpenseId'] as num?)?.toInt(),
          movieVoucherLocation: json['MovieVoucherLocation'] as String?,
          movieVoucherActualFileName:
              json['MovieVoucherActualFileName'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1MovieCreatemovievoucherPost$RequestBodyToJson(
        ApiV1MovieCreatemovievoucherPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'MovieVoucherDate': instance.movieVoucherDate?.toIso8601String(),
      'MovieVoucherAmount': instance.movieVoucherAmount,
      'MovieShootDayExpenseId': instance.movieShootDayExpenseId,
      'MovieVoucherLocation': instance.movieVoucherLocation,
      'MovieVoucherActualFileName': instance.movieVoucherActualFileName,
      'CompanyId': instance.companyId,
    };

ApiV1MovieUpdatemovievoucherPost$RequestBody
    _$ApiV1MovieUpdatemovievoucherPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUpdatemovievoucherPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          movieVoucherId: (json['MovieVoucherId'] as num?)?.toInt(),
          movieVoucherDate: json['MovieVoucherDate'] == null
              ? null
              : DateTime.parse(json['MovieVoucherDate'] as String),
          movieVoucherAmount: (json['MovieVoucherAmount'] as num?)?.toDouble(),
          movieShootDayExpenseId:
              (json['MovieShootDayExpenseId'] as num?)?.toInt(),
          movieVoucherLocation: json['MovieVoucherLocation'] as String?,
          movieVoucherActualFileName:
              json['MovieVoucherActualFileName'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1MovieUpdatemovievoucherPost$RequestBodyToJson(
        ApiV1MovieUpdatemovievoucherPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'MovieVoucherId': instance.movieVoucherId,
      'MovieVoucherDate': instance.movieVoucherDate?.toIso8601String(),
      'MovieVoucherAmount': instance.movieVoucherAmount,
      'MovieShootDayExpenseId': instance.movieShootDayExpenseId,
      'MovieVoucherLocation': instance.movieVoucherLocation,
      'MovieVoucherActualFileName': instance.movieVoucherActualFileName,
      'CompanyId': instance.companyId,
    };

ApiV1MovieUploadmovievoucherfilePost$RequestBody
    _$ApiV1MovieUploadmovievoucherfilePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUploadmovievoucherfilePost$RequestBody(
          movieVoucherId: (json['MovieVoucherId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1MovieUploadmovievoucherfilePost$RequestBodyToJson(
        ApiV1MovieUploadmovievoucherfilePost$RequestBody instance) =>
    <String, dynamic>{
      'MovieVoucherId': instance.movieVoucherId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1MovieCreatecontractPost$RequestBody
    _$ApiV1MovieCreatecontractPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatecontractPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          isDocumentUploadIsSignedDocument:
              json['IsDocumentUploadIsSignedDocument'] as bool?,
          predefinedContractForTypeId:
              (json['PredefinedContractForTypeId'] as num?)?.toInt(),
          contractTemplateId: (json['ContractTemplateId'] as num?)?.toInt(),
          movieArtistId: (json['MovieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['MovieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['MovieEquipmentId'] as num?)?.toInt(),
          movieVendorId: (json['MovieVendorId'] as num?)?.toInt(),
          moviePropertyId: (json['MoviePropertyId'] as num?)?.toInt(),
          artistId: (json['ArtistId'] as num?)?.toInt(),
          technicianId: (json['TechnicianId'] as num?)?.toInt(),
          equipmentId: (json['EquipmentId'] as num?)?.toInt(),
          vendorId: (json['VendorId'] as num?)?.toInt(),
          propertyId: (json['PropertyId'] as num?)?.toInt(),
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          title: json['Title'] as String?,
          description: json['Description'] as String?,
          contractFileName: json['ContractFileName'] as String?,
          contractFileLocation: json['ContractFileLocation'] as String?,
          contractPreviewFileLocation:
              json['ContractPreviewFileLocation'] as String?,
          contractSignedFileLocation:
              json['ContractSignedFileLocation'] as String?,
          contractSignedPreviewFileLocation:
              json['ContractSignedPreviewFileLocation'] as String?,
          contractWithCompanyName: json['ContractWithCompanyName'] as String?,
          contractWithFirstName: json['ContractWithFirstName'] as String?,
          contractWithLastName: json['ContractWithLastName'] as String?,
          contractWithEmail: json['ContractWithEmail'] as String?,
          contractWithPhone: json['ContractWithPhone'] as String?,
          contractWithAddress1: json['ContractWithAddress1'] as String?,
          contractWithAddress2: json['ContractWithAddress2'] as String?,
          contractWithCity: json['ContractWithCity'] as String?,
          contractWithState: json['ContractWithState'] as String?,
          contractWithCountry: json['ContractWithCountry'] as String?,
          contractWithZipCode: json['ContractWithZipCode'] as String?,
          predefinedContractStatusTypeId:
              (json['PredefinedContractStatusTypeId'] as num?)?.toInt(),
          movieId: (json['MovieId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
          isPreviewFileAvailable: json['IsPreviewFileAvailable'] as bool?,
          contractDocumentModifiedDate: json['ContractDocumentModifiedDate'] ==
                  null
              ? null
              : DateTime.parse(json['ContractDocumentModifiedDate'] as String),
          contractDocumentIndexedDate: json['ContractDocumentIndexedDate'] ==
                  null
              ? null
              : DateTime.parse(json['ContractDocumentIndexedDate'] as String),
        );

Map<String, dynamic> _$ApiV1MovieCreatecontractPost$RequestBodyToJson(
        ApiV1MovieCreatecontractPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'IsDocumentUploadIsSignedDocument':
          instance.isDocumentUploadIsSignedDocument,
      'PredefinedContractForTypeId': instance.predefinedContractForTypeId,
      'ContractTemplateId': instance.contractTemplateId,
      'MovieArtistId': instance.movieArtistId,
      'MovieTechnicianId': instance.movieTechnicianId,
      'MovieEquipmentId': instance.movieEquipmentId,
      'MovieVendorId': instance.movieVendorId,
      'MoviePropertyId': instance.moviePropertyId,
      'ArtistId': instance.artistId,
      'TechnicianId': instance.technicianId,
      'EquipmentId': instance.equipmentId,
      'VendorId': instance.vendorId,
      'PropertyId': instance.propertyId,
      'MovieLocationId': instance.movieLocationId,
      'Title': instance.title,
      'Description': instance.description,
      'ContractFileName': instance.contractFileName,
      'ContractFileLocation': instance.contractFileLocation,
      'ContractPreviewFileLocation': instance.contractPreviewFileLocation,
      'ContractSignedFileLocation': instance.contractSignedFileLocation,
      'ContractSignedPreviewFileLocation':
          instance.contractSignedPreviewFileLocation,
      'ContractWithCompanyName': instance.contractWithCompanyName,
      'ContractWithFirstName': instance.contractWithFirstName,
      'ContractWithLastName': instance.contractWithLastName,
      'ContractWithEmail': instance.contractWithEmail,
      'ContractWithPhone': instance.contractWithPhone,
      'ContractWithAddress1': instance.contractWithAddress1,
      'ContractWithAddress2': instance.contractWithAddress2,
      'ContractWithCity': instance.contractWithCity,
      'ContractWithState': instance.contractWithState,
      'ContractWithCountry': instance.contractWithCountry,
      'ContractWithZipCode': instance.contractWithZipCode,
      'PredefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'MovieId': instance.movieId,
      'CompanyId': instance.companyId,
      'IsPreviewFileAvailable': instance.isPreviewFileAvailable,
      'ContractDocumentModifiedDate':
          instance.contractDocumentModifiedDate?.toIso8601String(),
      'ContractDocumentIndexedDate':
          instance.contractDocumentIndexedDate?.toIso8601String(),
    };

ApiV1MovieUpdatecontractPost$RequestBody
    _$ApiV1MovieUpdatecontractPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUpdatecontractPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          contractId: (json['ContractId'] as num?)?.toInt(),
          predefinedContractForTypeId:
              (json['PredefinedContractForTypeId'] as num?)?.toInt(),
          contractTemplateId: (json['ContractTemplateId'] as num?)?.toInt(),
          movieArtistId: (json['MovieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['MovieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['MovieEquipmentId'] as num?)?.toInt(),
          movieVendorId: (json['MovieVendorId'] as num?)?.toInt(),
          moviePropertyId: (json['MoviePropertyId'] as num?)?.toInt(),
          artistId: (json['ArtistId'] as num?)?.toInt(),
          technicianId: (json['TechnicianId'] as num?)?.toInt(),
          equipmentId: (json['EquipmentId'] as num?)?.toInt(),
          vendorId: (json['VendorId'] as num?)?.toInt(),
          propertyId: (json['PropertyId'] as num?)?.toInt(),
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          title: json['Title'] as String?,
          description: json['Description'] as String?,
          contractFileName: json['ContractFileName'] as String?,
          contractFileLocation: json['ContractFileLocation'] as String?,
          contractPreviewFileLocation:
              json['ContractPreviewFileLocation'] as String?,
          contractSignedFileLocation:
              json['ContractSignedFileLocation'] as String?,
          contractSignedPreviewFileLocation:
              json['ContractSignedPreviewFileLocation'] as String?,
          contractWithCompanyName: json['ContractWithCompanyName'] as String?,
          contractWithFirstName: json['ContractWithFirstName'] as String?,
          contractWithLastName: json['ContractWithLastName'] as String?,
          contractWithEmail: json['ContractWithEmail'] as String?,
          contractWithPhone: json['ContractWithPhone'] as String?,
          contractWithAddress1: json['ContractWithAddress1'] as String?,
          contractWithAddress2: json['ContractWithAddress2'] as String?,
          contractWithCity: json['ContractWithCity'] as String?,
          contractWithState: json['ContractWithState'] as String?,
          contractWithCountry: json['ContractWithCountry'] as String?,
          contractWithZipCode: json['ContractWithZipCode'] as String?,
          predefinedContractStatusTypeId:
              (json['PredefinedContractStatusTypeId'] as num?)?.toInt(),
          movieId: (json['MovieId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
          isPreviewFileAvailable: json['IsPreviewFileAvailable'] as bool?,
          contractDocumentModifiedDate: json['ContractDocumentModifiedDate'] ==
                  null
              ? null
              : DateTime.parse(json['ContractDocumentModifiedDate'] as String),
          contractDocumentIndexedDate: json['ContractDocumentIndexedDate'] ==
                  null
              ? null
              : DateTime.parse(json['ContractDocumentIndexedDate'] as String),
        );

Map<String, dynamic> _$ApiV1MovieUpdatecontractPost$RequestBodyToJson(
        ApiV1MovieUpdatecontractPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'ContractId': instance.contractId,
      'PredefinedContractForTypeId': instance.predefinedContractForTypeId,
      'ContractTemplateId': instance.contractTemplateId,
      'MovieArtistId': instance.movieArtistId,
      'MovieTechnicianId': instance.movieTechnicianId,
      'MovieEquipmentId': instance.movieEquipmentId,
      'MovieVendorId': instance.movieVendorId,
      'MoviePropertyId': instance.moviePropertyId,
      'ArtistId': instance.artistId,
      'TechnicianId': instance.technicianId,
      'EquipmentId': instance.equipmentId,
      'VendorId': instance.vendorId,
      'PropertyId': instance.propertyId,
      'MovieLocationId': instance.movieLocationId,
      'Title': instance.title,
      'Description': instance.description,
      'ContractFileName': instance.contractFileName,
      'ContractFileLocation': instance.contractFileLocation,
      'ContractPreviewFileLocation': instance.contractPreviewFileLocation,
      'ContractSignedFileLocation': instance.contractSignedFileLocation,
      'ContractSignedPreviewFileLocation':
          instance.contractSignedPreviewFileLocation,
      'ContractWithCompanyName': instance.contractWithCompanyName,
      'ContractWithFirstName': instance.contractWithFirstName,
      'ContractWithLastName': instance.contractWithLastName,
      'ContractWithEmail': instance.contractWithEmail,
      'ContractWithPhone': instance.contractWithPhone,
      'ContractWithAddress1': instance.contractWithAddress1,
      'ContractWithAddress2': instance.contractWithAddress2,
      'ContractWithCity': instance.contractWithCity,
      'ContractWithState': instance.contractWithState,
      'ContractWithCountry': instance.contractWithCountry,
      'ContractWithZipCode': instance.contractWithZipCode,
      'PredefinedContractStatusTypeId': instance.predefinedContractStatusTypeId,
      'MovieId': instance.movieId,
      'CompanyId': instance.companyId,
      'IsPreviewFileAvailable': instance.isPreviewFileAvailable,
      'ContractDocumentModifiedDate':
          instance.contractDocumentModifiedDate?.toIso8601String(),
      'ContractDocumentIndexedDate':
          instance.contractDocumentIndexedDate?.toIso8601String(),
    };

ApiV1MovieCompletecontractmanuallyPost$RequestBody
    _$ApiV1MovieCompletecontractmanuallyPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCompletecontractmanuallyPost$RequestBody(
          contractId: (json['ContractId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
          notes: json['Notes'] as String?,
        );

Map<String, dynamic> _$ApiV1MovieCompletecontractmanuallyPost$RequestBodyToJson(
        ApiV1MovieCompletecontractmanuallyPost$RequestBody instance) =>
    <String, dynamic>{
      'ContractId': instance.contractId,
      'UploadedFile': instance.uploadedFile,
      'Notes': instance.notes,
    };

ApiV1MovieCreatemovielocationPost$RequestBody
    _$ApiV1MovieCreatemovielocationPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatemovielocationPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          notes: json['Notes'] as String?,
          movieLocationCode: json['MovieLocationCode'] as String?,
          predefinedLocationTypeId:
              (json['PredefinedLocationTypeId'] as num?)?.toInt(),
          predefinedLocationSubTypeId:
              (json['PredefinedLocationSubTypeId'] as num?)?.toInt(),
          movieLocationName: json['MovieLocationName'] as String?,
          selectedMovieLocationCandidateId:
              (json['SelectedMovieLocationCandidateId'] as num?)?.toInt(),
          movieId: (json['MovieId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['PreProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['ProductionStatusTypeId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['PostProductionStatusTypeId'] as num?)?.toInt(),
          movieLocationCategoryId:
              (json['MovieLocationCategoryId'] as num?)?.toInt(),
          estimatedRate: (json['EstimatedRate'] as num?)?.toDouble(),
          movieShootDayBudgetId:
              (json['MovieShootDayBudgetId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1MovieCreatemovielocationPost$RequestBodyToJson(
        ApiV1MovieCreatemovielocationPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'Notes': instance.notes,
      'MovieLocationCode': instance.movieLocationCode,
      'PredefinedLocationTypeId': instance.predefinedLocationTypeId,
      'PredefinedLocationSubTypeId': instance.predefinedLocationSubTypeId,
      'MovieLocationName': instance.movieLocationName,
      'SelectedMovieLocationCandidateId':
          instance.selectedMovieLocationCandidateId,
      'MovieId': instance.movieId,
      'PreProductionStatusTypeId': instance.preProductionStatusTypeId,
      'ProductionStatusTypeId': instance.productionStatusTypeId,
      'PostProductionStatusTypeId': instance.postProductionStatusTypeId,
      'MovieLocationCategoryId': instance.movieLocationCategoryId,
      'EstimatedRate': instance.estimatedRate,
      'MovieShootDayBudgetId': instance.movieShootDayBudgetId,
      'CompanyId': instance.companyId,
    };

ApiV1MovieUpdatemovielocationPost$RequestBody
    _$ApiV1MovieUpdatemovielocationPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUpdatemovielocationPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          notes: json['Notes'] as String?,
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          movieLocationCode: json['MovieLocationCode'] as String?,
          predefinedLocationTypeId:
              (json['PredefinedLocationTypeId'] as num?)?.toInt(),
          predefinedLocationSubTypeId:
              (json['PredefinedLocationSubTypeId'] as num?)?.toInt(),
          movieLocationName: json['MovieLocationName'] as String?,
          selectedMovieLocationCandidateId:
              (json['SelectedMovieLocationCandidateId'] as num?)?.toInt(),
          movieId: (json['MovieId'] as num?)?.toInt(),
          preProductionStatusTypeId:
              (json['PreProductionStatusTypeId'] as num?)?.toInt(),
          productionStatusTypeId:
              (json['ProductionStatusTypeId'] as num?)?.toInt(),
          postProductionStatusTypeId:
              (json['PostProductionStatusTypeId'] as num?)?.toInt(),
          movieLocationCategoryId:
              (json['MovieLocationCategoryId'] as num?)?.toInt(),
          estimatedRate: (json['EstimatedRate'] as num?)?.toDouble(),
          movieShootDayBudgetId:
              (json['MovieShootDayBudgetId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1MovieUpdatemovielocationPost$RequestBodyToJson(
        ApiV1MovieUpdatemovielocationPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'Notes': instance.notes,
      'MovieLocationId': instance.movieLocationId,
      'MovieLocationCode': instance.movieLocationCode,
      'PredefinedLocationTypeId': instance.predefinedLocationTypeId,
      'PredefinedLocationSubTypeId': instance.predefinedLocationSubTypeId,
      'MovieLocationName': instance.movieLocationName,
      'SelectedMovieLocationCandidateId':
          instance.selectedMovieLocationCandidateId,
      'MovieId': instance.movieId,
      'PreProductionStatusTypeId': instance.preProductionStatusTypeId,
      'ProductionStatusTypeId': instance.productionStatusTypeId,
      'PostProductionStatusTypeId': instance.postProductionStatusTypeId,
      'MovieLocationCategoryId': instance.movieLocationCategoryId,
      'EstimatedRate': instance.estimatedRate,
      'MovieShootDayBudgetId': instance.movieShootDayBudgetId,
      'CompanyId': instance.companyId,
    };

ApiV1MovieCreatemovielocationcandidatePost$RequestBody
    _$ApiV1MovieCreatemovielocationcandidatePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatemovielocationcandidatePost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          notes: json['Notes'] as String?,
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          movieLocationCandidateCode:
              json['MovieLocationCandidateCode'] as String?,
          predefinedMovieLocationVisitedStatusTypeId:
              (json['PredefinedMovieLocationVisitedStatusTypeId'] as num?)
                  ?.toInt(),
          askingRate: (json['AskingRate'] as num?)?.toDouble(),
          rateUnit: (json['RateUnit'] as num?)?.toInt(),
          predefinedRateUnitTypeId:
              (json['PredefinedRateUnitTypeId'] as num?)?.toInt(),
          movieLocationCandidateName:
              json['MovieLocationCandidateName'] as String?,
          contactFirstName: json['ContactFirstName'] as String?,
          contactLastName: json['ContactLastName'] as String?,
          contactPhone: json['ContactPhone'] as String?,
          contactEmail: json['ContactEmail'] as String?,
          website: json['Website'] as String?,
          address1: json['Address1'] as String?,
          address2: json['Address2'] as String?,
          city: json['City'] as String?,
          state: json['State'] as String?,
          country: json['Country'] as String?,
          nearbyHospitalName: json['NearbyHospitalName'] as String?,
          nearbyHospitalPhone: json['NearbyHospitalPhone'] as String?,
          movieId: (json['MovieId'] as num?)?.toInt(),
          profileImageLocation: json['ProfileImageLocation'] as String?,
          profileImageActualFileName:
              json['ProfileImageActualFileName'] as String?,
          visitedDateTime: json['VisitedDateTime'] == null
              ? null
              : DateTime.parse(json['VisitedDateTime'] as String),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1MovieCreatemovielocationcandidatePost$RequestBodyToJson(
            ApiV1MovieCreatemovielocationcandidatePost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'Notes': instance.notes,
          'MovieLocationId': instance.movieLocationId,
          'MovieLocationCandidateCode': instance.movieLocationCandidateCode,
          'PredefinedMovieLocationVisitedStatusTypeId':
              instance.predefinedMovieLocationVisitedStatusTypeId,
          'AskingRate': instance.askingRate,
          'RateUnit': instance.rateUnit,
          'PredefinedRateUnitTypeId': instance.predefinedRateUnitTypeId,
          'MovieLocationCandidateName': instance.movieLocationCandidateName,
          'ContactFirstName': instance.contactFirstName,
          'ContactLastName': instance.contactLastName,
          'ContactPhone': instance.contactPhone,
          'ContactEmail': instance.contactEmail,
          'Website': instance.website,
          'Address1': instance.address1,
          'Address2': instance.address2,
          'City': instance.city,
          'State': instance.state,
          'Country': instance.country,
          'NearbyHospitalName': instance.nearbyHospitalName,
          'NearbyHospitalPhone': instance.nearbyHospitalPhone,
          'MovieId': instance.movieId,
          'ProfileImageLocation': instance.profileImageLocation,
          'ProfileImageActualFileName': instance.profileImageActualFileName,
          'VisitedDateTime': instance.visitedDateTime?.toIso8601String(),
          'CompanyId': instance.companyId,
        };

ApiV1MovieUpdatemovielocationcandidatePost$RequestBody
    _$ApiV1MovieUpdatemovielocationcandidatePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUpdatemovielocationcandidatePost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          notes: json['Notes'] as String?,
          movieLocationCandidateId:
              (json['MovieLocationCandidateId'] as num?)?.toInt(),
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          movieLocationCandidateCode:
              json['MovieLocationCandidateCode'] as String?,
          predefinedMovieLocationVisitedStatusTypeId:
              (json['PredefinedMovieLocationVisitedStatusTypeId'] as num?)
                  ?.toInt(),
          askingRate: (json['AskingRate'] as num?)?.toDouble(),
          rateUnit: (json['RateUnit'] as num?)?.toInt(),
          predefinedRateUnitTypeId:
              (json['PredefinedRateUnitTypeId'] as num?)?.toInt(),
          movieLocationCandidateName:
              json['MovieLocationCandidateName'] as String?,
          contactFirstName: json['ContactFirstName'] as String?,
          contactLastName: json['ContactLastName'] as String?,
          contactPhone: json['ContactPhone'] as String?,
          contactEmail: json['ContactEmail'] as String?,
          website: json['Website'] as String?,
          address1: json['Address1'] as String?,
          address2: json['Address2'] as String?,
          city: json['City'] as String?,
          state: json['State'] as String?,
          country: json['Country'] as String?,
          nearbyHospitalName: json['NearbyHospitalName'] as String?,
          nearbyHospitalPhone: json['NearbyHospitalPhone'] as String?,
          movieId: (json['MovieId'] as num?)?.toInt(),
          profileImageLocation: json['ProfileImageLocation'] as String?,
          profileImageActualFileName:
              json['ProfileImageActualFileName'] as String?,
          visitedDateTime: json['VisitedDateTime'] == null
              ? null
              : DateTime.parse(json['VisitedDateTime'] as String),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1MovieUpdatemovielocationcandidatePost$RequestBodyToJson(
            ApiV1MovieUpdatemovielocationcandidatePost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'Notes': instance.notes,
          'MovieLocationCandidateId': instance.movieLocationCandidateId,
          'MovieLocationId': instance.movieLocationId,
          'MovieLocationCandidateCode': instance.movieLocationCandidateCode,
          'PredefinedMovieLocationVisitedStatusTypeId':
              instance.predefinedMovieLocationVisitedStatusTypeId,
          'AskingRate': instance.askingRate,
          'RateUnit': instance.rateUnit,
          'PredefinedRateUnitTypeId': instance.predefinedRateUnitTypeId,
          'MovieLocationCandidateName': instance.movieLocationCandidateName,
          'ContactFirstName': instance.contactFirstName,
          'ContactLastName': instance.contactLastName,
          'ContactPhone': instance.contactPhone,
          'ContactEmail': instance.contactEmail,
          'Website': instance.website,
          'Address1': instance.address1,
          'Address2': instance.address2,
          'City': instance.city,
          'State': instance.state,
          'Country': instance.country,
          'NearbyHospitalName': instance.nearbyHospitalName,
          'NearbyHospitalPhone': instance.nearbyHospitalPhone,
          'MovieId': instance.movieId,
          'ProfileImageLocation': instance.profileImageLocation,
          'ProfileImageActualFileName': instance.profileImageActualFileName,
          'VisitedDateTime': instance.visitedDateTime?.toIso8601String(),
          'CompanyId': instance.companyId,
        };

ApiV1MovieUploadmovielocationcandidatefilePost$RequestBody
    _$ApiV1MovieUploadmovielocationcandidatefilePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUploadmovielocationcandidatefilePost$RequestBody(
          movieLocationCandidateId:
              (json['MovieLocationCandidateId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String,
    dynamic> _$ApiV1MovieUploadmovielocationcandidatefilePost$RequestBodyToJson(
        ApiV1MovieUploadmovielocationcandidatefilePost$RequestBody instance) =>
    <String, dynamic>{
      'MovieLocationCandidateId': instance.movieLocationCandidateId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1MovieCreatemoviescriptfilePost$RequestBody
    _$ApiV1MovieCreatemoviescriptfilePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatemoviescriptfilePost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          movieScriptFileCode: json['MovieScriptFileCode'] as String?,
          predefinedMovieScriptFileTypeId:
              (json['PredefinedMovieScriptFileTypeId'] as num?)?.toInt(),
          scriptFileLocation: json['ScriptFileLocation'] as String?,
          scriptFileActualFileName: json['ScriptFileActualFileName'] as String?,
          isScriptFilePreviewAvailable:
              json['IsScriptFilePreviewAvailable'] as bool?,
          scriptFilePreviewLocation:
              json['ScriptFilePreviewLocation'] as String?,
          description: json['Description'] as String?,
          movieId: (json['MovieId'] as num?)?.toInt(),
          movieSceneId: (json['MovieSceneId'] as num?)?.toInt(),
          movieShootDayId: (json['MovieShootDayId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1MovieCreatemoviescriptfilePost$RequestBodyToJson(
        ApiV1MovieCreatemoviescriptfilePost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'MovieScriptFileCode': instance.movieScriptFileCode,
      'PredefinedMovieScriptFileTypeId':
          instance.predefinedMovieScriptFileTypeId,
      'ScriptFileLocation': instance.scriptFileLocation,
      'ScriptFileActualFileName': instance.scriptFileActualFileName,
      'IsScriptFilePreviewAvailable': instance.isScriptFilePreviewAvailable,
      'ScriptFilePreviewLocation': instance.scriptFilePreviewLocation,
      'Description': instance.description,
      'MovieId': instance.movieId,
      'MovieSceneId': instance.movieSceneId,
      'MovieShootDayId': instance.movieShootDayId,
      'CompanyId': instance.companyId,
    };

ApiV1MovieUpdatemoviescriptfilePost$RequestBody
    _$ApiV1MovieUpdatemoviescriptfilePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUpdatemoviescriptfilePost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          movieScriptFileId: (json['MovieScriptFileId'] as num?)?.toInt(),
          movieScriptFileCode: json['MovieScriptFileCode'] as String?,
          predefinedMovieScriptFileTypeId:
              (json['PredefinedMovieScriptFileTypeId'] as num?)?.toInt(),
          scriptFileLocation: json['ScriptFileLocation'] as String?,
          scriptFileActualFileName: json['ScriptFileActualFileName'] as String?,
          isScriptFilePreviewAvailable:
              json['IsScriptFilePreviewAvailable'] as bool?,
          scriptFilePreviewLocation:
              json['ScriptFilePreviewLocation'] as String?,
          description: json['Description'] as String?,
          movieId: (json['MovieId'] as num?)?.toInt(),
          movieSceneId: (json['MovieSceneId'] as num?)?.toInt(),
          movieShootDayId: (json['MovieShootDayId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1MovieUpdatemoviescriptfilePost$RequestBodyToJson(
        ApiV1MovieUpdatemoviescriptfilePost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'MovieScriptFileId': instance.movieScriptFileId,
      'MovieScriptFileCode': instance.movieScriptFileCode,
      'PredefinedMovieScriptFileTypeId':
          instance.predefinedMovieScriptFileTypeId,
      'ScriptFileLocation': instance.scriptFileLocation,
      'ScriptFileActualFileName': instance.scriptFileActualFileName,
      'IsScriptFilePreviewAvailable': instance.isScriptFilePreviewAvailable,
      'ScriptFilePreviewLocation': instance.scriptFilePreviewLocation,
      'Description': instance.description,
      'MovieId': instance.movieId,
      'MovieSceneId': instance.movieSceneId,
      'MovieShootDayId': instance.movieShootDayId,
      'CompanyId': instance.companyId,
    };

ApiV1MovieUploadmoviescriptfilePost$RequestBody
    _$ApiV1MovieUploadmoviescriptfilePost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUploadmoviescriptfilePost$RequestBody(
          movieScriptFileId: (json['MovieScriptFileId'] as num?)?.toInt(),
          uploadedFile: json['UploadedFile'] as String?,
        );

Map<String, dynamic> _$ApiV1MovieUploadmoviescriptfilePost$RequestBodyToJson(
        ApiV1MovieUploadmoviescriptfilePost$RequestBody instance) =>
    <String, dynamic>{
      'MovieScriptFileId': instance.movieScriptFileId,
      'UploadedFile': instance.uploadedFile,
    };

ApiV1MovieCreatemovieshootdaybudgetwithfileattachmentPost$RequestBody
    _$ApiV1MovieCreatemovieshootdaybudgetwithfileattachmentPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatemovieshootdaybudgetwithfileattachmentPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          createMovieShootDayOnTheFly:
              json['CreateMovieShootDayOnTheFly'] as bool?,
          movieShootDayNumber: (json['MovieShootDayNumber'] as num?)?.toInt(),
          movieBudgetDivisionId:
              (json['MovieBudgetDivisionId'] as num?)?.toInt(),
          movieShootDaySummary: json['MovieShootDaySummary'] as String?,
          createMovieResourceOnTheFly:
              json['CreateMovieResourceOnTheFly'] as bool?,
          characterName: json['CharacterName'] as String?,
          resourceId: (json['ResourceId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['IsDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['IsPartOfMajorCrew'] as bool?,
          movieShootDayId: (json['MovieShootDayId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['MovieBudgetCategoryId'] as num?)?.toInt(),
          predefinedBudgetOrExpenseTypeId:
              (json['PredefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
          predefinedRateTypeId: (json['PredefinedRateTypeId'] as num?)?.toInt(),
          movieArtistId: (json['MovieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['MovieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['MovieEquipmentId'] as num?)?.toInt(),
          moviePropertyId: (json['MoviePropertyId'] as num?)?.toInt(),
          movieVendorId: (json['MovieVendorId'] as num?)?.toInt(),
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          budgetEntryName: json['BudgetEntryName'] as String?,
          description: json['Description'] as String?,
          quantity: (json['Quantity'] as num?)?.toDouble(),
          amount: (json['Amount'] as num?)?.toDouble(),
          totalAmount: (json['TotalAmount'] as num?)?.toDouble(),
          movieId: (json['MovieId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1MovieCreatemovieshootdaybudgetwithfileattachmentPost$RequestBodyToJson(
            ApiV1MovieCreatemovieshootdaybudgetwithfileattachmentPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CreateMovieShootDayOnTheFly': instance.createMovieShootDayOnTheFly,
          'MovieShootDayNumber': instance.movieShootDayNumber,
          'MovieBudgetDivisionId': instance.movieBudgetDivisionId,
          'MovieShootDaySummary': instance.movieShootDaySummary,
          'CreateMovieResourceOnTheFly': instance.createMovieResourceOnTheFly,
          'CharacterName': instance.characterName,
          'ResourceId': instance.resourceId,
          'IsDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'IsPartOfMajorCrew': instance.isPartOfMajorCrew,
          'MovieShootDayId': instance.movieShootDayId,
          'MovieBudgetCategoryId': instance.movieBudgetCategoryId,
          'PredefinedBudgetOrExpenseTypeId':
              instance.predefinedBudgetOrExpenseTypeId,
          'PredefinedRateTypeId': instance.predefinedRateTypeId,
          'MovieArtistId': instance.movieArtistId,
          'MovieTechnicianId': instance.movieTechnicianId,
          'MovieEquipmentId': instance.movieEquipmentId,
          'MoviePropertyId': instance.moviePropertyId,
          'MovieVendorId': instance.movieVendorId,
          'MovieLocationId': instance.movieLocationId,
          'BudgetEntryName': instance.budgetEntryName,
          'Description': instance.description,
          'Quantity': instance.quantity,
          'Amount': instance.amount,
          'TotalAmount': instance.totalAmount,
          'MovieId': instance.movieId,
          'CompanyId': instance.companyId,
        };

ApiV1MovieUpdatemovieshootdaybudgetwithfileattachmentPost$RequestBody
    _$ApiV1MovieUpdatemovieshootdaybudgetwithfileattachmentPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUpdatemovieshootdaybudgetwithfileattachmentPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          createMovieShootDayOnTheFly:
              json['CreateMovieShootDayOnTheFly'] as bool?,
          movieShootDayNumber: (json['MovieShootDayNumber'] as num?)?.toInt(),
          movieBudgetDivisionId:
              (json['MovieBudgetDivisionId'] as num?)?.toInt(),
          movieShootDaySummary: json['MovieShootDaySummary'] as String?,
          createMovieResourceOnTheFly:
              json['CreateMovieResourceOnTheFly'] as bool?,
          characterName: json['CharacterName'] as String?,
          resourceId: (json['ResourceId'] as num?)?.toInt(),
          isDefaultForAllShootDay: json['IsDefaultForAllShootDay'] as bool?,
          isPartOfMajorCrew: json['IsPartOfMajorCrew'] as bool?,
          movieShootDayBudgetId:
              (json['MovieShootDayBudgetId'] as num?)?.toInt(),
          movieShootDayId: (json['MovieShootDayId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['MovieBudgetCategoryId'] as num?)?.toInt(),
          predefinedBudgetOrExpenseTypeId:
              (json['PredefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
          predefinedRateTypeId: (json['PredefinedRateTypeId'] as num?)?.toInt(),
          movieArtistId: (json['MovieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['MovieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['MovieEquipmentId'] as num?)?.toInt(),
          moviePropertyId: (json['MoviePropertyId'] as num?)?.toInt(),
          movieVendorId: (json['MovieVendorId'] as num?)?.toInt(),
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          budgetEntryName: json['BudgetEntryName'] as String?,
          description: json['Description'] as String?,
          quantity: (json['Quantity'] as num?)?.toDouble(),
          amount: (json['Amount'] as num?)?.toDouble(),
          totalAmount: (json['TotalAmount'] as num?)?.toDouble(),
          movieId: (json['MovieId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1MovieUpdatemovieshootdaybudgetwithfileattachmentPost$RequestBodyToJson(
            ApiV1MovieUpdatemovieshootdaybudgetwithfileattachmentPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CreateMovieShootDayOnTheFly': instance.createMovieShootDayOnTheFly,
          'MovieShootDayNumber': instance.movieShootDayNumber,
          'MovieBudgetDivisionId': instance.movieBudgetDivisionId,
          'MovieShootDaySummary': instance.movieShootDaySummary,
          'CreateMovieResourceOnTheFly': instance.createMovieResourceOnTheFly,
          'CharacterName': instance.characterName,
          'ResourceId': instance.resourceId,
          'IsDefaultForAllShootDay': instance.isDefaultForAllShootDay,
          'IsPartOfMajorCrew': instance.isPartOfMajorCrew,
          'MovieShootDayBudgetId': instance.movieShootDayBudgetId,
          'MovieShootDayId': instance.movieShootDayId,
          'MovieBudgetCategoryId': instance.movieBudgetCategoryId,
          'PredefinedBudgetOrExpenseTypeId':
              instance.predefinedBudgetOrExpenseTypeId,
          'PredefinedRateTypeId': instance.predefinedRateTypeId,
          'MovieArtistId': instance.movieArtistId,
          'MovieTechnicianId': instance.movieTechnicianId,
          'MovieEquipmentId': instance.movieEquipmentId,
          'MoviePropertyId': instance.moviePropertyId,
          'MovieVendorId': instance.movieVendorId,
          'MovieLocationId': instance.movieLocationId,
          'BudgetEntryName': instance.budgetEntryName,
          'Description': instance.description,
          'Quantity': instance.quantity,
          'Amount': instance.amount,
          'TotalAmount': instance.totalAmount,
          'MovieId': instance.movieId,
          'CompanyId': instance.companyId,
        };

ApiV1MovieCreatemovieshootdayexpensewithfileattachmentPost$RequestBody
    _$ApiV1MovieCreatemovieshootdayexpensewithfileattachmentPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatemovieshootdayexpensewithfileattachmentPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          createMovieShootDayOnTheFly:
              json['CreateMovieShootDayOnTheFly'] as bool?,
          movieShootDayNumber: (json['MovieShootDayNumber'] as num?)?.toInt(),
          movieBudgetDivisionId:
              (json['MovieBudgetDivisionId'] as num?)?.toInt(),
          movieShootDaySummary: json['MovieShootDaySummary'] as String?,
          notes: json['Notes'] as String?,
          movieShootDayExpenseCode: json['MovieShootDayExpenseCode'] as String?,
          movieShootDayId: (json['MovieShootDayId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['MovieBudgetCategoryId'] as num?)?.toInt(),
          predefinedBudgetOrExpenseTypeId:
              (json['PredefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
          predefinedExpensePaymentStatusTypeId:
              (json['PredefinedExpensePaymentStatusTypeId'] as num?)?.toInt(),
          predefinedExpensePaymentTypeId:
              (json['PredefinedExpensePaymentTypeId'] as num?)?.toInt(),
          predefinedRateTypeId: (json['PredefinedRateTypeId'] as num?)?.toInt(),
          movieArtistId: (json['MovieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['MovieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['MovieEquipmentId'] as num?)?.toInt(),
          moviePropertyId: (json['MoviePropertyId'] as num?)?.toInt(),
          movieVendorId: (json['MovieVendorId'] as num?)?.toInt(),
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          expenseEntryName: json['ExpenseEntryName'] as String?,
          description: json['Description'] as String?,
          chequeNumber: json['ChequeNumber'] as String?,
          chequeIssuedByBankName: json['ChequeIssuedByBankName'] as String?,
          chequeIssuedByBankBranchName:
              json['ChequeIssuedByBankBranchName'] as String?,
          bankTransferFromBankName: json['BankTransferFromBankName'] as String?,
          bankTransferFromBankBranchName:
              json['BankTransferFromBankBranchName'] as String?,
          bankTransferToBankName: json['BankTransferToBankName'] as String?,
          bankTransferToBankBranchName:
              json['BankTransferToBankBranchName'] as String?,
          bankTransferFromAccountNumber:
              json['BankTransferFromAccountNumber'] as String?,
          bankTransferToAccountNumber:
              json['BankTransferToAccountNumber'] as String?,
          amountIssuedDate: json['AmountIssuedDate'] == null
              ? null
              : DateTime.parse(json['AmountIssuedDate'] as String),
          quantity: (json['Quantity'] as num?)?.toDouble(),
          amount: (json['Amount'] as num?)?.toDouble(),
          totalAmount: (json['TotalAmount'] as num?)?.toDouble(),
          ledgerTypeId: (json['LedgerTypeId'] as num?)?.toInt(),
          movieId: (json['MovieId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1MovieCreatemovieshootdayexpensewithfileattachmentPost$RequestBodyToJson(
            ApiV1MovieCreatemovieshootdayexpensewithfileattachmentPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CreateMovieShootDayOnTheFly': instance.createMovieShootDayOnTheFly,
          'MovieShootDayNumber': instance.movieShootDayNumber,
          'MovieBudgetDivisionId': instance.movieBudgetDivisionId,
          'MovieShootDaySummary': instance.movieShootDaySummary,
          'Notes': instance.notes,
          'MovieShootDayExpenseCode': instance.movieShootDayExpenseCode,
          'MovieShootDayId': instance.movieShootDayId,
          'MovieBudgetCategoryId': instance.movieBudgetCategoryId,
          'PredefinedBudgetOrExpenseTypeId':
              instance.predefinedBudgetOrExpenseTypeId,
          'PredefinedExpensePaymentStatusTypeId':
              instance.predefinedExpensePaymentStatusTypeId,
          'PredefinedExpensePaymentTypeId':
              instance.predefinedExpensePaymentTypeId,
          'PredefinedRateTypeId': instance.predefinedRateTypeId,
          'MovieArtistId': instance.movieArtistId,
          'MovieTechnicianId': instance.movieTechnicianId,
          'MovieEquipmentId': instance.movieEquipmentId,
          'MoviePropertyId': instance.moviePropertyId,
          'MovieVendorId': instance.movieVendorId,
          'MovieLocationId': instance.movieLocationId,
          'ExpenseEntryName': instance.expenseEntryName,
          'Description': instance.description,
          'ChequeNumber': instance.chequeNumber,
          'ChequeIssuedByBankName': instance.chequeIssuedByBankName,
          'ChequeIssuedByBankBranchName': instance.chequeIssuedByBankBranchName,
          'BankTransferFromBankName': instance.bankTransferFromBankName,
          'BankTransferFromBankBranchName':
              instance.bankTransferFromBankBranchName,
          'BankTransferToBankName': instance.bankTransferToBankName,
          'BankTransferToBankBranchName': instance.bankTransferToBankBranchName,
          'BankTransferFromAccountNumber':
              instance.bankTransferFromAccountNumber,
          'BankTransferToAccountNumber': instance.bankTransferToAccountNumber,
          'AmountIssuedDate': instance.amountIssuedDate?.toIso8601String(),
          'Quantity': instance.quantity,
          'Amount': instance.amount,
          'TotalAmount': instance.totalAmount,
          'LedgerTypeId': instance.ledgerTypeId,
          'MovieId': instance.movieId,
          'CompanyId': instance.companyId,
        };

ApiV1MovieUpdatemovieshootdayexpensewithfileattachmentPost$RequestBody
    _$ApiV1MovieUpdatemovieshootdayexpensewithfileattachmentPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieUpdatemovieshootdayexpensewithfileattachmentPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          createMovieShootDayOnTheFly:
              json['CreateMovieShootDayOnTheFly'] as bool?,
          movieShootDayNumber: (json['MovieShootDayNumber'] as num?)?.toInt(),
          movieBudgetDivisionId:
              (json['MovieBudgetDivisionId'] as num?)?.toInt(),
          movieShootDaySummary: json['MovieShootDaySummary'] as String?,
          notes: json['Notes'] as String?,
          movieShootDayExpenseId:
              (json['MovieShootDayExpenseId'] as num?)?.toInt(),
          movieShootDayExpenseCode: json['MovieShootDayExpenseCode'] as String?,
          movieShootDayId: (json['MovieShootDayId'] as num?)?.toInt(),
          movieBudgetCategoryId:
              (json['MovieBudgetCategoryId'] as num?)?.toInt(),
          predefinedBudgetOrExpenseTypeId:
              (json['PredefinedBudgetOrExpenseTypeId'] as num?)?.toInt(),
          predefinedExpensePaymentStatusTypeId:
              (json['PredefinedExpensePaymentStatusTypeId'] as num?)?.toInt(),
          predefinedExpensePaymentTypeId:
              (json['PredefinedExpensePaymentTypeId'] as num?)?.toInt(),
          predefinedRateTypeId: (json['PredefinedRateTypeId'] as num?)?.toInt(),
          movieArtistId: (json['MovieArtistId'] as num?)?.toInt(),
          movieTechnicianId: (json['MovieTechnicianId'] as num?)?.toInt(),
          movieEquipmentId: (json['MovieEquipmentId'] as num?)?.toInt(),
          moviePropertyId: (json['MoviePropertyId'] as num?)?.toInt(),
          movieVendorId: (json['MovieVendorId'] as num?)?.toInt(),
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          expenseEntryName: json['ExpenseEntryName'] as String?,
          description: json['Description'] as String?,
          chequeNumber: json['ChequeNumber'] as String?,
          chequeIssuedByBankName: json['ChequeIssuedByBankName'] as String?,
          chequeIssuedByBankBranchName:
              json['ChequeIssuedByBankBranchName'] as String?,
          bankTransferFromBankName: json['BankTransferFromBankName'] as String?,
          bankTransferFromBankBranchName:
              json['BankTransferFromBankBranchName'] as String?,
          bankTransferToBankName: json['BankTransferToBankName'] as String?,
          bankTransferToBankBranchName:
              json['BankTransferToBankBranchName'] as String?,
          bankTransferFromAccountNumber:
              json['BankTransferFromAccountNumber'] as String?,
          bankTransferToAccountNumber:
              json['BankTransferToAccountNumber'] as String?,
          amountIssuedDate: json['AmountIssuedDate'] == null
              ? null
              : DateTime.parse(json['AmountIssuedDate'] as String),
          quantity: (json['Quantity'] as num?)?.toDouble(),
          amount: (json['Amount'] as num?)?.toDouble(),
          totalAmount: (json['TotalAmount'] as num?)?.toDouble(),
          ledgerTypeId: (json['LedgerTypeId'] as num?)?.toInt(),
          movieId: (json['MovieId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1MovieUpdatemovieshootdayexpensewithfileattachmentPost$RequestBodyToJson(
            ApiV1MovieUpdatemovieshootdayexpensewithfileattachmentPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CreateMovieShootDayOnTheFly': instance.createMovieShootDayOnTheFly,
          'MovieShootDayNumber': instance.movieShootDayNumber,
          'MovieBudgetDivisionId': instance.movieBudgetDivisionId,
          'MovieShootDaySummary': instance.movieShootDaySummary,
          'Notes': instance.notes,
          'MovieShootDayExpenseId': instance.movieShootDayExpenseId,
          'MovieShootDayExpenseCode': instance.movieShootDayExpenseCode,
          'MovieShootDayId': instance.movieShootDayId,
          'MovieBudgetCategoryId': instance.movieBudgetCategoryId,
          'PredefinedBudgetOrExpenseTypeId':
              instance.predefinedBudgetOrExpenseTypeId,
          'PredefinedExpensePaymentStatusTypeId':
              instance.predefinedExpensePaymentStatusTypeId,
          'PredefinedExpensePaymentTypeId':
              instance.predefinedExpensePaymentTypeId,
          'PredefinedRateTypeId': instance.predefinedRateTypeId,
          'MovieArtistId': instance.movieArtistId,
          'MovieTechnicianId': instance.movieTechnicianId,
          'MovieEquipmentId': instance.movieEquipmentId,
          'MoviePropertyId': instance.moviePropertyId,
          'MovieVendorId': instance.movieVendorId,
          'MovieLocationId': instance.movieLocationId,
          'ExpenseEntryName': instance.expenseEntryName,
          'Description': instance.description,
          'ChequeNumber': instance.chequeNumber,
          'ChequeIssuedByBankName': instance.chequeIssuedByBankName,
          'ChequeIssuedByBankBranchName': instance.chequeIssuedByBankBranchName,
          'BankTransferFromBankName': instance.bankTransferFromBankName,
          'BankTransferFromBankBranchName':
              instance.bankTransferFromBankBranchName,
          'BankTransferToBankName': instance.bankTransferToBankName,
          'BankTransferToBankBranchName': instance.bankTransferToBankBranchName,
          'BankTransferFromAccountNumber':
              instance.bankTransferFromAccountNumber,
          'BankTransferToAccountNumber': instance.bankTransferToAccountNumber,
          'AmountIssuedDate': instance.amountIssuedDate?.toIso8601String(),
          'Quantity': instance.quantity,
          'Amount': instance.amount,
          'TotalAmount': instance.totalAmount,
          'LedgerTypeId': instance.ledgerTypeId,
          'MovieId': instance.movieId,
          'CompanyId': instance.companyId,
        };

ApiV1MovieCreatefileattachmentPost$RequestBody
    _$ApiV1MovieCreatefileattachmentPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatefileattachmentPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          fileAttachmentFolderId:
              (json['FileAttachmentFolderId'] as num?)?.toInt(),
          fileAttachmentFileName: json['FileAttachmentFileName'] as String?,
          fileAttachmentFileLocation:
              json['FileAttachmentFileLocation'] as String?,
          fileAttachmentPreviewFileLocation:
              json['FileAttachmentPreviewFileLocation'] as String?,
          fileAttachmentHasPreview: json['FileAttachmentHasPreview'] as bool?,
          fileAttachmentFileSizeInBytes:
              (json['FileAttachmentFileSizeInBytes'] as num?)?.toInt(),
          description: json['Description'] as String?,
          movieId: (json['MovieId'] as num?)?.toInt(),
          userId: (json['UserId'] as num?)?.toInt(),
          artistId: (json['ArtistId'] as num?)?.toInt(),
          vendorId: (json['VendorId'] as num?)?.toInt(),
          equipmentId: (json['EquipmentId'] as num?)?.toInt(),
          propertyId: (json['PropertyId'] as num?)?.toInt(),
          technicianId: (json['TechnicianId'] as num?)?.toInt(),
          movieArtistId: (json['MovieArtistId'] as num?)?.toInt(),
          contractId: (json['ContractId'] as num?)?.toInt(),
          movieEquipmentId: (json['MovieEquipmentId'] as num?)?.toInt(),
          moviePropertyId: (json['MoviePropertyId'] as num?)?.toInt(),
          movieLocationId: (json['MovieLocationId'] as num?)?.toInt(),
          movieLocationCandidateId:
              (json['MovieLocationCandidateId'] as num?)?.toInt(),
          movieCommitmentTaskId:
              (json['MovieCommitmentTaskId'] as num?)?.toInt(),
          movieSceneId: (json['MovieSceneId'] as num?)?.toInt(),
          movieSceneArtistId: (json['MovieSceneArtistId'] as num?)?.toInt(),
          movieSceneEquipmentId:
              (json['MovieSceneEquipmentId'] as num?)?.toInt(),
          movieScenePropertyId: (json['MovieScenePropertyId'] as num?)?.toInt(),
          movieSceneVendorId: (json['MovieSceneVendorId'] as num?)?.toInt(),
          movieSceneTechnicianId:
              (json['MovieSceneTechnicianId'] as num?)?.toInt(),
          movieShootDayId: (json['MovieShootDayId'] as num?)?.toInt(),
          movieShootDayArtistId:
              (json['MovieShootDayArtistId'] as num?)?.toInt(),
          movieShootDayBudgetId:
              (json['MovieShootDayBudgetId'] as num?)?.toInt(),
          movieShootDayEquipmentId:
              (json['MovieShootDayEquipmentId'] as num?)?.toInt(),
          movieShootDayPropertyId:
              (json['MovieShootDayPropertyId'] as num?)?.toInt(),
          movieShootDayExpenseId:
              (json['MovieShootDayExpenseId'] as num?)?.toInt(),
          movieShootDayRequirementId:
              (json['MovieShootDayRequirementId'] as num?)?.toInt(),
          movieShootDayVendorId:
              (json['MovieShootDayVendorId'] as num?)?.toInt(),
          movieShootDaySceneId: (json['MovieShootDaySceneId'] as num?)?.toInt(),
          movieShootDayTechnicianId:
              (json['MovieShootDayTechnicianId'] as num?)?.toInt(),
          movieTechnicianId: (json['MovieTechnicianId'] as num?)?.toInt(),
          movieUnitId: (json['MovieUnitId'] as num?)?.toInt(),
          movieUserId: (json['MovieUserId'] as num?)?.toInt(),
          movieVendorId: (json['MovieVendorId'] as num?)?.toInt(),
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1MovieCreatefileattachmentPost$RequestBodyToJson(
        ApiV1MovieCreatefileattachmentPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'FileAttachmentFolderId': instance.fileAttachmentFolderId,
      'FileAttachmentFileName': instance.fileAttachmentFileName,
      'FileAttachmentFileLocation': instance.fileAttachmentFileLocation,
      'FileAttachmentPreviewFileLocation':
          instance.fileAttachmentPreviewFileLocation,
      'FileAttachmentHasPreview': instance.fileAttachmentHasPreview,
      'FileAttachmentFileSizeInBytes': instance.fileAttachmentFileSizeInBytes,
      'Description': instance.description,
      'MovieId': instance.movieId,
      'UserId': instance.userId,
      'ArtistId': instance.artistId,
      'VendorId': instance.vendorId,
      'EquipmentId': instance.equipmentId,
      'PropertyId': instance.propertyId,
      'TechnicianId': instance.technicianId,
      'MovieArtistId': instance.movieArtistId,
      'ContractId': instance.contractId,
      'MovieEquipmentId': instance.movieEquipmentId,
      'MoviePropertyId': instance.moviePropertyId,
      'MovieLocationId': instance.movieLocationId,
      'MovieLocationCandidateId': instance.movieLocationCandidateId,
      'MovieCommitmentTaskId': instance.movieCommitmentTaskId,
      'MovieSceneId': instance.movieSceneId,
      'MovieSceneArtistId': instance.movieSceneArtistId,
      'MovieSceneEquipmentId': instance.movieSceneEquipmentId,
      'MovieScenePropertyId': instance.movieScenePropertyId,
      'MovieSceneVendorId': instance.movieSceneVendorId,
      'MovieSceneTechnicianId': instance.movieSceneTechnicianId,
      'MovieShootDayId': instance.movieShootDayId,
      'MovieShootDayArtistId': instance.movieShootDayArtistId,
      'MovieShootDayBudgetId': instance.movieShootDayBudgetId,
      'MovieShootDayEquipmentId': instance.movieShootDayEquipmentId,
      'MovieShootDayPropertyId': instance.movieShootDayPropertyId,
      'MovieShootDayExpenseId': instance.movieShootDayExpenseId,
      'MovieShootDayRequirementId': instance.movieShootDayRequirementId,
      'MovieShootDayVendorId': instance.movieShootDayVendorId,
      'MovieShootDaySceneId': instance.movieShootDaySceneId,
      'MovieShootDayTechnicianId': instance.movieShootDayTechnicianId,
      'MovieTechnicianId': instance.movieTechnicianId,
      'MovieUnitId': instance.movieUnitId,
      'MovieUserId': instance.movieUserId,
      'MovieVendorId': instance.movieVendorId,
      'CompanyId': instance.companyId,
    };

ApiV1MovieCreatemultiplefileattachmentPost$RequestBody
    _$ApiV1MovieCreatemultiplefileattachmentPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1MovieCreatemultiplefileattachmentPost$RequestBody(
          fileAttachmentCreateWithFileFormModels:
              (json['FileAttachmentCreateWithFileFormModels'] as List<dynamic>?)
                      ?.map((e) =>
                          FileAttachmentCreateWithFileFormModel.fromJson(
                              e as Map<String, dynamic>))
                      .toList() ??
                  [],
        );

Map<String, dynamic>
    _$ApiV1MovieCreatemultiplefileattachmentPost$RequestBodyToJson(
            ApiV1MovieCreatemultiplefileattachmentPost$RequestBody instance) =>
        <String, dynamic>{
          'FileAttachmentCreateWithFileFormModels': instance
              .fileAttachmentCreateWithFileFormModels
              ?.map((e) => e.toJson())
              .toList(),
        };

ApiV1SystemImportusersfromcsvPost$RequestBody
    _$ApiV1SystemImportusersfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportusersfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1SystemImportusersfromcsvPost$RequestBodyToJson(
        ApiV1SystemImportusersfromcsvPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CompanyId': instance.companyId,
    };

ApiV1SystemImportbudgetcategoriesfromcsvPost$RequestBody
    _$ApiV1SystemImportbudgetcategoriesfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportbudgetcategoriesfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String,
    dynamic> _$ApiV1SystemImportbudgetcategoriesfromcsvPost$RequestBodyToJson(
        ApiV1SystemImportbudgetcategoriesfromcsvPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CompanyId': instance.companyId,
    };

ApiV1SystemImportbudgetdivisionsfromcsvPost$RequestBody
    _$ApiV1SystemImportbudgetdivisionsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportbudgetdivisionsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportbudgetdivisionsfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportbudgetdivisionsfromcsvPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportartistsfromcsvPost$RequestBody
    _$ApiV1SystemImportartistsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportartistsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1SystemImportartistsfromcsvPost$RequestBodyToJson(
        ApiV1SystemImportartistsfromcsvPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CompanyId': instance.companyId,
    };

ApiV1SystemImporttechniciansfromcsvPost$RequestBody
    _$ApiV1SystemImporttechniciansfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImporttechniciansfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImporttechniciansfromcsvPost$RequestBodyToJson(
            ApiV1SystemImporttechniciansfromcsvPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportvendorsfromcsvPost$RequestBody
    _$ApiV1SystemImportvendorsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportvendorsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1SystemImportvendorsfromcsvPost$RequestBodyToJson(
        ApiV1SystemImportvendorsfromcsvPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CompanyId': instance.companyId,
    };

ApiV1SystemImportequipmentsfromcsvPost$RequestBody
    _$ApiV1SystemImportequipmentsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportequipmentsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1SystemImportequipmentsfromcsvPost$RequestBodyToJson(
        ApiV1SystemImportequipmentsfromcsvPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CompanyId': instance.companyId,
    };

ApiV1SystemImportpropertiesfromcsvPost$RequestBody
    _$ApiV1SystemImportpropertiesfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportpropertiesfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic> _$ApiV1SystemImportpropertiesfromcsvPost$RequestBodyToJson(
        ApiV1SystemImportpropertiesfromcsvPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CompanyId': instance.companyId,
    };

ApiV1SystemImportmoviebudgetcategoriesfromcsvPost$RequestBody
    _$ApiV1SystemImportmoviebudgetcategoriesfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmoviebudgetcategoriesfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmoviebudgetcategoriesfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmoviebudgetcategoriesfromcsvPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportmoviebudgetdivisionsfromcsvPost$RequestBody
    _$ApiV1SystemImportmoviebudgetdivisionsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmoviebudgetdivisionsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmoviebudgetdivisionsfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmoviebudgetdivisionsfromcsvPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportmovievendorsfromcsvPost$RequestBody
    _$ApiV1SystemImportmovievendorsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmovievendorsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmovievendorsfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmovievendorsfromcsvPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportmovieartistsfromcsvPost$RequestBody
    _$ApiV1SystemImportmovieartistsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmovieartistsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmovieartistsfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmovieartistsfromcsvPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportmovietechniciansfromcsvPost$RequestBody
    _$ApiV1SystemImportmovietechniciansfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmovietechniciansfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String,
    dynamic> _$ApiV1SystemImportmovietechniciansfromcsvPost$RequestBodyToJson(
        ApiV1SystemImportmovietechniciansfromcsvPost$RequestBody instance) =>
    <String, dynamic>{
      'UploadedFile': instance.uploadedFile,
      'CompanyId': instance.companyId,
    };

ApiV1SystemImportmovieequipmentsfromcsvPost$RequestBody
    _$ApiV1SystemImportmovieequipmentsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmovieequipmentsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmovieequipmentsfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmovieequipmentsfromcsvPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportmoviepropertiesfromcsvPost$RequestBody
    _$ApiV1SystemImportmoviepropertiesfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmoviepropertiesfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmoviepropertiesfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmoviepropertiesfromcsvPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportmovieshootdaybudgetsfromcsvPost$RequestBody
    _$ApiV1SystemImportmovieshootdaybudgetsfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmovieshootdaybudgetsfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmovieshootdaybudgetsfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmovieshootdaybudgetsfromcsvPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportmovieshootdayexpensesfromcsvPost$RequestBody
    _$ApiV1SystemImportmovieshootdayexpensesfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmovieshootdayexpensesfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmovieshootdayexpensesfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmovieshootdayexpensesfromcsvPost$RequestBody
                instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportmoviescenesfromcsvPost$RequestBody
    _$ApiV1SystemImportmoviescenesfromcsvPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportmoviescenesfromcsvPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyId: (json['CompanyId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImportmoviescenesfromcsvPost$RequestBodyToJson(
            ApiV1SystemImportmoviescenesfromcsvPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyId': instance.companyId,
        };

ApiV1SystemImportcallsheetdatafromjsonPost$RequestBody
    _$ApiV1SystemImportcallsheetdatafromjsonPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImportcallsheetdatafromjsonPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          companyCode: json['CompanyCode'] as String?,
          uniqueIdentifier: json['UniqueIdentifier'] as String?,
        );

Map<String, dynamic>
    _$ApiV1SystemImportcallsheetdatafromjsonPost$RequestBodyToJson(
            ApiV1SystemImportcallsheetdatafromjsonPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'CompanyCode': instance.companyCode,
          'UniqueIdentifier': instance.uniqueIdentifier,
        };

ApiV1SystemImporttopsheetdatafromjsonPost$RequestBody
    _$ApiV1SystemImporttopsheetdatafromjsonPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1SystemImporttopsheetdatafromjsonPost$RequestBody(
          uploadedFile: json['UploadedFile'] as String?,
          movieId: (json['MovieId'] as num?)?.toInt(),
          movieShootDayId: (json['MovieShootDayId'] as num?)?.toInt(),
        );

Map<String, dynamic>
    _$ApiV1SystemImporttopsheetdatafromjsonPost$RequestBodyToJson(
            ApiV1SystemImporttopsheetdatafromjsonPost$RequestBody instance) =>
        <String, dynamic>{
          'UploadedFile': instance.uploadedFile,
          'MovieId': instance.movieId,
          'MovieShootDayId': instance.movieShootDayId,
        };

ApiV1TwilioHandlegatherPost$RequestBody
    _$ApiV1TwilioHandlegatherPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1TwilioHandlegatherPost$RequestBody(
          digits: json['digits'] as String?,
        );

Map<String, dynamic> _$ApiV1TwilioHandlegatherPost$RequestBodyToJson(
        ApiV1TwilioHandlegatherPost$RequestBody instance) =>
    <String, dynamic>{
      'digits': instance.digits,
    };

ApiV1TwilioHandlestatusPost$RequestBody
    _$ApiV1TwilioHandlestatusPost$RequestBodyFromJson(
            Map<String, dynamic> json) =>
        ApiV1TwilioHandlestatusPost$RequestBody(
          callStatus: json['callStatus'] as String?,
          smsStatus: json['smsStatus'] as String?,
        );

Map<String, dynamic> _$ApiV1TwilioHandlestatusPost$RequestBodyToJson(
        ApiV1TwilioHandlestatusPost$RequestBody instance) =>
    <String, dynamic>{
      'callStatus': instance.callStatus,
      'smsStatus': instance.smsStatus,
    };
